<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>generic_mapper</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>generic_mapper</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>onNewLine Trigger</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>raiseEvent("onNewLine")</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>4</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Tab Trigger</name>
				<script>local text = line
local pos = selectString("\t",1)
while pos ~= -1 do
	replace(string.rep(" ",8 - math.fmod(pos,8)))
	pos = selectString("\t",1)
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\t</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>English Trigger Group</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>English Exits Trigger</name>
					<script>raiseEvent("onNewRoom",matches[2] or "")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s*\[\s*[Ee]xits:\s*(.*)\]</string>
						<string>^\s*There (?:is|are) \w+ (?:visible|obvious) exit[s]?:\s*(.*)</string>
						<string>^\[?\s*(?:[Vv]isible|[Oo]bvious) (?:[Pp]ath|[Ee]xit)[s]?(?: is| are)?:?\s*(.*)\]?</string>
						<string>^\s*You see[\w\s]* exit[s]? leading (.*)</string>
						<string>Exits:\s*(.*)</string>
						<string>There are no obvious exits.</string>
						<string>^\s*The (?:only )?obvious exit[s]? (?:is|are):? (.*)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>2</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>English Failed Move Trigger</name>
					<script>raiseEvent("onMoveFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:Alas, )?[Yy]ou can(?:no|')t (?:go|move) .*$</string>
						<string>^The .+ (?:is|seems to be) closed.$</string>
						<string>.+ (?:is not going to|will not) let you pass.$</string>
						<string>^That exit is blocked.$</string>
						<string>^You are blocked by .*$</string>
						<string>^There is no exit in that direction.$</string>
						<string>^The .* is locked.$</string>
						<string>^Alas, you cannot go that way\.\.\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>English Vision Fail Trigger</name>
					<script>raiseEvent("onVisionFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^It is pitch black...</string>
						<string>^It(?:'s| is) too dark</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>English Forced Move Trigger</name>
					<script>raiseEvent("onForcedMove",matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Carefully getting your bearings, you set off (\w+) toward your goal.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>English Multi-Line Exits Trigger</name>
					<script>map.prompt.exits = ""</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Visible Exits:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Exit Line Trigger</name>
						<script>map.prompt.exits = map.prompt.exits .. ", " .. string.trim(matches[2])
setTriggerStayOpen("Multi-Line Exits Trigger",1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^([\w\s]+)\s+: [\w\s]+</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Russian Trigger Group</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Russian Exits Trigger</name>
					<script>raiseEvent("onNewRoom",matches[2] or "")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s*\[\s*Выходы:\s*(.*)\]</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Russian Failed Move Trigger</name>
					<script>raiseEvent("onMoveFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Извини, но ты не можешь туда идти.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Russion Vision Fail Trigger</name>
					<script>raiseEvent("onVisionFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Здесь слишком темно ...</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Chinese Trigger Group</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Chinese Exits Trigger</name>
					<script>raiseEvent("onNewRoom",matches[2] or "")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s*这里明显的方向有 (.*)。</string>
						<string>^\s*这里明显的出口有 (.*)。</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Chinese Failed Movement Trigger</name>
					<script>raiseEvent("onMoveFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>你又渴又饿，浑身无力，根本就走不动路。</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>RoD_UI</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>RoD_UI</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>General</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Prompt Trigger</name>
					<script>input = matches[1]
disableTrigger("content")
if usingMSDP == false then
populateMSDP()
setclass()
cecho("\n&lt;white&gt;Initilizing &lt;DeepSkyBlue&gt;MSDP&lt;white&gt;.\n")
cecho("&lt;white&gt;please use &lt;DeepSkyBlue&gt;? &lt;white&gt;if you need help with the UI.\n")
usingMSDP = true
end

line_number = getLastLineNumber("main")

if is_training then spelltraining() end

-- *** Track and report fights though this function ***
if is_fight_tracking then fight_club(line) end

-- *** Trigger mana reminders for resting ***
if is_tick_tracking then tick_tracker() end

-- *** Trigger group check ***
if is_group_tracking then 
  is_group_tracking = false
	group_update(line_number) 
end

-- *** Clean up for next trigger, keep previous values for scripts that need them ***
old_ma = ma; old_hp = hp; old_bp = bp; old_line_number = line_number

disableTrigger("content")
disableTrigger("get info")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\[\d+\/\d+wt\] \&lt;\d+\/\d+hp \d+\/\d+mv.*$</string>
						<string>^\[\d+\/\d+wt\] \&lt;\d+\/\d+hp \d+\/\d+ma \d+\/\d+mv.*$</string>
						<string>^\[\d+\/\d+wt\] \&lt;\d+\/\d+hp \d+\/\d+bp \d+\/\d+mv.*$</string>
						<string>\[.*\]\&lt;.*\/.*hp .*\/.*ma .*\/.*mv\&gt;.*$</string>
						<string>\[.*\]\&lt;.*\/.*hp .*\/.*bp .*\/.*mv\&gt;.*$</string>
						<string>\[.*\]\&lt;.*\/.*hp .*\/.*mv\&gt;.*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Get Prompt</name>
					<script>populateMSDP()
setclass()
tempTimer(2,[[getprompt()]])
usingMSDP = true
cecho("\n&lt;white&gt;Initilizing &lt;DeepSkyBlue&gt;MSDP&lt;white&gt;.\n")
cecho("&lt;white&gt;please use &lt;DeepSkyBlue&gt;? &lt;white&gt;if you need help with the UI.\n")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\&lt;\d+\/\d+hp \d+\/\d+mv .*to level\&gt; $</string>
						<string>^\&lt;\d+\/\d+hp \d+\/\d+m \d+\/\d+mv .*to level\&gt; $</string>
						<string>^\&lt;\d+\/\d+hp \d+\/\d+bp \d+\/\d+mv .*to level\&gt; $</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Mosquito</name>
					<script>send('kill mosquito; sac corpse')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string> mosquito is buzzing in your ear</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Detect Quaff Problem</name>
					<script>-- *** Make sure we didn't screw up the quaffing by trying to quaff with no potions
local quaff_line_number = getLastLineNumber("main")-1
local no_item_command = getLines(quaff_line_number, quaff_line_number+1)[1]
if string.match(no_item_command,"quaff " ..heal) then
  send("\n")
  quaffreports_ticked = false
    cecho("&lt;white&gt;Auto Quaffing &lt;red&gt;OFF&lt;white&gt;!\n")
    is_quaffable = false
    
menu.AQ:setStyleSheet([[
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_unticked.png");
      ]])
  tempTimer(1, [[ cecho("&lt;white&gt;YOU ARE &lt;red&gt;OUT OF HEALS&lt;white&gt;!!!!\n") ]])
  tempTimer(3, [[ cecho("&lt;white&gt;YOU ARE &lt;red&gt;OUT OF HEALS&lt;white&gt;!!!!\n") ]])
  tempTimer(5, [[ cecho("&lt;white&gt;YOU ARE &lt;red&gt;OUT OF HEALS&lt;white&gt;!!!!\n") ]])
  tempTimer(7, [[ cecho("&lt;white&gt;YOU ARE &lt;red&gt;OUT OF HEALS&lt;white&gt;!!!!\n") ]])
  tempTimer(9, [[ cecho("&lt;white&gt;YOU ARE &lt;red&gt;OUT OF HEALS&lt;white&gt;!!!!\n") ]])
else

  selectString(matches[1], 1 )
  setFgColor(255,0,0)
  setBgColor(255,255,255)
  resetFormat()
	--cecho("\n&lt;yellow&gt;Line causing item issue: " .. no_item_command .. "\n")
end
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You do not have that item.</string>
						<string>^You see nothing like that in a .*\.$</string>
						<string>^You see nothing like that in an .*\.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Disarm Trigger</name>
					<script>is_disarmed = true
disarm_counter = disarm_counter + 1
if string.match(line,"your") then
  weapon = string.match(line,"(%w+)!")
  send("get " .. weapon)
  send("wield " .. weapon)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#fbff00</mFgColor>
					<mBgColor>#2b1ae7</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>DISARMS</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Chats</name>
					<script>cecho("chat_window", "&lt;green&gt;" .. getTime(true, "hh:mm:ss") .. "  ")
selectCurrentLine()
copy()
appendBuffer("chat_window")
--deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You (say|chat|yell|tell|newbiechat|whisper|answer|exclaim)</string>
						<string>^.* (says|chats|yells|tells|newbiechats|whispers|asks|exclaims).*\'.*\'</string>
						<string>traffics?:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fire every line</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return true</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>afk sleep</name>
					<script>send("sleep")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are STARVING\!$</string>
						<string>^You are DYING of THIRST\!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Open</name>
					<script>send("open "..command)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The (.*?) is closed\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Sleeping</name>
					<script>sleeping = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You collapse into a deep sleep\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>wake up</name>
					<script>sleeping = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You wake and climb quickly to your feet\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>new character</name>
					<script>populateMSDP()
getname()
setclass()
tempTimer(1, [[ cecho("&lt;white&gt;Welcome to &lt;red&gt;Realms Of Despair&lt;white&gt;! &lt;white&gt;Wait one moment for &lt;red&gt;Initilization&lt;white&gt;!\n") ]])
send("help start")
tempTimer(3, [[ cecho("\n") ]])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>&lt;Type HELP START&gt;</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>cancast</name>
					<script>cancast = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You don't have enough mana.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spellbot</name>
					<script>if spellbot then
  if class == "Mage" then
    cecho("\n&lt;white&gt;Casting Buffs!\n")
    sendAll("c scry " .. matches[2], "c slink " .. matches[2], "c saga " .. matches[2], "c elven " .. matches[2], "c trollish " .. matches[2], "c vali " .. matches[2], "c shield " .. matches[2], "c ogre " .. matches[2], "c fly " .. matches[2], "c dragon " .. matches[2], false)
  elseif class == "Cleric" then
    cecho("\n&lt;white&gt;Casting Buffs!\n")
    sendAll("c sanc " .. matches[2], "c fly " .. matches[2], "c float " .. matches[2], "c bless " .. matches[2], "c armor " .. matches[2], false)
  end
end 
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.*) says \'(?:all|ALL)\'$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>no afk</name>
					<script>send("\n")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You disappear into the void.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Abilities</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>ability split</name>
					<script>abil = matches[2]
enableTrigger("get info")
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^ .*-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\[(.*)\]\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>get info</name>
					<script>
if abil == "Spells" then 
  abilities.Spells[multimatches[2][2]] = {"  "..multimatches[2][3].."%"}
  abilities.Spells[multimatches[2][5]] = {"  "..multimatches[2][6].."%"}
  abilities.Spells[multimatches[2][8]] = {"  "..multimatches[2][9].."%"}
elseif abil == "Skills" then
  abilities.Skills[multimatches[2][2]] = {"  "..multimatches[2][3].."%"}
  abilities.Skills[multimatches[2][5]] = {"  "..multimatches[2][6].."%"}
  abilities.Skills[multimatches[2][8]] = {"  "..multimatches[2][9].."%"}
elseif abil == "Weapons" then
  abilities.Weapons[multimatches[2][2]] = {"  "..multimatches[2][3].."%"}
  abilities.Weapons[multimatches[2][5]] = {"  "..multimatches[2][6].."%"}
  abilities.Weapons[multimatches[2][8]] = {"  "..multimatches[2][9].."%"}
end


--showMultimatches()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#ffffff</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>ANSI_COLORS_F{015}_B{000}</string>
						<string>(\w+?\s?\w+)  \s?(\d+)%</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>6</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>items</name>
				<script>--needs lots of work. stacks mess it up, and also some items with special properties like (Glowing)
--trying to keep colors using regex stuff to capture mud output and copy it to the new window.
--Maybe I should just use tables and start a catalog of items and corresponding colors
--getting items script is to complicated and active, but keeps the item colors, tables would solve
--removing items script still wont catch stacks and the cap method only catches exact matches so far</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>drop/put</name>
					<script>
  local x = maxinv + 1
  while x &gt; 0
  do
    if getLines("inventory", x, getLineNumber())[1]:find(matches[2]) then 
      moveCursor("inventory", 0, x)
      deleteLine("inventory")
      inventory:cecho("")
    elseif getLines("inventory", x, getLineNumber())[1]:find("(Glowing)"..matches[2]) then 
      moveCursor("inventory", 0, x)
      deleteLine("inventory")
      inventory:cecho("")
    end
    x = x - 1 
  end

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You drop (.*)\.$</string>
						<string>^You put (.*) in (.*)\.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>get</name>
					<script>
if string.match(command, "all") then
  if tempinv then killTimer(tempinv) end
  tempinv = tempTimer(1.0, [[ send("i", false)]])
  
elseif is_fighting or string.match(line, "gold coins") or string.match(line, "casting") then

else
if tempinv then killTimer(tempinv) end
tempinv = tempTimer(0.01, function() 
  send("i", false)
  tempRegexTrigger("     .*", function() deleteLine() end, inv)
  tempRegexTrigger("^You are carrying.*", function() deleteLine() end, 1)
  tempTimer(0.01, [[deleteLine() deleteLine()]])
  
end)

end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You get (.*)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>inv title</name>
					<script>
    if invtrig then killTrigger(invtrig) end        
    maxinv = (matches[2] + matches[3])
    inv = matches[2]
    capinv = true
    clearWindow("inventory")
    inventory:cecho("&lt;white&gt;  " .. inv.. "&lt;red&gt; /&lt;white&gt; ".. maxinv.. "&lt;red&gt; :&lt;white&gt; used &lt;red&gt;-&lt;white&gt; Container &lt;red&gt;:&lt;white&gt; " .. container.."\n")

  enableTrigger("content")

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are carrying (\d+) items? and have room for (\d+) more\:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>content</name>
					<script>selectCurrentLine()
selectString("    ", 1)
replace("")
selectCurrentLine()
copy()
appendBuffer("inventory")
selectString(" ", 1)
replace("     ")
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^     .*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>generic_mapper</name>
			<script></script>
			<command></command>
			<packageName>generic_mapper</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Setup Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Map Show Alias</name>
					<script>map.showMap()</script>
					<command></command>
					<packageName></packageName>
					<regex>^map show$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Find Map Prompt Alias</name>
					<script>map.find_prompt()</script>
					<command></command>
					<packageName></packageName>
					<regex>^find prompt$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Map Prompt Alias</name>
					<script>-- USE PATTERNS FOR STRING.GSUB
if matches[2] then
  map.make_prompt_pattern(matches[2])
else
  display(map.save.prompt_pattern)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map prompt(?: (.*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Map Ignore Alias</name>
					<script>-- USE PATTERNS FOR STRING.GSUB
if matches[2] then
  map.make_ignore_pattern(matches[2])
else
  display(map.save.ignore_patterns)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map ignore(?: (.*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Debug Alias</name>
					<script>map.configs.debug = not map.configs.debug
map.echo("Map debug set to: " .. (map.configs.debug and "on" or "off"))</script>
					<command></command>
					<packageName></packageName>
					<regex>^map debug$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Update Alias</name>
					<script>map.updateVersion()</script>
					<command></command>
					<packageName></packageName>
					<regex>^map update$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Config Alias</name>
					<script>-- adjust pattern to allow no argument, if no argument show general help about configs
if not matches[2] then
	cecho(map.help.configs)
else
  local startStr, endStr = string.match(matches[2],"(.*) ([%w%.]+)")
  local vals = {'on', 'off', 'true', 'false'}
  local modes = {'simple','normal','complex'}
  if (table.contains(vals, endStr) or tonumber(endStr)) or (startStr == "mode" and table.contains(modes, endStr)) then
  	map.setConfigs(startStr, endStr)
  else
  	map.setConfigs(matches[2])
  end
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^map config(?: ([\w\s\.]+))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Window Config Alias</name>
					<script>map.setConfigs("map_window",matches[3],matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map window (x|y|w|h|origin|shown)(?: ([\w%]+))?</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Translate Config Alias</name>
					<script>map.setConfigs("lang_dirs", {matches[3], matches[4]}, matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map translate (\w+) (\w+) (\w+)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Information Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Map Quick Start Alias</name>
					<script>map.show_help("quick_start")</script>
					<command></command>
					<packageName></packageName>
					<regex>^map basics$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Help Alias</name>
					<script>map.show_help(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map help(?: (.*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Rooms Alias</name>
					<script>map.echoRoomList(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map rooms (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Areas Alias</name>
					<script>map.echoAreaList()</script>
					<command></command>
					<packageName></packageName>
					<regex>^map areas$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Regular Use Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Map Me Alias</name>
					<script>map.find_me(nil, nil, nil, true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^map me$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Path Alias</name>
					<script>map.find_path(matches[2],matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map path ([^;]+)(?:\s*;\s*(.+))?</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Recall Alias</name>
					<script>map.set_recall()</script>
					<command></command>
					<packageName></packageName>
					<regex>^map recall$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Character Alias</name>
					<script>map.character = matches[2]</script>
					<command></command>
					<packageName></packageName>
					<regex>^map character (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Map Stop Alias</name>
					<script>raiseEvent("mapStop")</script>
					<command></command>
					<packageName></packageName>
					<regex>^map stop$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Map Creation Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Set Room Area Alias</name>
					<script>map.set_area(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^set area (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Start Mapping Alias</name>
					<script>map.start_mapping(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^start mapping(?: (.*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Stop Mapping Alias</name>
					<script>map.stop_mapping()</script>
					<command></command>
					<packageName></packageName>
					<regex>^stop mapping$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Shift Room Alias</name>
					<script>map.shift_room(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^shift (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Add Portal Alias</name>
					<script>map.set_portal(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^add portal (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Show Moves Alias</name>
					<script>map.show_moves()</script>
					<command></command>
					<packageName></packageName>
					<regex>^show moves$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Clear Moves Alias</name>
					<script>map.clear_moves()</script>
					<command></command>
					<packageName></packageName>
					<regex>^clear moves$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Add Door Alias</name>
					<script>map.set_door(matches[2],matches[3],matches[4])</script>
					<command></command>
					<packageName></packageName>
					<regex>^add door (\w+)(?: (none|open|closed|locked))?(?: (yes|no))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Merge Rooms Alias</name>
					<script>map.merge_rooms()</script>
					<command></command>
					<packageName></packageName>
					<regex>^merge rooms$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Map Mode Alias</name>
					<script>map.set_mode(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map mode (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Room Exit Alias</name>
					<script>map.set_exit(matches[2],matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^set exit (.+) (\d+)</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Map Sharing Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Save Map Alias</name>
					<script>saveMap(getMudletHomeDir() .. "/map.dat")</script>
					<command></command>
					<packageName></packageName>
					<regex>^map save$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Load Map Alias</name>
					<script>map.load_map(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map load(?: (.*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Import Map Area Alias</name>
					<script>map.import_area(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map import (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Export Map Area Alias</name>
					<script>map.export_area(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^map export (.*)</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>send-text-to-all-games</name>
			<script></script>
			<command></command>
			<packageName>send-text-to-all-games</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Send text to all games with :</name>
				<script>-- prefix with : to send text or run an alias in all open profiles that have this script installed
-- for example - :hi or :follow bob
local matchedText = matches[2]
expandAlias(matchedText)
raiseGlobalEvent("sysSendAllProfiles", matchedText)
</script>
				<command></command>
				<packageName></packageName>
				<regex>^:(.*)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>deleteOldProfiles</name>
			<script></script>
			<command></command>
			<packageName>deleteOldProfiles</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>delete old profiles</name>
				<script>deleteOldProfiles(matches[3], matches[2]=="maps")

--Syntax examples: "delete old profiles"  -&gt; deletes profiles older than 31 days
--					"delete old maps 10"	-&gt; deletes maps older than 10 days</script>
				<command></command>
				<packageName></packageName>
				<regex>^delete old (profiles|maps)(?: (\d+))?$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>echo</name>
			<script></script>
			<command></command>
			<packageName>echo</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>`echo</name>
				<script>local s = matches[2]

s = string.gsub(s, "%$", "\n")
feedTriggers("\n" .. s .. "\n")
echo("\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>`echo (.+)</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>run-lua-code-v4</name>
			<script></script>
			<command></command>
			<packageName>run-lua-code-v4</packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>run lua code</name>
				<script>local f, e = loadstring("return "..matches[2])
if not f then
  f, e = assert(loadstring(matches[2]))
end

local r =
  function(...)
    if not table.is_empty({...}) then
      display(...)
    end
  end
r(f())</script>
				<command></command>
				<packageName></packageName>
				<regex>^lua (.*)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>RoD_UI</name>
			<script></script>
			<command></command>
			<packageName>RoD_UI</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>System</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Set Potion</name>
					<script>heal = matches[2]
cecho("&lt;white&gt;Healing Item Set To &lt;light_slate_blue&gt;" .. heal .."&lt;white&gt;!\n")
menu.Potiontitle:echo(heal)
</script>
					<command></command>
					<packageName></packageName>
					<regex>^sp (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Healing Limit</name>
					<script>quafftrigger = tonumber(matches[2])
cecho("&lt;white&gt;Auto Quaffing Health Limit Set To &lt;light_slate_blue&gt;" .. quafftrigger .."&lt;white&gt;!\n")
menu.HealingAttitle:echo(quafftrigger .. " HP")</script>
					<command></command>
					<packageName></packageName>
					<regex>^sh (\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Container</name>
					<script>if matches[2] == nil or matches[2] == "?" then

	cecho("&lt;white&gt;container is &lt;light_slate_blue&gt;"..container.."\n")
  
elseif matches[2] == "-" then

	container = "None"
  cecho("&lt;white&gt;Reseting container to &lt;light_slate_blue&gt;"..container.."\n")
  menu.Containertitle:echo(container)
  
else 

	container = matches[2]
	cecho("&lt;white&gt;Container set to: &lt;light_slate_blue&gt;"..container.."&lt;white&gt;!\n")
  menu.Containertitle:echo(container)

  
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^sc (.*)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>set attack</name>
					<script>attack = matches[2]
cecho("&lt;white&gt;Attack set to: &lt;light_slate_blue&gt;" .. matches[2].."&lt;white&gt;!\n")
menu.Attacktitle:echo(attack)</script>
					<command></command>
					<packageName></packageName>
					<regex>^sa (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>set secondary</name>
					<script>secondary = matches[2]
cecho("&lt;white&gt;Secondary set to: &lt;light_slate_blue&gt;" .. matches[2].."&lt;white&gt;!\n")
menu.Secondarytitle:echo(secondary)</script>
					<command></command>
					<packageName></packageName>
					<regex>^ss (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Target</name>
					<script>enemy = matches[2]
menu.Targettitle:echo(enemy)
cecho("\n&lt;white&gt;Target is now &lt;light_slate_blue&gt;" .. enemy .."&lt;white&gt;!\n")

</script>
					<command></command>
					<packageName></packageName>
					<regex>^st (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set Debuff</name>
					<script>debuff = matches[2]
cecho("&lt;white&gt;Debuff is set to: &lt;light_slate_blue&gt;" .. debuff.."&lt;white&gt;!\n")
menu.Debufftitle:echo(debuff)</script>
					<command></command>
					<packageName></packageName>
					<regex>^sd (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>reset MSDP on quit</name>
					<script>
sendAll("save","quit", false) 
tempTimer(2, function() usingMSDP = false end)</script>
					<command></command>
					<packageName></packageName>
					<regex>^quit$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Mudlet colors</name>
					<script>showColors()</script>
					<command></command>
					<packageName></packageName>
					<regex>^mcolors$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Spell Train</name>
					<script>line = matches[2]
if line == nil or line == "?" or line == "help" then
  cecho("&lt;white&gt;Type &lt;DeepSkyBlue&gt;train * &lt;white&gt;to add something to the training list!\n It will only add &lt;red&gt;C &lt;white&gt;before what you type so make sure to include the &lt;red&gt;' ' &lt;white&gt;in the spells that need them as well as &lt;red&gt;targets&lt;white&gt;!\n")
  cecho("\n&lt;dark_goldenrod&gt;Training Options are:\n\n")
  cecho("&lt;DeepSkyBlue&gt;list &lt;white&gt;:To display your current training list! \n")
  cecho("&lt;DeepSkyBlue&gt;on &lt;white&gt;:Will turn spell training on! \n")
  cecho("&lt;DeepSkyBlue&gt;off &lt;white&gt;:Will turn spell training off! \n")
  cecho("&lt;DeepSkyBlue&gt;clear &lt;white&gt;:Will clear the current training list! \n")
  cecho("&lt;DeepSkyBlue&gt;clear &lt;red&gt;*&lt;white&gt;:Will clear &lt;red&gt;* &lt;white&gt;from the training list! \n")
 
elseif line == "list" then
  cecho("&lt;white&gt;Your current training list is:&lt;light_slate_blue&gt;\n")
  display( ST )
elseif line == "on" then
  if ST == nil then 
    cecho("&lt;white&gt;Please enter something to train with &lt;DeepSkyBlue&gt;train * &lt;white&gt;You may add multiple items to the list!\n")
  else
    is_training = true
    enableTrigger("afk sleep")
    cecho("&lt;white&gt;Automatic Spell Training is now &lt;green&gt;ON!\n")
  end
elseif line == "off" then
  is_training = false
  disableTrigger("afk sleep")
  cecho("&lt;white&gt;Automatic Spell Training is now &lt;red&gt;OFF!\n")
elseif line == "clear" then
  ST = {}
  cecho("&lt;white&gt;Automatic Spell Training list has been &lt;red&gt;CLEARED!\n")
elseif string.match(line,"clear %.*") then
  removing = string.match(line, "clear (.*)" )
  table.remove(ST, table.index_of(ST, removing))
  cecho("&lt;white&gt;Removed &lt;red&gt;" .. removing .. "&lt;white&gt; from your spell training list!\n")
elseif level == 1 then
  send(matches[1])
else

table.insert( ST, line )
cecho("&lt;white&gt;Added &lt;green&gt;" .. line .. "&lt;white&gt; to your spell training list!\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^train (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>help</name>
					<script>line = matches[1]
echo(line)
if matches[2] == "" or string.match(line, "help") then
cecho("&lt;LightSkyBlue&gt;                     Thank you for using my &lt;red&gt;Beta&lt;LightSkyBlue&gt; version &lt;gold&gt;Realms of Despair &lt;LightSkyBlue&gt;GUI!!!\n")
cecho("&lt;red&gt;                  Inventory is a little buggy still, group tracking has not been finished\n\n")
cecho("&lt;green&gt;     Area List and Maps\n")
cecho("&lt;white&gt;-In the dropdown &lt;LightSkyBlue&gt;Area List&lt;white&gt; you can &lt;red&gt;click&lt;white&gt; on the &lt;red&gt;area name&lt;white&gt; to &lt;LightSkyBlue&gt;speedwalk&lt;white&gt; to the area.\n\n")
cecho("&lt;white&gt;-&lt;red&gt;Click&lt;white&gt; on the &lt;red&gt;map&lt;white&gt; in the &lt;LightSkyBlue&gt;Area List&lt;white&gt; to display it in the &lt;LightSkyBlue&gt;Popout Map Window&lt;white&gt;.\n\n")
cecho("&lt;white&gt;-&lt;red&gt;Double click&lt;white&gt; on the &lt;red&gt;map&lt;white&gt; in the &lt;LightSkyBlue&gt;Area List&lt;white&gt; to take you to its Rodpedias wiki page.\n\n")
cecho("&lt;white&gt;-Inside the &lt;LightSkyBlue&gt;Popout Map Window&lt;white&gt; you can &lt;red&gt;double click&lt;white&gt; the &lt;red&gt;map image&lt;white&gt; to bring up the &lt;LightSkyBlue&gt;AutoMapper&lt;white&gt; or &lt;red&gt;click&lt;white&gt; the &lt;red&gt;Map button&lt;white&gt; in the top menu.\n\n")
cecho("&lt;white&gt;-There is also a &lt;red&gt;right click &lt;white&gt;option in the &lt;red&gt;Popout Map Window&lt;white&gt; to toggle between map image and &lt;LightSkyBlue&gt;AutoMapper&lt;white&gt;.\n")
cecho("&lt;green&gt;\n     Commands/Aliases\n")
cecho("&lt;LightSkyBlue&gt;sp * &lt;white&gt;to set the Potion you want to Auto Quaff.\n")
cecho("&lt;LightSkyBlue&gt;sh * &lt;white&gt;to set the Limit you want to Auto Quaff at.\n")
cecho("&lt;LightSkyBlue&gt;sc * &lt;white&gt;to set the Container you want to Auto Quaff from.\n")
cecho("&lt;LightSkyBlue&gt;sa * &lt;white&gt;to set the Attack you want to use with the alias '&lt;LightSkyBlue&gt;a&lt;white&gt;'.\n")
cecho("&lt;LightSkyBlue&gt;ss * &lt;white&gt;to set the Secondary Attack you want to use with Auto Attacking.\n")
cecho("&lt;LightSkyBlue&gt;sh * &lt;white&gt;to set the Limit you want to Auto Quaff at.\n")
cecho("&lt;LightSkyBlue&gt;st * &lt;white&gt;to set your Target, MSDP handles most targeting but there if needed.\n")
cecho("&lt;LightSkyBlue&gt;sd * &lt;white&gt;to set the Debuff you want to use with the alias '&lt;LightSkyBlue&gt;db&lt;white&gt;'.\n")
cecho("&lt;LightSkyBlue&gt; a   &lt;white&gt;to attack your target.\n")
cecho("&lt;LightSkyBlue&gt; k * &lt;white&gt;to kill your target.\n")
cecho("&lt;LightSkyBlue&gt;id * &lt;white&gt;to identify something.\n")
cecho("&lt;LightSkyBlue&gt;rec  &lt;white&gt;to recall.\n")
cecho("&lt;LightSkyBlue&gt;restock * &lt;white&gt;to restock 10 of the item.\n")
cecho("&lt;LightSkyBlue&gt;buff * &lt;white&gt;or &lt;LightSkyBlue&gt;buffs &lt;white&gt;to buff a target or yourself. &lt;red&gt;still WIP\n")
cecho("&lt;LightSkyBlue&gt;? train &lt;white&gt;/ &lt;LightSkyBlue&gt;fight &lt;white&gt;/ &lt;LightSkyBlue&gt;quaff &lt;white&gt;/ &lt;LightSkyBlue&gt;bot &lt;white&gt;/ &lt;LightSkyBlue&gt;attack &lt;white&gt;/ &lt;LightSkyBlue&gt;mana &lt;white&gt;for more help.\n")
elseif string.match(line, "fight") then
  cecho("&lt;white&gt;\nFight Reporting will gather damages, experience, disarms, and healing to give you a cost benifit sense.")
  cecho("\n&lt;gold&gt;special thanks to Aesatchien&lt;white&gt; for this script and all the work that he did with his project on github!")
elseif string.match(line, "quaff") then
  cecho("\n&lt;white&gt;Auto Quaffing will use the potion you set with &lt;LightSkyBlue&gt;sp * &lt;white&gt; to heal at the ammount you set with &lt;LightSkyBlue&gt;sh * &lt;white&gt; from the container you set with &lt;LightSkyBlue&gt;sc * &lt;white&gt; while you are in battle. It will do so with priority over the secondary attack if you are also using Auto Attacking.\n")
elseif string.match(line, "train") then 
  cecho("\n&lt;white&gt;Type &lt;DeepSkyBlue&gt;train * &lt;white&gt;to add something to the training list!\n It will only add &lt;red&gt;C &lt;white&gt;before what you type so make sure to include the &lt;red&gt;' ' &lt;white&gt;in the spells that need them as well as &lt;red&gt;targets&lt;white&gt;!\n")
  cecho("\n&lt;dark_goldenrod&gt;Training Options are:\n\n")
  cecho("&lt;DeepSkyBlue&gt;list &lt;white&gt;:To display your current training list! \n")
  cecho("&lt;DeepSkyBlue&gt;on &lt;white&gt;:Will turn spell training on! \n")
  cecho("&lt;DeepSkyBlue&gt;off &lt;white&gt;:Will turn spell training off! \n")
  cecho("&lt;DeepSkyBlue&gt;clear &lt;white&gt;:Will clear the current training list! \n")
  cecho("&lt;DeepSkyBlue&gt;clear &lt;red&gt;*&lt;white&gt;:Will clear &lt;red&gt;* &lt;white&gt;from the training list! \n")
elseif string.match(line, "bot") then
  cecho("&lt;white&gt;\nWhile the Spell Bot is enabled you will automatically cast spells on people who say 'all',\n &lt;red&gt;NOT FINISHED!\n")
elseif string.match(line, "attack") then
  cecho("&lt;white&gt;\nAuto Attacking will use the Secondary Attack that you set with &lt;LightSkyBlue&gt;sa *&lt;white&gt; to attack your target every 2 seconds.\n")
elseif string.match(line, "mana") then
  cecho("&lt;white&gt;\nMana Reporting will give you an intermittent time notification so you can easily see when your mana is full.")
  cecho("\n&lt;gold&gt;special thanks to Aesatchien&lt;white&gt; for this script, I cant really find a use for it personally but left it just in case.")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^\? ?(.*)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Equipment</name>
					<script>send("garb")     </script>
					<command></command>
					<packageName></packageName>
					<regex>^eq$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Combat</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Kill</name>
					<script>enemy = matches[2]
if enemy == nil or matches[2] == "" then
  cecho("\n&lt;white&gt;Please set a target with &lt;DeepSkyBlue&gt;target *&lt;white&gt;!\n")
else
  if class == "Vampire" then
    if bp &gt; (bp / 2) then
      if not is_fighting then
        send("c "..debuff.." " ..enemy)
      else
         send("c "..attack.." "..enemy)
      end
    else
      send("feed" .. enemy)
    end
  else
    if attack == nil then
      send("kill "..enemy)
    else
      send(attack.." "..enemy)
    end
  end
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^k (.*)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Attack</name>
					<script>if queue == nil then queue = 0 end
queue = queue + 1
attacking()
</script>
					<command></command>
					<packageName></packageName>
					<regex>^a$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Buffs</name>
					<script>line = matches[1]
if roomname == "A Forested Path" then
  send("say all")
else
  if class == "Mage" then
    if string.match(line, "all") then
      cecho("&lt;red&gt;A&lt;green&gt;&lt;yellow&gt;l&lt;orange&gt;&lt;cyan&gt;l&lt;VioletRed&gt;&lt;lavender&gt; &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
      sendAll("c vali", "c shield", "c antimagic", "c 'ethereal web'", "c dragonskin", "c adroit", "c sapi", "c rapture", "c brawn", "c acumen", "c adamant", "c infra", "c float", "c mystic", "c scry", "c float", "c fly", false)
    elseif string.match(line, "^buff$") or string.match(line, "^buffs$") then --basic buffs
      cecho("&lt;red&gt;C&lt;green&gt;a&lt;yellow&gt;s&lt;orange&gt;t&lt;cyan&gt;i&lt;VioletRed&gt;n&lt;lavender&gt;g &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
      sendAll("c infra", "c float", "c mystic", "c scry", "c float", "c fly", false)
    elseif string.match(line, "lvl") then
      cecho("&lt;red&gt;L&lt;green&gt;e&lt;yellow&gt;v&lt;orange&gt;e&lt;magenta&gt;l&lt;cyan&gt;i&lt;VioletRed&gt;n&lt;lavender&gt;g &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
      sendAll("c adroit", "c sapi", "c rapture", "c brawn", "c acumen", "c adamant", false)
    elseif string.match(line, "battle") then
      cecho("&lt;red&gt;B&lt;green&gt;a&lt;yellow&gt;t&lt;orange&gt;t&lt;magenta&gt;l&lt;cyan&gt;&lt;VioletRed&gt;e&lt;lavender&gt; &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
      sendAll("c vali", "c shield", "c antimagic", "c 'ethereal web'", "c dragonskin", false)
    elseif string.match(line, "buff (.*)") then
      cecho("&lt;red&gt;G&lt;green&gt;i&lt;yellow&gt;v&lt;orange&gt;i&lt;cyan&gt;n&lt;VioletRed&gt;g&lt;lavender&gt; &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
      sendAll("c scry " .. matches[2], "c float " .. matches[2], "c slink " .. matches[2], "c saga " .. matches[2], "c elven " .. matches[2], "c trollish " .. matches[2], "c vali " .. matches[2], "c shield " .. matches[2], "c ogre " .. matches[2], "c infra " .. matches[2], "c fly " .. matches[2], "c 'dragon wit' " .. matches[2], false)
    end
    
  elseif class == "Vampire" then
    cecho("&lt;red&gt;C&lt;green&gt;a&lt;yellow&gt;s&lt;orange&gt;t&lt;cyan&gt;i&lt;VioletRed&gt;n&lt;lavender&gt;g &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
    sendAll("c float", false)
    
  elseif class == "Cleric" then
    cecho("&lt;red&gt;C&lt;green&gt;a&lt;yellow&gt;s&lt;orange&gt;t&lt;cyan&gt;i&lt;VioletRed&gt;n&lt;lavender&gt;g &lt;orange_red&gt;B&lt;gold&gt;u&lt;ansiGreen&gt;f&lt;MediumPurple&gt;f&lt;magenta&gt;s&lt;white&gt;!\n")
    sendAll("c infra", "c float", "c mystic", "c scry", "c armor", "c bless", "c 'detect hidden'", "c 'detect invis'", "c float", "c fly", "c 'minor invocation'", "c protect", "c sanc", false)
  end
  
end

</script>
					<command></command>
					<packageName></packageName>
					<regex>^buff\s?(.*)?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Items</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Identify</name>
					<script>if class == "Thief" or class == "Vampire" or class == "Warrior" then
  sendAll("get tab " .. container, "rec tab " .. matches[2], false)
elseif class == "Mage" then
  send("c ident "..matches[2], false)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^id (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Recall</name>
					<script>if class == "Thief" or "Vampire" or "Warrior" then
  sendAll("get rec " ..container, "rec rec", false)
elseif class == "Mage" then
  send("c word", false)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^rec$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>restock supplies</name>
					<script>if container == "none" then
  cecho("&lt;white&gt;please set your container!\n")
else
  sendAll("buy 10 "..matches[2], "empty bag "..container, "drop bag", false)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^restock (.*)$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>generic_mapper</name>
			<packageName>generic_mapper</packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Map Script</name>
				<packageName></packageName>
				<script>-- Jor'Mox's Generic Map Script
-- 11/07/2018
local version = "2.0.16"

    -- look into options for non-standard door usage for speedwalk
    -- come up with aliases to set translations and custom exits, add appropriate help info

mudlet = mudlet or {}
mudlet.mapper_script = true
map = map or {}

map.help = {[[
    &lt;cyan&gt;Generic Map Script&lt;reset&gt;

    This script allows for semi-automatic mapping using the included triggers.
    While different games can have dramatically different ways of displaying
    information, some effort has been put into giving the script a wide range of
    potential patterns to look for, so that it can work with minimal effort in
    many cases. The script locates the room name by searching up from the
    detected exits line until a prompt is found or it runs out of text to
    search, clearing saved text each time a prompt is detected or a movement
    command is sent, with the room name being set to the last line of text
    found. An accurate prompt pattern is necessary for this to work well, and
    sometimes other text can end up being shown between the prompt and the room
    name, or on the same line as the room name, which can be handled by
    providing appropriate patterns telling the script to ignore that text. Below
    is an overview of the included commands and important events that this
    script uses to work. Additional information on each command or event is
    available in individual help files.

    &lt;cyan&gt;Fundamental Commands:&lt;reset&gt;
        These are commands used to get the mapper functional on a basic level

        &lt;link: show&gt;map show&lt;/link&gt; - Displays or hides a map window
        &lt;link: quick start&gt;map basics&lt;/link&gt; - Shows a quick-start guide with some basic information to
            help get the script working
        &lt;link: 1&gt;map help &lt;optional command name&gt;&lt;/link&gt; - Shows either this help file or the
            help file for the command given
        &lt;link: find prompt&gt;find prompt&lt;/link&gt; - Instructs the script to look for a prompt that matches
            a known pattern
        &lt;link: prompt&gt;map prompt&lt;/link&gt; - Provides a specific pattern to the script that matches
            your prompt, uses Lua string-library patterns
        &lt;link: ignore&gt;map ignore&lt;/link&gt; - Provides a specific pattern for the script to ignore,
            uses Lua string-library patterns
        &lt;link: debug&gt;map debug&lt;/link&gt; - Toggles on debug mode, in which extra messages are shown
            with the intent of assisting in troubleshooting getting the
            script setup
        &lt;link: me&gt;map me&lt;/link&gt; - Locates the user on the map, if possible
        &lt;link: path&gt;map path &lt;room name&gt; &lt;; optional area name&gt;&lt;/link&gt; - Finds a walking path to
            the named room, in the named area if specified
        &lt;link: character&gt;map character &lt;name&gt;&lt;/link&gt; - Sets a given name as the current character for
            the purposes of the script, used for different prompt patterns
            and recall locations
        &lt;link: recall&gt;map recall&lt;/link&gt; - Sets the current room as the recall location of the
            current character
        &lt;link: config&gt;map config &lt;configuration&gt; &lt;optional value&gt;&lt;/link&gt; - Sets or toggles the
            given configuration either turning it on or off, if no value is
            given, or sets it to the given value
        &lt;link: window&gt;map window &lt;configuration&gt; &lt;value&gt;&lt;/link&gt; - Sets the given configuration for
            the map window to the given value
        &lt;link: translate&gt;map translate &lt;english direction&gt; &lt;translated long direction&gt;&lt;/link&gt;
            &lt;link: translate&gt;&lt;translated short direction&gt;&lt;/link&gt; - Sets the provided translations for
            the given english direction word.

    &lt;cyan&gt;Mapping Commands:&lt;reset&gt;
        These are commands used in the process of actually creating a map

        &lt;link: start mapping&gt;start mapping &lt;optional area name&gt;&lt;/link&gt; - Starts adding content to the
            map, using either the area of the room the user is currently in,
            or the area name provided
        &lt;link: stop mapping&gt;stop mapping&lt;/link&gt; - Stops adding content to the map
        &lt;link: set area&gt;set area &lt;area name&gt;&lt;/link&gt; - Moves the current room to the named area
        &lt;link: mode&gt;map mode &lt;simple, normal, or complex&gt;&lt;/link&gt; - Sets the mapping mode
        &lt;link: add door&gt;add door &lt;direction&gt; &lt;optional door status&gt; &lt;optional one way&gt;&lt;/link&gt; -
            Creates a door in the given direction, with the given status
            (default closed), in both directions, unless a one-direction door
            is specified
        &lt;link: add portal&gt;add portal &lt;entry command&gt;&lt;/link&gt; - Creates a portal in the current room,
            using the given command for entry
        &lt;link: shift&gt;shift &lt;direction&gt;&lt;/link&gt; - Moves the current room on the map in the given
            direction
        &lt;link: merge rooms&gt;merge rooms&lt;/link&gt; - Combines overlapping rooms that have the same name into
            a single room
        &lt;link: clear moves&gt;clear moves&lt;/link&gt; - Clears the list of movement commands maintained by the
            script
        &lt;link: set exit&gt;set exit &lt;direction&gt; &lt;roomID&gt;&lt;/link&gt; - Creates a one-way exit in the given
            direction to the room with the specified roomID, can also be used
            with portals
        &lt;link: areas&gt;map areas&lt;/link&gt; - Shows a list of all area, with links to show a list of
            rooms in the area
        &lt;link: rooms&gt;map rooms &lt;area name&gt;&lt;/link&gt; - Shows a list of rooms in the named area

    &lt;cyan&gt;Sharing and Backup Commands:&lt;reset&gt;

        &lt;link: save&gt;map save&lt;/link&gt; - Creates a backup of the map
        &lt;link: load&gt;map load &lt;remote address&gt;&lt;/link&gt; - Loads a map backup, or a map file from a
            remote address
        &lt;link: export&gt;map export &lt;area name&gt;&lt;/link&gt; - Creates a file from the named area that can
            be shared
        &lt;link: import&gt;map import &lt;area name&gt;&lt;/link&gt; - Loads an area from a file

    &lt;cyan&gt;Mapping Events:&lt;reset&gt;
        These events are used by triggers to direct the script's behavior

        &lt;link: onNewRoom&gt;onNewRoom&lt;/link&gt; - Signals that a room has been detected, optional exits
            argument
        &lt;link: onMoveFail&gt;onMoveFail&lt;/link&gt; - Signals that an attempted move failed
        &lt;link: onForcedMove&gt;onForcedMove&lt;/link&gt; - Signals that the character moved without a command
            being entered, required direction argument
        &lt;link: onRandomMove&gt;onRandomMove&lt;/link&gt; - Signals that the character moved in an unknown
            direction without a command being entered
        &lt;link: onVisionFail&gt;onVisionFail&lt;/link&gt; - Signals that the character moved but some or all of
            the room information was not able to be gathered

    &lt;cyan&gt;Key Variables:&lt;reset&gt;
        These variables are used by the script to keep track of important
            information

        &lt;yellow&gt;map.prompt.room&lt;reset&gt; - Can be set to specify the room name
        &lt;yellow&gt;map.prompt.exits&lt;reset&gt; - Can be set to specify the room exits
        &lt;yellow&gt;map.character&lt;reset&gt; - Contains the current character name
        &lt;yellow&gt;map.save.recall&lt;reset&gt; - Contains a table of recall roomIDs for all
            characters
        &lt;yellow&gt;map.save.prompt_pattern&lt;reset&gt; - Contains a table of prompt patterns for all
            characters
        &lt;yellow&gt;map.save.ignore_patterns&lt;reset&gt; - Contains a table of patterns of text the
            script ignores
        &lt;yellow&gt;map.configs&lt;reset&gt; - Contains a number of different options that can be set
            to modify script behavior
        &lt;yellow&gt;map.currentRoom&lt;reset&gt; - Contains the roomID of the room your character is
            in, according to the script
        &lt;yellow&gt;map.currentName&lt;reset&gt; - Contains the name of the room your character is in,
            according to the script
        &lt;yellow&gt;map.currentExits&lt;reset&gt; - Contains a table of the exits of the room your
            character is in, according to the script
        &lt;yellow&gt;map.currentArea&lt;reset&gt; - Contains the areaID of the area your character is
            in, according to the script
]]}
map.help.save = [[
    &lt;cyan&gt;Map Save&lt;reset&gt;
        syntax: &lt;yellow&gt;map save&lt;reset&gt;

        This command creates a copy of the current map and stores it in the
        profile folder as map.dat. This can be useful for creating a backup
        before adding new content, in case of problems, and as a way to share an
        entire map at once.
]]
map.help.load = [[
    &lt;cyan&gt;Map Load&lt;reset&gt;
        syntax: &lt;yellow&gt;map load &lt;optional download address&gt;&lt;reset&gt;

        This command replaces the current map with the map stored as map.dat in
        the profile folder. Alternatively, if a download address is provided, a
        map is downloaded from that location and loaded to replace the current
        map. If no filename is given with the download address, the script tries
        to download map.dat. If a filename is given it MUST end with .dat.
]]
map.help.show = [[
    &lt;cyan&gt;Map Show&lt;reset&gt;
        syntax: &lt;yellow&gt;map show&lt;reset&gt;

        This command shows a map window, as specified by the window configs set
        via the &lt;link: window&gt;map window command&lt;/link&gt;. It isn't necessary to use this method to
        show a map window to use this script, any map window will work.
]]
map.help.export = [[
    &lt;cyan&gt;Map Export&lt;reset&gt;
        syntax: &lt;yellow&gt;map export &lt;area name&gt;&lt;reset&gt;

        This command creates a file containing all the informatino about the
        named area and stores it in the profile folder, with a file name based
        on the area name. This file can then be imported, allowing for easy
        sharing of single map areas. The file name will be the name of the area
        in all lower case, with spaces replaced with underscores, and a .dat
        file extension.
]]
map.help.import = [[
    &lt;cyan&gt;Map Import&lt;reset&gt;
        syntax: &lt;yellow&gt;map import &lt;area name&gt;&lt;reset&gt;

        This command imports a file from the profile folder with a name matching
        the name of the file, and uses it to create an area on the map. The area
        name used can be capitalized or not, and may have either spaces or
        underscores between words. The actual area name is stored within the
        file, and is not set by the area name used in this command.
]]
map.help.start_mapping = [[
    &lt;cyan&gt;Start Mapping&lt;reset&gt;
        syntax: &lt;yellow&gt;start mapping &lt;optional area name&gt;&lt;reset&gt;

        This command instructs the script to add new content to the map when it
        is seen. When first used, an area name is mandatory, so that an area is
        created for new rooms to be placed in. If used with an area name while
        the map shows the character within a room on the map, that room will be
        moved to be in the named area, if it is not already in it. If used
        without an area name, the room is not moved, and mapping begins in the
        area the character is currently located in.
]]
map.help.stop_mapping = [[
    &lt;cyan&gt;Stop Mapping&lt;reset&gt;
        syntax: &lt;yellow&gt;stop mapping&lt;reset&gt;

        This command instructs the script to stop adding new content until
        mapping is resumed at a later time. The map will continue to perform
        other functions.
]]
map.help.find_prompt = [[
    &lt;cyan&gt;Find Prompt&lt;reset&gt;
        syntax: &lt;yellow&gt;find prompt&lt;reset&gt;

        This command instructs the script to begin searching newly arriving text
        for something that matches one of its known prompt patterns. If one is
        found, that pattern will be set as the current prompt pattern. This
        should typically be the first command used to set up this script with a
        new profile. If your prompt appears after using this command, but there
        is no message saying that the prompt has been found, it will be
        necessary to use the map prompt command to manually set a pattern.
]]
map.help.prompt = [[
    &lt;cyan&gt;Map Prompt&lt;reset&gt;
        syntax: &lt;yellow&gt;map prompt &lt;prompt pattern&gt;&lt;reset&gt;

        This command manually sets a prompt pattern for the script to use.
        Because of the way this script works, the prompt pattern should match
        the entire prompt, so that if the text matching the pattern were
        removed, the line with the prompt would be blank. The patterns must be
        of the type used by the Lua string library. If you are unsure about what
        pattern to use, seek assistance on the Mudlet Forums or the Mudlet
        Discord channel.
]]
map.help.debug = [[
    &lt;cyan&gt;Map Debug&lt;reset&gt;
        syntax: &lt;yellow&gt;map debug&lt;reset&gt;

        This command toggles the map script's debug mode on or off when it is
        used. Debug mode provides some extra messages to help with setting up
        the script and identifying problems to help with troubleshooting. If you
        are getting assistance with setting up this script, using debug mode may
        make the process faster and easier.
]]
map.help.ignore = [[
    &lt;cyan&gt;Map Ignore&lt;reset&gt;
        syntax: &lt;yellow&gt;map ignore &lt;ignore pattern&gt;&lt;reset&gt;

        This command adds the given pattern to a list the script maintains to
        help it locate the room name. Any text that might appear after a command
        is sent to move and before the room name appears, or after the prompt
        and before the room name if several movement commands are sent at once,
        should have an ignore pattern added for it.

        If the given pattern is already in the list of ignore patterns, that
        pattern will be removed from the list.
]]
map.help.areas = [[
    &lt;cyan&gt;Map Areas&lt;reset&gt;
        syntax: &lt;yellow&gt;map areas&lt;reset&gt;

        This command displays a linked list of all areas in the map. When
        clicked, the rooms in the selected area will be displayed, as if the
        'map rooms' command had been used with that area as an argument.
]]
map.help.rooms = [[
    &lt;cyan&gt;Map Rooms&lt;reset&gt;
        syntax: &lt;yellow&gt;map rooms &lt;area name&gt;&lt;reset&gt;

        This command shows a list of all rooms in the area, with the roomID and
        the room name, as well as a count of how many rooms are in the area
        total. Note that the area name argument is not case sensitive.
]]
map.help.set_area = [[
    &lt;cyan&gt;Set Area&lt;reset&gt;
        syntax: &lt;yellow&gt;set area &lt;area name&gt;&lt;reset&gt;

        This command move the current room into the named area, creating the
        area if needed.
]]
map.help.mode = [[
    &lt;cyan&gt;Map Mode&lt;reset&gt;
        syntax: &lt;yellow&gt;map mode &lt;simple, normal, or complex&gt;&lt;reset&gt;

        This command changes the current mapping mode, which determines what
        happens when new rooms are added to the map.

        In simple mode, if an adjacent room has an exit stub pointing toward the
        newly created room, and the new room has an exit in that direction,
        those stubs are connected in both directions.

        In normal mode, the newly created room is connected to the room you left
        from, so long as it has an exit leading in that direction.

        In complex mode, none of the exits of the newly connected room are
        connected automatically when it is created.
]]
map.help.add_door = [[
    &lt;cyan&gt;Add Door&lt;reset&gt;
        syntax: &lt;yellow&gt;add door &lt;direction&gt; &lt;optional none, open, closed, or locked&gt;
        &lt;optional yes or no&gt;&lt;reset&gt;

        This command places a door on the exit in the given direction, or
        removes it if "none" is given as the second argument. The door status is
        set as given by the second argument, default "closed". The third
        argument determines if the door is a one-way door, default "no".
]]
map.help.add_portal = [[
    &lt;cyan&gt;Add Portal&lt;reset&gt;
        syntax: &lt;yellow&gt;add portal &lt;optional -f&gt; &lt;entry command&gt;&lt;reset&gt;

        This command creates a special exit in the current room that is entered
        by using the given entry command. The given entry command is then sent,
        moving to the destination room. If the destination room matches an
        existing room, the special exit will link to that room, and if not a new
        room will be created. If the optional "-f" argument is given, a new room
        will be created for the destination regardless of if an existing room
        matches the room seen when arriving at the destination.
]]
map.help.shift = [[
    &lt;cyan&gt;Shift&lt;reset&gt;
        syntax: &lt;yellow&gt;shift &lt;direction&gt;&lt;reset&gt;

        This command moves the current room one step in the direction given, on
        the map.
]]
map.help.merge_rooms = [[
    &lt;cyan&gt;Merge Rooms&lt;reset&gt;
        syntax: &lt;yellow&gt;merge rooms&lt;reset&gt;

        This command combines all rooms that share the same coordinates and the
        same room name into a single room, with all of the exits preserved and
        combined.
]]
map.help.clear_moves = [[
    &lt;cyan&gt;Clear Moves&lt;reset&gt;
        syntax: &lt;yellow&gt;clear moves&lt;reset&gt;

        This command clears the script's queue of movement commands, and is
        intended to be used after you attempt to move while mapping but the
        movement is prevented in some way that is not caught and handled by a
        trigger that raises the onMoveFail event.
]]
map.help.set_exit = [[
    &lt;cyan&gt;Set Exit&lt;reset&gt;
        syntax: &lt;yellow&gt;set exit &lt;direction&gt; &lt;destination roomID&gt;&lt;reset&gt;

        This command sets the exit in the current room in the given direction to
        connect to the target room, as specified by the roomID. This is a
        one-way connection.
]]
map.help.onnewroom = [[
    &lt;cyan&gt;onNewRoom Event&lt;reset&gt;

        This event is raised to inform the script that a room has been detected.
        When raised, a string containing the exits from the detected room should
        be passed as a second argument to the raiseEvent function, unless those
        exits have previously been stored in map.prompt.exits.
]]
map.help.onmovefail = [[
    &lt;cyan&gt;onMoveFail Event&lt;reset&gt;

        This event is raised to inform the script that a move was attempted but
        the character was unable to move in the given direction, causing that
        movement command to be removed from the script's movement queue.
]]
map.help.onforcedmove = [[
    &lt;cyan&gt;onForcedMove Event&lt;reset&gt;

        This event is raised to inform the script that the character moved in a
        specified direction without a command being entered. When raised, a
        string containing the movement direction must be passed as a second
        argument to the raiseEvent function.

        The most common reason for this event to be raised is when a character
        is following someone else.
]]
map.help.onrandommove = [[
    &lt;cyan&gt;onRandomMove Event&lt;reset&gt;

        This event is raised to inform the script that the character has moved
        in an unknown direction. The script will compare the next room seen with
        rooms that are adjacent to the current room to try to determine the best
        match for where the character has gone.

        In some situations, multiple options are equally viable, so mistakes may
        result. The script will automatically keep verifying positioning with
        each step, and automatically correct the shown location on the map when
        possible.
]]
map.help.onvisionfail = [[
    &lt;cyan&gt;onVisionFail Event&lt;reset&gt;

        This event is raised to inform the script that some or all of the room
        information was not able to be gathered, but the character still
        successfully moved between rooms in the intended direction.
]]
map.help.onprompt = [[
    &lt;cyan&gt;onPrompt Event&lt;reset&gt;

        This event can be raised when using a non-conventional setup to trigger
        waiting messages from the script to be displayed. Additionally, if
        map.prompt.exits exists and isn't simply an empty string, raising this
        event will cause the onNewRoom event to be raised as well. This
        functionality is intended to allow people who have used the older
        version of this script to use this script instead, without having to
        modify the triggers they created for it.
]]
map.help.me = [[
    &lt;cyan&gt;Map Me&lt;reset&gt;
        syntax: &lt;yellow&gt;map me&lt;reset&gt;

        This command forces the script to look at the currently captured room
        name and exits, and search for a potentially matching room, moving the
        map if applicable. Note that this command is generally never needed, as
        the script performs a similar search any time the room name and exits
        don't match expectations.
]]
map.help.path = [[
    &lt;cyan&gt;Map Path&lt;reset&gt;
        syntax: &lt;yellow&gt;map path &lt;room name&gt; &lt;; optional area name&gt;&lt;reset&gt;

        This command tries to find a walking path from the current room to the
        named room. If an area name is given, only rooms within that area that
        is given are checked. Neither the room name nore the area name are case
        sensitive, but otherwise an exact match is required. Note that a
        semicolon is required between the room name and area name, if an area
        name is given, but spaces before or after the semicolon are optional.

        Example: &lt;yellow&gt;map path main street ; newbie town&lt;reset&gt;
]]
map.help.character = [[
    &lt;cyan&gt;Map Character&lt;reset&gt;
        syntax: &lt;yellow&gt;map character &lt;name&gt;&lt;reset&gt;

        This command tells the script what character is currently being used.
        Setting a character is optional, but recall locations and prompt
        patterns are stored by character name, so using this command allows for
        easy switching between different setups. The name given is stored in
        map.character. The name is a case sensitive exact match. The value of
        map.character is not saved between sessions, so this must be set again
        if needed each time the profile is opened.
]]
map.help.recall = [[
    &lt;cyan&gt;Map Recall&lt;reset&gt;
        syntax: &lt;yellow&gt;map recall&lt;reset&gt;

        This command tells the script that the current room is the recall point
        for the current character, as stored in map.character. This information
        is stored in map.save.recall[map.character], and is remembered between
        sessions.
]]
map.help.config = [[
    &lt;cyan&gt;Map Config&lt;reset&gt;
        syntax: &lt;yellow&gt;map config &lt;setting&gt; &lt;optional value&gt;&lt;reset&gt;

        This command changes any of the available configurations listed below.
        If no value is given, and the setting is either 'on' or 'off', then the
        value is switched. When naming a setting, spaces can be used in place of
        underscores. Details of what options are available and what each one
        does are provided.

        &lt;yellow&gt;speedwalk_delay&lt;reset&gt; - When using the speedwalk function of the script,
            this is the amount of time the script waits after either sending
            a command or, if speedwalk_wait is set, after arriving in a new
            room, before the next command is sent. This may be any number 0
            or higher.

        &lt;yellow&gt;speedwalk_wait&lt;reset&gt; - When using the speedwalk function of the script,
            this indicates if the script waits for your character to move
            into a new room before sending the next command. This may be true
            or false.

        &lt;yellow&gt;speedwalk_random&lt;reset&gt; - When using the speedwalk function of the script
            with a speedwalk_delay value, introduces a randomness to the wait
            time by adding some amount up to the speedwalk_delay value. This
            may be true or false.

        &lt;yellow&gt;stretch_map&lt;reset&gt; - When adding a new room that would overlap an existing
            room, if this is set the map will stretch out to prevent the
            overlap, with all rooms further in the direction moved getting
            pushed one further in that direction. This may be true or false.

        &lt;yellow&gt;max_search_distance&lt;reset&gt; - When mapping, this is the maximum number of
            rooms that the script will search in the movement direction for a
            matching room before deciding to create a new room. This may be
            false, or any positive whole number. This can also be set to 0,
            which is the same as setting it to false.

        &lt;yellow&gt;search_on_look&lt;reset&gt; - When this is set, using the "look" command causes
            the map to verify your position using the room name and exits
            seen following using the command. This may be true or false.

        &lt;yellow&gt;clear_lines_on_send&lt;reset&gt; - When this is set, any time a command is sent,
            any lines stored from the game used to search for the room name
            are cleared. This may be true or false.

        &lt;yellow&gt;mode&lt;reset&gt; - This is the default mapping mode on startup, and may be
            "simple", "normal", or "complex".

        &lt;yellow&gt;download_path&lt;reset&gt; - This is the path that updates are downloaded from.
            This may be any web address where the versions.lua and
            generic_mapper.xml files can be downloaded from.

        &lt;yellow&gt;prompt_test_patterns&lt;reset&gt; - This is a table of default patterns checked
            when using the "find prompt" command. The patterns in this table
            should start with a '^', and be written to be used with the Lua
            string library. Most importantly, '%' is used as the escape
            character instead of '\' as in trigger regex patterns.

        &lt;yellow&gt;custom_exits&lt;reset&gt; - This is a table of custom exit directions and their
            relevant extra pieces of info. Each entry should have the short
            direction as the keyword for a table containing first the long
            direction, then the long direction of the reverse of this
            direction, and then the x, y, and z change in map position
            corresponding to the movement. As an example: us = {'upsouth',
            'downnorth', 0, -1, 1}

        &lt;yellow&gt;use_translation&lt;reset&gt; - When this is set, the lang_dirs table is used to
            translate movement commands in some other language into the
            English used by the script. This may be true or false.

        &lt;yellow&gt;debug&lt;reset&gt; - When this is set, the script will start in debug mode. This
            may be true or false.
]]
map.help.window = [[
    &lt;yellow&gt;Map Window&lt;reset&gt;
        syntax: &lt;yellow&gt;map window &lt;setting&gt; &lt;value&gt;&lt;reset&gt;

        This command changes any of the available configurations listed below,
        which determine the appearance and positioning of the map window when
        the 'map show' command is used. Details of what options are available
        and what each one does are provided.

        &lt;yellow&gt;x&lt;reset&gt; - This is the x position of the map window, and should be a
            positive number of pixels or a percentage of the screen width.

        &lt;yellow&gt;y&lt;reset&gt; - This is the y position of the map window, and should be a
            positive number of pixels or a percentage of the screen height.

        &lt;yellow&gt;w&lt;reset&gt; - This is the width of the map window, and should be a positive
            number of pixels or a percentage of the screen width.

        &lt;yellow&gt;h&lt;reset&gt; - This is the height of the map window, and should be a positive
            number of pixels or a percentage of the screen height.

        &lt;yellow&gt;origin&lt;reset&gt; - This is the corner from which the window position is
            measured, and may be 'topright', 'topleft', 'bottomright', or
            'bottomleft'.

        &lt;yellow&gt;shown&lt;reset&gt; - This determines if the map window is shown immediately upon
            connecting to the game. This may be true or false. If you intend
            to have some other script control the map window, this should be
            set to false.
]]
map.help.translate = [[
    &lt;yellow&gt;Map Translate&lt;reset&gt;
        syntax: &lt;yellow&gt;map translate &lt;english direction&gt; &lt;translated long direction&gt;
            &lt;translated short direction&gt;&lt;reset&gt;

        This command sets direction translations for the script to use, either
        for commands entered to move around, or listed exits the game shows when
        you enter a room. Available directions: north, south, east, west,
        northwest, northeast, southwest, southeast, up, down, in, and out.
]]
map.help.quick_start = [[
    &lt;link: quick_start&gt;map basics&lt;/link&gt; (quick start guide)
    ----------------------------------------

    Mudlet Mapper works in tandem with a script, and this generic mapper script needs
    to know 2 things to work:
      - &lt;dim_grey&gt;room name&lt;reset&gt; $ROOM_NAME_STATUS ($ROOM_NAME)
      - &lt;dim_grey&gt;exits&lt;reset&gt;     $ROOM_EXITS_STATUS ($ROOM_EXITS)

    1. &lt;link: start mapping&gt;start mapping &lt;optional area name&gt;&lt;/link&gt;
       If both room name and exits are good, you can start mapping! Give it the
       area name you're currently in, usually optional but required for the first one.
    2. &lt;link: find prompt&gt;find prompt&lt;/link&gt;
       Room name or exits aren't recognised? Try this command then. It will make
       the script start looking for a prompt using several standard prompt
       patterns. If a prompt is found, you will be notified, if not, you will
       need to set a prompt pattern yourself using &lt;link: prompt&gt;map prompt&lt;/link&gt;.
       Reach out to the &lt;urllink: https://discord.gg/kuYvMQ9&gt;Mudlet community&lt;/urllink&gt; for help, we'd be happy to help
       you figure it out!
    3. &lt;link: debug&gt;map debug&lt;/link&gt;
       This toggles debug mode. When on, messages will be displayed showing what
       information is captured and a few additional error messages that can help
       with getting the script fully compatible with your game.
    4. &lt;link: 1&gt;map help&lt;/link&gt;
       This will bring up a more detailed help file, starting with the available
       help topics.
]]

map.character = map.character or ""
map.prompt = map.prompt or {}
map.save = map.save or {}
map.save.recall = map.save.recall or {}
map.save.prompt_pattern = map.save.prompt_pattern or {}
map.save.ignore_patterns = map.save.ignore_patterns or {}

local oldstring = string
local string = utf8
string.format = oldstring.format
string.trim = oldstring.trim
string.starts = oldstring.starts
string.split = oldstring.split
string.ends = oldstring.ends


local profilePath = getMudletHomeDir()
profilePath = profilePath:gsub("\\","/")

map.defaults = {
    mode = "normal", -- can be simple, normal, or complex
    stretch_map = true,
    search_on_look = true,
    speedwalk_delay = 1,
    speedwalk_wait = true,
    speedwalk_random = true,
    max_search_distance = 1,
    clear_lines_on_send = true,
    map_window = {x = 0,
        y = 0,
        w = "30%",
        h = "40%",
        origin = "topright",
        shown = false,
    },
    prompt_test_patterns = {"^%[?%a*%]?&lt;.*&gt;", "^%[.*%]%s*&gt;", "^%w*[%.?!:]*&gt;", "^%[.*%]", "^[Hh][Pp]:.*&gt;"},
    custom_exits = {},  -- format: short_exit = {long_exit, reverse_exit, x_dif, y_dif, z_dif}
                        -- ex: { us = {"upsouth", "downnorth", 0, -1, 1}, dn = {"downnorth", "upsouth", 0, 1, -1} }
    use_translation = true,
    lang_dirs = {n = 'n', ne = 'ne', nw = 'nw', e = 'e', w = 'w', s = 's', se = 'se', sw = 'sw',
        u = 'u', d = 'd', ["in"] = 'in', out = 'out', north = 'north', northeast = 'northeast',
        east = 'east', west = 'west', south = 'south', southeast = 'southeast', southwest = 'southwest',
        northwest = 'northwest', up = 'up', down = 'down',
    },
    debug = false,
    download_path = "https://raw.githubusercontent.com/Mudlet/Mudlet/development/src/mudlet-lua/lua/generic-mapper",
}

local move_queue, lines = {}, {}
local find_portal, vision_fail, room_detected, random_move, force_portal, find_prompt, downloading, walking, help_shown
local mt = getmetatable(map) or {}

local function config()
    local defaults = map.defaults
    local configs = map.configs or {}
    local path = profilePath.."/map downloads"
    if not io.exists(path) then lfs.mkdir(path) end
    -- load stored configs from file if it exists
    if io.exists(path.."/configs.lua") then
        table.load(path.."/configs.lua",configs)
    end
    -- overwrite default values with stored config values
    configs = table.update(defaults, configs)
    map.configs = configs
    map.configs.translate = {}
    for k, v in pairs(map.configs.lang_dirs) do
        map.configs.translate[v] = k
    end
    -- incorporate custom exits
    for k,v in pairs(map.configs.custom_exits) do
        exitmap[k] = v[1]
        reverse_dirs[v[1]] = v[2]
        short[v[1]] = k
        local count = #coordmap
        coordmap[count] = {v[3],v[4],v[5]}
        stubmap[count] = v[1]
        stubmap[v[1]] = count
    end
    -- update to the current download path
    if map.configs.download_path == "https://raw.githubusercontent.com/JorMox/Mudlet/development/src/mudlet-lua/lua/generic-mapper" then
        map.configs.download_path = "https://raw.githubusercontent.com/Mudlet/Mudlet/development/src/mudlet-lua/lua/generic-mapper"
    end

    -- setup metatable to store sensitive values
    local protected = {"mapping", "currentRoom", "currentName", "currentExits", "currentArea",
        "prevRoom", "prevName", "prevExits", "mode", "version"}
    mt = getmetatable(map) or {}
    mt.__index = mt
    mt.__newindex = function(tbl, key, value)
            if not table.contains(protected, key) then
                rawset(tbl, key, value)
            else
                error("Protected Map Table Value")
            end
        end
    mt.set = function(key, value)
            if table.contains(protected, key) then
                mt[key] = value
            end
        end
    setmetatable(map, mt)
    map.set("mode", configs.mode)
    map.set("version", version)

    local saves = {}
    if io.exists(path.."/map_save.dat") then
        table.load(path.."/map_save.dat",saves)
    end
    saves.prompt_pattern = saves.prompt_pattern or {}
    saves.ignore_patterns = saves.ignore_patterns or {}
    saves.recall = saves.recall or {}
    map.save = saves

    if map.configs.map_window.shown then
        map.showMap(true)
    end
end

local exitmap = {
    n = 'north',    ne = 'northeast',   nw = 'northwest',   e = 'east',
    w = 'west',     s = 'south',        se = 'southeast',   sw = 'southwest',
    u = 'up',       d = 'down',         ["in"] = 'in',      out = 'out',
}

local short = {}
for k,v in pairs(exitmap) do
    short[v] = k
end

local stubmap = {
    north = 1,      northeast = 2,      northwest = 3,      east = 4,
    west = 5,       south = 6,          southeast = 7,      southwest = 8,
    up = 9,         down = 10,          ["in"] = 11,        out = 12,
    [1] = "north",  [2] = "northeast",  [3] = "northwest",  [4] = "east",
    [5] = "west",   [6] = "south",      [7] = "southeast",  [8] = "southwest",
    [9] = "up",     [10] = "down",      [11] = "in",        [12] = "out",
}

local coordmap = {
    [1] = {0,1,0},      [2] = {1,1,0},      [3] = {-1,1,0},     [4] = {1,0,0},
    [5] = {-1,0,0},     [6] = {0,-1,0},     [7] = {1,-1,0},     [8] = {-1,-1,0},
    [9] = {0,0,1},      [10] = {0,0,-1},    [11] = {0,0,0},     [12] = {0,0,0},
}

local reverse_dirs = {
    north = "south", south = "north", west = "east", east = "west", up = "down",
    down = "up", northwest = "southeast", northeast = "southwest", southwest = "northeast",
    southeast = "northwest", ["in"] = "out", out = "in",
}

local wait_echo = {}
local mapper_tag = "&lt;112,229,0&gt;(&lt;73,149,0&gt;mapper&lt;112,229,0&gt;): &lt;255,255,255&gt;"
local debug_tag = "&lt;255,165,0&gt;(&lt;200,120,0&gt;debug&lt;255,165,0&gt;): &lt;255,255,255&gt;"
local err_tag = "&lt;255,0,0&gt;(&lt;178,34,34&gt;error&lt;255,0,0&gt;): &lt;255,255,255&gt;"


local function parse_help_text(text)
  text = text:gsub("%$ROOM_NAME_STATUS", (map.currentName and map.currentName ~= "") and '✔️' or '❌')
  text = text:gsub("%$ROOM_NAME", map.currentName or '')

  text = text:gsub("%$ROOM_EXITS_STATUS", (not map.currentExits or table.is_empty(map.currentExits)) and '❌' or '✔️')
  text = text:gsub("%$ROOM_EXITS", map.currentExits and table.concat(map.currentExits, ' ') or '')

  return text
end

function map.show_help(cmd)
    if cmd and cmd ~= "" then
        if cmd:starts("map ") then cmd = cmd:sub(5) end
        cmd = cmd:lower():gsub(" ","_")
        if not map.help[cmd] then
            map.echo("No help file on that command.")
        end
    else
        cmd = 1
    end

    for w in parse_help_text(map.help[cmd]):gmatch("[^\n]*\n") do
        local url, target = rex.match(w, [[&lt;(url)?link: ([^&gt;]+)&gt;]])
        -- lrexlib returns a non-capture as 'false', so determine which variable the capture went into
        if target == nil then target = url end
        if target then
            local before, linktext, _, link, _, after, ok = rex.match(w,
                          [[(.*)&lt;((url)?link): [^&gt;]+&gt;(.*)&lt;\/(url)?link&gt;(.*)]], 0, 'm')
            -- could not get rex.match to capture the newline - fallback to string.match
            local _, _, after = w:match("(.*)&lt;u?r?l?link: [^&gt;]+&gt;(.*)&lt;/u?r?l?link&gt;(.*)")

            cecho(before)
            fg("yellow")
            setUnderline(true)
            if linktext == "urllink" then
                echoLink(link, [[openWebPage("]]..target..[[")]], "Open Mudlet Discord", true)
            elseif target ~= "1" then
                echoLink(link,[[map.show_help("]]..target..[[")]],"View: map help " .. target,true)
            else
                echoLink(link,[[map.show_help()]],"View: map help",true)
            end
            setUnderline(false)
            resetFormat()
            if after then cecho(after) end
        else
            cecho(w)
        end
    end
    echo("\n")
end

local bool_configs = {'stretch_map', 'search_on_look', 'speedwalk_wait', 'speedwalk_random',
    'clear_lines_on_send', 'debug', 'use_translation'}
-- function intended to be used by an alias to change config values and save them to a file for later
function map.setConfigs(key, val, sub_key)
    if val == "off" or val == "false" then
        val = false
    elseif val == "on" or val == "true" then
        val = true
    end
    local toggle = false
    if val == nil or val == "" then toggle = true end
    key = key:gsub(" ","_")
    if tonumber(val) then val = tonumber(val) end
    if not toggle then
        if key == "map_window" then
            if map.configs.map_window[sub_key] then
                map.configs.map_window[sub_key] = val
                map.echo(string.format("Map config %s set to: %s", sub_key, tostring(val)))
            else
                map.echo("Unknown map config.",false, true)
            end
        elseif key =="lang_dirs" then
            sub_key = exitmap[sub_key] or sub_key
            if map.configs.lang_dirs[sub_key] then
                local long_dir, short_dir = val[1],val[2]
                if #long_dir &lt; #short_dir then long_dir, short_dir = short_dir, long_dir end
                map.configs.lang_dirs[sub_key] = long_dir
                map.configs.lang_dirs[short[sub_key]] = short_dir
                map.echo(string.format("Direction %s, abbreviated as %s, now interpreted as %s.", long_dir, short_dir, sub_key))
                map.configs.translate = {}
                for k, v in pairs(map.configs.lang_dirs) do
                    map.configs.translate[v] = k
                end
            else
                map.echo("Invalid direction.", false, true)
            end
        elseif key == "prompt_test_patterns" then
            if not table.contains(map.configs.prompt_test_patterns) then
                table.insert(map.configs.prompt_test_patterns, val)
                map.echo("Prompt pattern added to list: " .. val)
            else
                table.remove(map.configs.prompt_test_patterns, table.index_of(map.configs.prompt_test_patterns, val))
                map.echo("Prompt pattern removed from list: " .. val)
            end
        elseif key == "custom_exits" then
            if type(val) == "table" then
                for k, v in pairs(val) do
                    map.configs.custom_exit[k] = v
                    map.echo(string.format("Custom Exit short direction %s, long direction %s",k,v[1]))
                    map.echo(string.format("    set to: x: %s, y: %s, z: %s, reverse: %s",v[3],v[4],v[5],v[2]))
                end
            else
                map.echo("Custom Exit config must be in the form of a table.", false, true)
            end
        elseif map.configs[key] ~= nil then
            map.configs[key] = val
            map.echo(string.format("Config %s set to: %s", key, tostring(val)))
        else
            map.echo("Unknown configuration.",false,true)
            return
        end
    elseif toggle then
        if (type(map.configs[key]) == "boolean" and table.contains(bool_configs, key)) then
            map.configs[key] = not map.configs[key]
            map.echo(string.format("Config %s set to: %s", key, tostring(map.configs[key])))
        elseif key == "map_window" and sub_key == "shown" then
            map.configs.map_window.shown = not map.configs.map_window.shown
            map.echo(string.format("Map config %s set to: %s", "shown", tostring(map.configs.map_window.shown)))
        else
            map.echo("Unknown configuration.",false,true)
            return
        end
    end
    table.save(profilePath.."/map downloads/configs.lua",map.configs)
    config()
end

local function show_err(msg,debug)
    map.echo(msg,debug,true)
    error(msg,2)
end

local function print_echoes(what, debug, err)
    moveCursorEnd("main")
    local curline = getCurrentLine()
    if curline ~= "" then echo("\n") end
    decho(mapper_tag)
    if debug then decho(debug_tag) end
    if err then decho(err_tag) end
    cecho(what)
    echo("\n")
end

local function print_wait_echoes()
    for k,v in ipairs(wait_echo) do
        print_echoes(v[1],v[2],v[3])
    end
    wait_echo = {}
end

function map.echo(what, debug, err, wait)
    if debug and not map.configs.debug then return end
    what = tostring(what) or ""
    if wait then
        table.insert(wait_echo,{what, debug, err})
        return
    end
    print_wait_echoes()
    print_echoes(what, debug, err)
end

local function set_room(roomID)
    -- moves the map to the new room
    if map.currentRoom ~= roomID then
        map.set("prevRoom", map.currentRoom)
        map.set("currentRoom", roomID)
    end
    if getRoomName(map.currentRoom) ~= map.currentName then
        map.set("prevName", map.currentName)
        map.set("prevExits", map.currentExits)
        map.set("currentName", getRoomName(map.currentRoom))
        map.set("currentExits", getRoomExits(map.currentRoom))
        -- check handling of custom exits here
        for i = 13,#stubmap do
            map.currentExits[stubmap[i]] = tonumber(getRoomUserData(map.currentRoom,"exit " .. stubmap[i]))
        end
    end
    map.set("currentArea", getRoomArea(map.currentRoom))
    centerview(map.currentRoom)
    raiseEvent("onMoveMap", map.currentRoom)
end

local function add_door(roomID, dir, status)
    -- create or remove a door in the designated direction
    -- consider options for adding pickable and passable information
    dir = exitmap[dir] or dir
    if not table.contains(exitmap,dir) then
        error("Add Door: invalid direction.",2)
    end
    if type(status) ~= "number" then
        status = assert(table.index_of({"none","open","closed","locked"},status),
            "Add Door: Invald status, must be none, open, closed, or locked") - 1
    end
    local exits = getRoomExits(roomID)
    -- check handling of custom exits here
    if not exits[dir] then
        setExitStub(roomID,stubmap[dir],true)
    end
    -- check handling of custom exits here
    if not table.contains({'u','d'},short[dir]) then
        setDoor(roomID,short[dir],status)
    else
        setDoor(roomID,dir,status)
    end
end

local function check_doors(roomID,exits)
    -- looks to see if there are doors in designated directions
    -- used for room comparison, can also be used for pathing purposes
    if type(exits) == "string" then exits = {exits} end
    local statuses = {}
    local doors = getDoors(roomID)
    local dir
    for k,v in pairs(exits) do
        dir = short[k] or short[v]
        if table.contains({'u','d'},dir) then
            dir = exitmap[dir]
        end
        if not doors[dir] or doors[dir] == 0 then
            return false
        else
            statuses[dir] = doors[dir]
        end
    end
    return statuses
end

local function find_room(name, area)
    -- looks for rooms with a particular name, and if given, in a specific area
    local rooms = searchRoom(name)
    if type(area) == "string" then
        local areas = getAreaTable() or {}
        for k,v in pairs(areas) do
            if string.lower(k) == string.lower(area) then
                area = v
                break
            end
        end
        area = areas[area] or nil
    end
    for k,v in pairs(rooms) do
        if string.lower(v) ~= string.lower(name) then
            rooms[k] = nil
        elseif area and getRoomArea(k) ~= area then
            rooms[k] = nil
        end
    end
    return rooms
end

local function getRoomStubs(roomID)
    -- turns stub info into table similar to exit table
    local stubs = getExitStubs(roomID)
    if type(stubs) ~= "table" then stubs = {} end
    -- check handling of custom exits here
    local tmp
    for i = 13,#stubmap do
        tmp = tonumber(getRoomUserData(roomID,"stub"..stubmap[i]))
        if tmp then table.insert(stubs,tmp) end
    end

    local exits = {}
    for k,v in pairs(stubs) do
        exits[stubmap[v]] = 0
    end
    return exits
end

local function connect_rooms(ID1, ID2, dir1, dir2, no_check)
    -- makes a connection between rooms
    -- can make backwards connection without a check
    local match = false
    if not ID1 and ID2 and dir1 then
        error("Connect Rooms: Missing Required Arguments.",2)
    end
    dir2 = dir2 or reverse_dirs[dir1]
    -- check handling of custom exits here
    if stubmap[dir1] &lt;= 12 then
        setExit(ID1,ID2,stubmap[dir1])
    else
        setRoomUserData(ID1,"exit " .. dir1,ID2)
    end
    if stubmap[dir1] &gt; 13 then
        -- check handling of custom exits here
        setRoomUserData(ID1,"stub"..dir1,"")
    end
    local doors1, doors2 = getDoors(ID1), getDoors(ID2)
    local dstatus1, dstatus2 = doors1[short[dir1]] or doors1[dir1], doors2[short[dir2]] or doors2[dir2]
    if dstatus1 ~= dstatus2 then
        if not dstatus1 then
            add_door(ID1,dir1,dstatus2)
        elseif not dstatus2 then
            add_door(ID2,dir2,dstatus1)
        end
    end
    if map.mode ~= "complex" then
        local stubs = getRoomStubs(ID2)
        if stubs[dir2] then match = true end
        if (match or no_check) then
            -- check handling of custom exits here
            if stubmap[dir1] &lt;= 12 then
                setExit(ID2,ID1,stubmap[dir2])
            else
                setRoomUserData(ID2,"exit " .. dir2,ID1)
            end
            if stubmap[dir2] &gt; 13 then
                -- check handling of custom exits here
                setRoomUserData(ID2,"stub"..dir2,"")
            end
        end
    end
end

local function check_room(roomID, name, exits)
    -- check to see if room name and exits match expecations
    if not roomID then
        error("Check Room Error: No ID",2)
    end
    if name ~= getRoomName(roomID) then return false end
    local t_exits = table.union(getRoomExits(roomID),getRoomStubs(roomID))
    -- check handling of custom exits here
    for i = 13,#stubmap do
        t_exits[stubmap[i]] = tonumber(getRoomUserData(roomID,"exit " .. stubmap[i]))
    end
    for k,v in ipairs(exits) do
        if short[v] and not table.contains(t_exits,v) then return false end
        t_exits[v] = nil
    end
    return table.is_empty(t_exits) or check_doors(roomID,t_exits)
end

local function stretch_map(dir,x,y,z)
    -- stretches a map to make room for just added room that would overlap with existing room
    local dx,dy,dz
    if not dir then return end
    for k,v in pairs(getAreaRooms(map.currentArea)) do
        if v ~= map.currentRoom then
            dx,dy,dz = getRoomCoordinates(v)
            if dx &gt;= x and string.find(dir,"east") then
                dx = dx + 1
            elseif dx &lt;= x and string.find(dir,"west") then
                dx = dx - 1
            end
            if dy &gt;= y and string.find(dir,"north") then
                dy = dy + 1
            elseif dy &lt;= y and string.find(dir,"south") then
                dy = dy - 1
            end
            if dz &gt;= z and string.find(dir,"up") then
                dz = dz + 1
            elseif dz &lt;= z and string.find(dir,"down") then
                dz = dz - 1
            end
            setRoomCoordinates(v,dx,dy,dz)
        end
    end
end

local function create_room(name, exits, dir, coords)
    -- makes a new room with captured name and exits
    -- links with other rooms as appropriate
    -- links to adjacent rooms in direction of exits if in simple mode
    if map.mapping then
        map.echo("New Room: " .. name,false,false,(dir or find_portal or force_portal) and true or false)
        local newID = createRoomID()
        addRoom(newID)
        setRoomArea(newID, map.currentArea)
        setRoomName(newID, name)
        for k,v in ipairs(exits) do
            if stubmap[v] then
                if stubmap[v] &lt;= 12 then
                    setExitStub(newID, stubmap[v], true)
                else
                    -- check handling of custom exits here
                    setRoomUserData(newID, "stub"..v,stubmap[v])
                end
            end
        end
        if dir then
            connect_rooms(map.currentRoom, newID, dir)
        elseif find_portal or force_portal then
            addSpecialExit(map.currentRoom, newID, (find_portal or force_portal))
            setRoomUserData(newID,"portals",tostring(map.currentRoom)..":"..(find_portal or force_portal))
        end
        setRoomCoordinates(newID,unpack(coords))
        local pos_rooms = getRoomsByPosition(map.currentArea,unpack(coords))
        if not (find_portal or force_portal) and map.configs.stretch_map and table.size(pos_rooms) &gt; 1 then
            set_room(newID)
            stretch_map(dir,unpack(coords))
        end
        if map.mode == "simple" then
            local x,y,z = unpack(coords)
            local dx,dy,dz,rooms
            for k,v in ipairs(exits) do
                if stubmap[v] then
                    dx,dy,dz = unpack(coordmap[stubmap[v]])
                    rooms = getRoomsByPosition(map.currentArea,x+dx,y+dy,z+dz)
                    if table.size(rooms) == 1 then
                        connect_rooms(newID,rooms[0],v)
                    end
                end
            end
        end
        set_room(newID)
    end
end

local function find_area_limits(areaID)
    -- used to find min and max coordinate limits for an area
    if not areaID then
        error("Find Limits: Missing area ID",2)
    end
    local rooms = getAreaRooms(areaID)
    local minx, miny, minz = getRoomCoordinates(rooms[0])
    local maxx, maxy, maxz = minx, miny, minz
    local x,y,z
    for k,v in pairs(rooms) do
        x,y,z = getRoomCoordinates(v)
        minx = math.min(x,minx)
        maxx = math.max(x,maxx)
        miny = math.min(y,miny)
        maxy = math.max(y,maxy)
        minz = math.min(z,minz)
        maxz = math.max(z,maxz)
    end
    return minx, maxx, miny, maxy, minz, maxz
end

local function find_link(name, exits, dir, max_distance)
    -- search for matching room in desired direction
    local x,y,z = getRoomCoordinates(map.currentRoom)
    if map.mapping and x then
        if max_distance &lt; 1 then
            max_distance = nil
        else
            max_distance = max_distance - 1
        end
        if not stubmap[dir] or not coordmap[stubmap[dir]] then return end
        local dx,dy,dz = unpack(coordmap[stubmap[dir]])
        local minx, maxx, miny, maxy, minz, maxz = find_area_limits(map.currentArea)
        local rooms, match, stubs
        if max_distance then
            minx, maxx = x - max_distance, x + max_distance
            miny, maxy = y - max_distance, y + max_distance
            minz, maxz = z - max_distance, z + max_distance
        end
        repeat
            x, y, z = x + dx, y + dy, z + dz
            rooms = getRoomsByPosition(map.currentArea,x,y,z)
        until (x &gt; maxx or x &lt; minx or y &gt; maxy or y &lt; miny or z &gt; maxz or z &lt; minz or not table.is_empty(rooms))
        for k,v in pairs(rooms) do
            if check_room(v,name,exits) then
                match = v
                break
            end
        end
        if match then
            connect_rooms(map.currentRoom, match, dir)
            set_room(match)
        else
            x,y,z = getRoomCoordinates(map.currentRoom)
            create_room(name, exits, dir,{x+dx,y+dy,z+dz})
        end
    end
end

local function move_map()
    -- tries to move the map to the next room
    local move = table.remove(move_queue,1)
    if move or random_move then
        local exits = (map.currentRoom and getRoomExits(map.currentRoom)) or {}
        -- check handling of custom exits here
        if map.currentRoom then
            for i = 13, #stubmap do
                exits[stubmap[i]] = tonumber(getRoomUserData(map.currentRoom,"exit " .. stubmap[i]))
            end
        end
        local special = (map.currentRoom and getSpecialExitsSwap(map.currentRoom)) or {}
        if move and not exits[move] and not special[move] then
            for k,v in pairs(special) do
                if string.starts(k,move) then
                    move = k
                    break
                end
            end
        end
        if find_portal then
            map.find_me(map.currentName,map.currentExits,move)
            find_portal = false
        elseif force_portal then
            find_portal = false
            map.echo("Creating portal destination")
            create_room(map.currentName, map.currentExits, nil, {getRoomCoordinates(map.currentRoom)})
            force_portal = false
        elseif move == "recall" and map.save.recall[map.character] then
            set_room(map.save.recall[map.character])
        elseif move == "look" and map.currentRoom and not check_room(map.currentRoom, map.currentName, map.currentExits) then
            -- this check isn't working as intended, find out why
            map.find_me(map.currentName,map.currentExits)
        else
            if exits[move] and (vision_fail or check_room(exits[move], map.currentName, map.currentExits)) then
                set_room(exits[move])
            elseif special[move] and (vision_fail or check_room(special[move], map.currentName, map.currentExits)) then
                set_room(special[move])
            elseif not vision_fail then
                if map.mapping and move then
                    find_link(map.currentName, map.currentExits, move, map.configs.max_search_distance)
                else
                    map.find_me(map.currentName,map.currentExits, move)
                end
            end
        end
        vision_fail = false
    end
end

local function capture_move_cmd(dir,priority)
    -- captures valid movement commands
    local configs = map.configs
    if configs.clear_lines_on_send then
        lines = {}
    end
    dir = string.lower(dir)
    if dir == "/" then dir = "recall" end
    if dir == "l" then dir = "look" end
    if configs.use_translation then
        dir = configs.translate[dir] or dir
    end
    local door = string.match(dir,"open (%a+)")
    if map.mapping and door and (exitmap[door] or short[door]) then
        local doors = getDoors(map.currentRoom)
        if not doors[door] and not doors[short[door]] then
            map.set_door(door,"","")
        end
    end
    local portal = string.match(dir,"enter (%a+)")
    if map.mapping and portal then
        local portals = getSpecialExitsSwap(map.currentRoom)
        if not portals[dir] then
            map.set_portal(dir, true)
        end
    end
    if table.contains(exitmap,dir) or string.starts(dir,"enter ") or dir == "recall" then
        if priority then
            table.insert(move_queue,1,exitmap[dir] or dir)
        else
            table.insert(move_queue,exitmap[dir] or dir)
        end
    elseif configs.search_on_look and dir == "look" then
        table.insert(move_queue, dir)
    elseif map.currentRoom then
        local special = getSpecialExitsSwap(map.currentRoom) or {}
        if special[dir] then
            if priority then
                table.insert(move_queue,1,dir)
            else
                table.insert(move_queue,dir)
            end
        end
    end
end

local function deduplicate_exits(exits)
  local deduplicated_exits = {}
  for _, v in ipairs(exits) do
    deduplicated_exits[v] = true
  end

  return table.keys(deduplicated_exits)
end
local function capture_room_info(name, exits)
    -- captures room info, and tries to move map to match
    if (not vision_fail) and name and exits then
        map.set("prevName", map.currentName)
        map.set("prevExits", map.currentExits)
        name = string.trim(name)
        map.set("currentName", name)
        if exits:ends(".") then exits = exits:sub(1,#exits-1) end
        if not map.configs.use_translation then
            exits = string.gsub(string.lower(exits)," and "," ")
        end
        map.set("currentExits", {})
        for w in string.gmatch(exits,"%a+") do
            if map.configs.use_translation then
                local dir = map.configs.translate and map.configs.translate[w]
                if dir then table.insert(map.currentExits,dir) end
            else
                table.insert(map.currentExits,w)
            end
        end
    undupeExits = deduplicate_exits(map.currentExits)
    map.set("currentExits", undupeExits)
        map.echo(string.format("Exits Captured: %s (%s)",exits, table.concat(map.currentExits, " ")),true)
        move_map()
    elseif vision_fail then
        move_map()
    end
end

local function find_area(name)
    -- searches for the named area, and creates it if necessary
    local areas = getAreaTable()
    local areaID
    for k,v in pairs(areas) do
        if string.lower(name) == string.lower(k) then
            areaID = v
            break
        end
    end
    if not areaID then areaID = addAreaName(name) end
    if not areaID then
        show_err("Invalid Area. No such area found, and area could not be added.",true)
    end
    map.set("currentArea", areaID)
end

function map.load_map(address)
    local path = profilePath .. "/map downloads/map.dat"
    if not address then
        loadMap(path)
        map.echo("Map reloaded from local copy.")
    else
        if not string.match(address,"/[%a_]+%.dat$") then
            address = address .. "/map.dat"
        end
        downloading = true
        downloadFile(path, address)
        map.echo(string.format("Downloading map file from: %s.",address))
    end
end

function map.set_exit(dir,roomID)
    -- used to set unusual exits from the room you are standing in
    if map.mapping then
        roomID = tonumber(roomID)
        if not roomID then
            show_err("Set Exit: Invalid Room ID")
        end
        if not table.contains(exitmap,dir) and not string.starts(dir, "-p ") then
            show_err("Set Exit: Invalid Direction")
        end

        if not string.starts(dir, "-p ") then
            local exit
            if stubmap[exitmap[dir] or dir] &lt;= 12 then
                exit = short[exitmap[dir] or dir]
                setExit(map.currentRoom,roomID,exit)
            else
                -- check handling of custom exits here
                exit = exitmap[dir] or dir
                exit = "exit " .. exit
                setRoomUserData(map.currentRoom,exit,roomID)
            end
            map.echo("Exit " .. dir .. " now goes to roomID " .. roomID)
        else
            dir = string.gsub(dir,"^-p ","")
            addSpecialExit(map.currentRoom,roomID,dir)
            map.echo("Special exit '" .. dir .. "' now goes to roomID " .. roomID)
        end
    else
        map.echo("Not mapping",false,true)
    end
end

function map.find_path(roomName,areaName,return_tables)
    areaName = (areaName ~= "" and areaName) or nil
    local rooms = find_room(roomName,areaName)
    local found,dirs = false,{}
    local path = {}
    for k,v in pairs(rooms) do
        found = getPath(map.currentRoom,k)
        if found and (#dirs == 0 or #dirs &gt; #speedWalkDir) then
            dirs = speedWalkDir
            path = speedWalkPath
        end
    end
    if return_tables then
        if table.is_empty(path) then
            path, dirs = nil, nil
        end
        return path, dirs
    else
        if #dirs &gt; 0 then
            map.echo("Path to " .. roomName .. ((areaName and " in " .. areaName) or "") .. ": " .. table.concat(dirs,", "))
        else
            map.echo("No path found to " .. roomName .. ((areaName and " in " .. areaName) or "") .. ".",false,true)
        end
    end
end

function map.export_area(name)
    -- used to export a single area to a file
    local areas = getAreaTable()
    name = string.lower(name)
    for k,v in pairs(areas) do
        if name == string.lower(k) then name = k end
    end
    if not areas[name] then
        show_err("No such area.")
    end
    local rooms = getAreaRooms(areas[name])
    local tmp = {}
    for k,v in pairs(rooms) do
        tmp[v] = v
    end
    rooms = tmp
    local tbl = {}
    tbl.name = name
    tbl.rooms = {}
    tbl.exits = {}
    tbl.special = {}
    local rname, exits, stubs, doors, special, portals, door_up, door_down, coords
    for k,v in pairs(rooms) do
        rname = getRoomName(v)
        exits = getRoomExits(v)
        stubs = getExitStubs(v)
        doors = getDoors(v)
        special = getSpecialExitsSwap(v)
        portals = getRoomUserData(v,"portals") or ""
        coords = {getRoomCoordinates(v)}
        tbl.rooms[v] = {name = rname, coords = coords, exits = exits, stubs = stubs, doors = doors, door_up = door_up,
            door_down = door_down, door_in = door_in, door_out = door_out, special = special, portals = portals}
        tmp = {}
        for k1,v1 in pairs(exits) do
            if not table.contains(rooms,v1) then
                tmp[k1] = {v1, getRoomName(v1)}
            end
        end
        if not table.is_empty(tmp) then
            tbl.exits[v] = tmp
        end
        tmp = {}
        for k1,v1 in pairs(special) do
            if not table.contains(rooms,v1) then
                tmp[k1] = {v1, getRoomName(v1)}
            end
        end
        if not table.is_empty(tmp) then
            tbl.special[v] = tmp
        end
    end
    local path = profilePath.."/"..string.gsub(string.lower(name),"%s","_")..".dat"
    table.save(path,tbl)
    map.echo("Area " .. name .. " exported to " .. path)
end

function map.import_area(name)
    name = profilePath .. "/" .. string.gsub(string.lower(name),"%s","_") .. ".dat"
    local tbl = {}
    table.load(name,tbl)
    if table.is_empty(tbl) then
        show_err("No file found")
    end
    local areas = getAreaTable()
    local areaID = areas[tbl.name] or addAreaName(tbl.name)
    local rooms = {}
    local ID
    for k,v in pairs(tbl.rooms) do
        ID = createRoomID()
        rooms[k] = ID
        addRoom(ID)
        setRoomName(ID,v.name)
        setRoomArea(ID,areaID)
        setRoomCoordinates(ID,unpack(v.coords))
        if type(v.stubs) == "table" then
            for i,j in pairs(v.stubs) do
                setExitStub(ID,j,true)
            end
        end
        for i,j in pairs(v.doors) do
            setDoor(ID,i,j)
        end
        setRoomUserData(ID,"portals",v.portals)
    end
    for k,v in pairs(tbl.rooms) do
        for i,j in pairs(v.exits) do
            if rooms[j] then
                connect_rooms(rooms[k],rooms[j],i)
            end
        end
        for i,j in pairs(v.special) do
            if rooms[j] then
                addSpecialExit(rooms[k],rooms[j],i)
            end
        end
    end
    for k,v in pairs(tbl.exits) do
        for i,j in pairs(v) do
            if getRoomName(j[1]) == j[2] then
                connect_rooms(rooms[k],j[1],i)
            end
        end
    end
    for k,v in pairs(tbl.special) do
        for i,j in pairs(v) do
            addSpecialExit(k,j[1],i)
        end
    end
    map.fix_portals()
    map.echo("Area " .. tbl.name .. " imported from " .. name)
end

function map.set_recall()
    -- assigned the current room to be recall for the current character
    map.save.recall[map.character] = map.currentRoom
    table.save(profilePath .. "/map downloads/map_save.dat",map.save)
    map.echo("Recall room set to: " .. getRoomName(map.currentRoom) .. ".")
end

function map.set_portal(name, is_auto)
    -- creates a new portal in the room
    if map.mapping then
        if not string.starts(name,"-f ") then
            find_portal = name
        else
            name = string.gsub(name,"^-f ","")
            force_portal = name
        end
        move_queue = {name}
        if not is_auto then
            send(name)
        end
    else
        map.echo("Not mapping",false,true)
    end
end

function map.set_mode(mode)
    -- switches mapping modes
    if not table.contains({"simple","normal","complex"},mode) then
        show_err("Invalid Map Mode, must be 'simple', 'normal', or 'complex'.")
    end
    map.set("mode", mode)
    map.echo("Current mode set to: " .. mode)
end

function map.start_mapping(area_name)
    -- starts mapping, and sets the current area to the given one, or uses the current one
    if not map.currentName then
        show_err("Room detection not yet working, see &lt;yellow&gt;map basics&lt;reset&gt; for guidance.")
    end
    local rooms
    move_queue = {}
    area_name = area_name ~= "" and area_name or nil
    if map.currentArea and not area_name then
        local areas = getAreaTableSwap()
        area_name = areas[map.currentArea]
    end
    if not area_name then
        show_err("You haven't started mapping yet, how should the first area be called? Set it with: &lt;yellow&gt;start mapping &lt;area name&gt;&lt;reset&gt;")
    end
    map.echo("Now mapping in area: " .. area_name)
    map.set("mapping", true)
    find_area(area_name)
    rooms = find_room(map.currentName, map.currentArea)
    if table.is_empty(rooms) then
        if map.currentRoom and getRoomName(map.currentRoom) == map.currentName then
            map.set_area(area_name)
        else
            create_room(map.currentName, map.currentExits, nil, {0,0,0})
        end
    elseif map.currentRoom and map.currentArea ~= getRoomArea(map.currentRoom) then
        map.set_area(area_name)
    end
end

function map.stop_mapping()
    map.set("mapping", false)
    map.echo("Mapping off.")
end

function map.clear_moves()
    local commands_in_queue = #move_queue
    move_queue = {}
    map.echo("Move queue cleared, "..commands_in_queue.." commands removed.")
end

function map.show_moves()
    map.echo("Moves: "..(move_queue and table.concat(move_queue, ', ') or '(queue empty)'))
end

function map.set_area(name)
    -- assigns the current room to the area given, creates the area if necessary
    if map.mapping then
        find_area(name)
        if map.currentRoom and getRoomArea(map.currentRoom) ~= map.currentArea then
            setRoomArea(map.currentRoom,map.currentArea)
            set_room(map.currentRoom)
        end
    else
        map.echo("Not mapping",false,true)
    end
end

function map.set_door(dir,status,one_way)
    -- adds a door on a given exit
    if map.mapping then
        if not map.currentRoom then
            show_err("Make Door: No room found.")
        end
        dir = exitmap[dir] or dir
        if not stubmap[dir] then
            show_err("Make Door: Invalid direction.")
        end
        status = (status ~= "" and status) or "closed"
        one_way = (one_way ~= "" and one_way) or "no"
        if not table.contains({"yes","no"},one_way) then
            show_err("Make Door: Invalid one-way status, must be yes or no.")
        end

        local exits = getRoomExits(map.currentRoom)
        local exit
        -- check handling of custom exits here
        for i = 13,#stubmap do
            exit = "exit " .. stubmap[i]
            exits[stubmap[i]] = tonumber(getRoomUserData(map.currentRoom,exit))
        end
        local target_room = exits[dir]
        if target_room then
            exits = getRoomExits(target_room)
            -- check handling of custom exits here
            for i = 13,#stubmap do
                exit = "exit " .. stubmap[i]
                exits[stubmap[i]] = tonumber(getRoomUserData(target_room,exit))
            end
        end
        if one_way == "no" and (target_room and exits[reverse_dirs[dir]] == map.currentRoom) then
            add_door(target_room,reverse_dirs[dir],status)
        end
        add_door(map.currentRoom,dir,status)
        map.echo(string.format("Adding %s door to the %s", status, dir))
    else
        map.echo("Not mapping",false,true)
    end
end

function map.shift_room(dir)
    -- shifts a room around on the map
    if map.mapping then
        dir = exitmap[dir] or (table.contains(exitmap,dir) and dir)
        if not dir then
            show_err("Shift Room: Exit not found")
        end
        local x,y,z = getRoomCoordinates(map.currentRoom)
        dir = stubmap[dir]
        local coords = coordmap[dir]
        x = x + coords[1]
        y = y + coords[2]
        z = z + coords[3]
        setRoomCoordinates(map.currentRoom,x,y,z)
        centerview(map.currentRoom)
        map.echo("Shifting room",true)
    else
        map.echo("Not mapping",false,true)
    end
end

local function check_link(firstID, secondID, dir)
    -- check to see if two rooms are connected in a given direction
    if not firstID then error("Check Link Error: No first ID",2) end
    if not secondID then error("Check Link Error: No second ID",2) end
    local name = getRoomName(firstID)
    local exits1 = table.union(getRoomExits(firstID),getRoomStubs(firstID))
    local exits2 = table.union(getRoomExits(secondID),getRoomStubs(secondID))
    local exit
    -- check handling of custom exits here
    for i = 13,#stubmap do
        exit = "exit " .. stubmap[i]
        exits1[stubmap[i]] = tonumber(getRoomUserData(firstID,exit))
        exits2[stubmap[i]] = tonumber(getRoomUserData(secondID,exit))
    end
    local checkID = exits2[reverse_dirs[dir]]
    local exits = {}
    for k,v in pairs(exits1) do
        table.insert(exits,k)
    end
    return checkID and check_room(checkID,name,exits)
end

function map.find_me(name, exits, dir, manual)
    -- tries to locate the player using the current room name and exits, and if provided, direction of movement
    -- if direction of movement is given, narrows down possibilities using previous room info
    if move ~= "recall" then move_queue = {} end
    local check = dir and map.currentRoom and table.contains(exitmap,dir)
    name = name or map.currentName
    exits = exits or map.currentExits
    if not name and not exits then
        show_err("Room not found, complete room name and exit data not available.")
    end
    local rooms = find_room(name)
    local match_IDs = {}
    for k,v in pairs(rooms) do
        if check_room(k, name, exits) then
            table.insert(match_IDs,k)
        end
    end
    rooms = match_IDs
    match_IDs = {}
    if table.size(rooms) &gt; 1 and check then
        for k,v in pairs(rooms) do
            if check_link(map.currentRoom,v,dir) then
                table.insert(match_IDs,v)
            end
        end
    elseif random_move then
        for k,v in pairs(getRoomExits(map.currentRoom)) do
            if check_room(v,map.currentName,map.currentExits) then
                table.insert(match_IDs,v)
            end
        end
    end
    if table.size(match_IDs) == 0 then
        match_IDs = rooms
    end
    if table.contains(match_IDs,map.currentRoom) then
        match_IDs = {map.currentRoom}
    end
    if not table.is_empty(match_IDs) and not find_portal then
        set_room(match_IDs[1])
        map.echo("Room found, ID: " .. match_IDs[1],true)
    elseif find_portal then
        if not table.is_empty(match_IDs) then
            map.echo("Found portal destination, linking rooms",false,false,true)
            addSpecialExit(map.currentRoom,match_IDs[1],find_portal)
            local portals = getRoomUserData(match_IDs[1],"portals") or ""
            portals = portals .. "," .. tostring(map.currentRoom)..":"..find_portal
            setRoomUserData(match_IDs[1],"portals",portals)
            set_room(match_IDs[1])
            map.echo("Room found, ID: " .. match_IDs[1],true)
        else
            map.echo("Creating portal destination",false,false,true)
            create_room(map.currentName, map.currentExits, nil, {getRoomCoordinates(map.currentRoom)})
        end
        find_portal = false
    elseif table.is_empty(match_IDs) then
        if not manual then
            map.echo("Room not found in map database", true, true)
        else
            map.echo("Room not found in map database", false, true)
        end
    end
end

function map.fix_portals()
    if map.mapping then
        -- used to clear and update data for portal back-referencing
        local rooms = getRooms()
        local portals
        for k,v in pairs(rooms) do
            setRoomUserData(k,"portals","")
        end
        for k,v in pairs(rooms) do
            for cmd,room in pairs(getSpecialExitsSwap(k)) do
                portals = getRoomUserData(room,"portals") or ""
                if portals ~= "" then portals = portals .. "," end
                portals = portals .. tostring(k) .. ":" .. cmd
                setRoomUserData(room,"portals",portals)
            end
        end
        map.echo("Portals Fixed")
    else
        map.echo("Not mapping",false,true)
    end
end

function map.merge_rooms()
    -- used to combine essentially identical rooms with the same coordinates
    -- typically, these are generated due to mapping errors
    if map.mapping then
        map.echo("Merging rooms")
        local x,y,z = getRoomCoordinates(map.currentRoom)
        local rooms = getRoomsByPosition(map.currentArea,x,y,z)
        local exits, portals, room, cmd, curportals
        local room_count = 1
        for k,v in pairs(rooms) do
            if v ~= map.currentRoom then
                if getRoomName(v) == getRoomName(map.currentRoom) then
                    room_count = room_count + 1
                    for k1,v1 in pairs(getRoomExits(v)) do
                        setExit(map.currentRoom,v1,stubmap[k1])
                        exits = getRoomExits(v1)
                        if exits[reverse_dirs[k1]] == v then
                            setExit(v1,map.currentRoom,stubmap[reverse_dirs[k1]])
                        end
                    end
                    for k1,v1 in pairs(getDoors(v)) do
                        setDoor(map.currentRoom,k1,v1)
                    end
                    for k1,v1 in pairs(getSpecialExitsSwap(v)) do
                        addSpecialExit(map.currentRoom,v1,k1)
                    end
                    portals = getRoomUserData(v,"portals") or ""
                    if portals ~= "" then
                        portals = string.split(portals,",")
                        for k1,v1 in ipairs(portals) do
                            room,cmd = unpack(string.split(v1,":"))
                            addSpecialExit(tonumber(room),map.currentRoom,cmd)
                            curportals = getRoomUserData(map.currentRoom,"portals") or ""
                            if not string.find(curportals,room) then
                                curportals = curportals .. "," .. room .. ":" .. cmd
                                setRoomUserData(map.currentRoom,"portals",curportals)
                            end
                        end
                    end
                    -- check handling of custom exits here for doors and exits, and reverse exits
                    for i = 13,#stubmap do
                        local door = "door " .. stubmap[i]
                        local tmp = tonumber(getRoomUserData(v,door))
                        if tmp then
                            setRoomUserData(map.currentRoom,door,tmp)
                        end
                        local exit = "exit " .. stubmap[i]
                        tmp = tonumber(getRoomUserData(v,exit))
                        if tmp then
                            setRoomUserData(map.currentRoom,exit,tmp)
                            if tonumber(getRoomUserData(tmp, "exit " .. reverse_dirs[stubmap[i]])) == v then
                                setRoomUserData(tmp, exit, map.currentRoom)
                            end
                        end
                    end
                    deleteRoom(v)
                end
            end
        end
        if room_count &gt; 1 then
            map.echo(room_count .. " rooms merged", true)
        end
    else
        map.echo("Not mapping",false,true)
    end
end

function map.findAreaID(areaname, exact)
    local areaname = areaname:lower()
    local list = getAreaTable()

    -- iterate over the list of areas, matching them with substring match.
    -- if we get match a single area, then return it's ID, otherwise return
    -- 'false' and a message that there are than one are matches
    local returnid, fullareaname, multipleareas = nil, nil, {}
    for area, id in pairs(list) do
        if (not exact and area:lower():find(areaname, 1, true)) or (exact and areaname == area:lower()) then
            returnid = id
            fullareaname = area
            multipleareas[#multipleareas+1] = area
        end
    end

    if #multipleareas == 1 then
        return returnid, fullareaname
    else
        return nil, nil, multipleareas
    end
end

function map.echoRoomList(areaname, exact)
    local areaid, msg, multiples
    local listcolor, othercolor = "DarkSlateGrey","LightSlateGray"
    if tonumber(areaname) then
        areaid = tonumber(areaname)
        msg = getAreaTableSwap()[areaid]
    else
        areaid, msg, multiples = map.findAreaID(areaname, exact)
    end
    if areaid then
        local roomlist, endresult = getAreaRooms(areaid) or {}, {}

        -- obtain a room list for each of the room IDs we got
        local getRoomName = getRoomName
        for _, id in pairs(roomlist) do
            endresult[id] = getRoomName(id)
        end
        roomlist[#roomlist+1], roomlist[0] = roomlist[0], nil
        -- sort room IDs so we can display them in order
        table.sort(roomlist)

        local echoLink, format, fg, echo = echoLink, string.format, fg, cecho
        -- now display something half-decent looking
        cecho(format("&lt;%s&gt;List of all rooms in &lt;%s&gt;%s&lt;%s&gt; (areaID &lt;%s&gt;%s&lt;%s&gt; - &lt;%s&gt;%d&lt;%s&gt; rooms):\n",
            listcolor, othercolor, msg, listcolor, othercolor, areaid, listcolor, othercolor, #roomlist, listcolor))
        -- use pairs, as we can have gaps between room IDs
        for _, roomid in pairs(roomlist) do
            local roomname = endresult[roomid]
            cechoLink(format("&lt;%s&gt;%7s",othercolor,roomid), 'map.speedwalk('..roomid..')',
                format("Go to %s (%s)", roomid, tostring(roomname)), true)
            cecho(format("&lt;%s&gt;: &lt;%s&gt;%s&lt;%s&gt;.\n", listcolor, othercolor, roomname, listcolor))
        end
    elseif not areaid and #multiples &gt; 0 then
        local allareas, format = getAreaTable(), string.format
        local function countrooms(areaname)
            local areaid = allareas[areaname]
            local allrooms = getAreaRooms(areaid) or {}
            local areac = (#allrooms or 0) + (allrooms[0] and 1 or 0)
            return areac
        end
        map.echo("For which area would you want to list rooms for?")
        for _, areaname in ipairs(multiples) do
            echo("  ")
            setUnderline(true)
            cechoLink(format("&lt;%s&gt;%-40s (%d rooms)", othercolor, areaname, countrooms(areaname)),
                'map.echoRoomList("'..areaname..'", true)', "Click to view the room list for "..areaname, true)
            setUnderline(false)
            echo("\n")
        end
    else
        map.echo(string.format("Don't know of any area named '%s'.", areaname),false,true)
    end
    resetFormat()
end

function map.echoAreaList()
    local totalroomcount = 0
    local rlist = getAreaTableSwap()
    local listcolor, othercolor = "DarkSlateGrey","LightSlateGray"

    -- count the amount of rooms in an area, taking care to count the room in the 0th
    -- index as well if there is one
    -- saves the total room count on the side as well
    local function countrooms(areaid)
        local allrooms = getAreaRooms(areaid) or {}
        local areac = (#allrooms or 0) + (allrooms[0] and 1 or 0)
        totalroomcount = totalroomcount + areac
        return areac
    end

    local getAreaRooms, cecho, fg, echoLink, format = getAreaRooms, cecho, fg, echoLink, string.format
    cecho(format("&lt;%s&gt;List of all areas we know of (click to view room list):\n",listcolor))
    for id = 1,table.maxn(rlist) do
        if rlist[id] then
            cecho(format("&lt;%s&gt;%7d ", othercolor, id))
            fg(listcolor)
            echoLink(format("%-40s (%d rooms)",rlist[id],countrooms(id)), 'map.echoRoomList("'..id..'", true)',
                "View the room list for "..rlist[id], true)
            echo("\n")
        end
    end
    cecho(string.format("&lt;%s&gt;Total amount of rooms in this map: %s\n", listcolor, totalroomcount))
end

function map.search_timer_check()
    if find_prompt then
        map.echo("Prompt not auto-detected, use 'map prompt' to set a prompt pattern.",false,true)
        find_prompt = false
    end
end

function map.find_prompt()
    find_prompt = true
    map.echo("Searching for prompt.")
    send("\n", false)
    tempTimer(5, "map.search_timer_check()")
end

function map.make_prompt_pattern(str)
    if not str:starts("^") then str = "^"..str end
    map.save.prompt_pattern[map.character] = str
    find_prompt = false
    table.save(profilePath .. "/map downloads/map_save.dat",map.save)
    map.echo("Prompt pattern set: " .. str)
end

function map.make_ignore_pattern(str)
    map.save.ignore_patterns = map.save.ignore_patterns or {}
    if not table.contains(map.save.ignore_patterns,str) then
        table.insert(map.save.ignore_patterns,str)
        map.echo("Ignore pattern added: " .. str)
    else
        table.remove(map.save.ignore_patterns, table.index_of(map.save.ignore_patterns, str))
        map.echo("Ignore pattern removed: " .. str)
    end
    table.save(profilePath .. "/map downloads/map_save.dat",map.save)
end

local function grab_line()
    table.insert(lines,line)
    if map.save.prompt_pattern[map.character] and string.match(line, map.save.prompt_pattern[map.character]) then
        if map.prompt.exits and map.prompt.exits ~= "" then
            raiseEvent("onNewRoom")
        end
        print_wait_echoes()
        map.echo("Prompt captured",true)
    end
    if find_prompt then
        for k,v in ipairs(map.configs.prompt_test_patterns) do
            if string.match(line,v) then
                map.save.prompt_pattern[map.character] = v
                table.save(profilePath .. "/map downloads/map_save.dat",map.save)
                find_prompt = false
                map.echo("Prompt found")
                break
            end
        end
    end
end

local function name_search()
    local line_count = #lines + 1
    local room_name, cur_line, last_line
    local prompt_pattern = map.save.prompt_pattern[map.character]
    if not prompt_pattern then return end
    while not room_name do
        line_count = line_count - 1
        if not lines[line_count] then break end
        cur_line = lines[line_count]
        for k,v in ipairs(map.save.ignore_patterns) do
            cur_line = string.trim(string.gsub(cur_line,v,""))
        end
        if string.find(cur_line,prompt_pattern) then
            cur_line = string.trim(string.gsub(cur_line,prompt_pattern,""))
            if cur_line ~= "" then
                room_name = cur_line
            else
                room_name = last_line
            end
        elseif line_count == 1 then
            cur_line = string.trim(cur_line)
            if cur_line ~= "" then
                room_name = cur_line
            else
                room_name = last_line
            end
        elseif not string.match(cur_line,"^%s*$") then
            last_line = cur_line
        end
    end
    lines = {}
    room_name = room_name:sub(1,100)
    return room_name
end

local function handle_exits(exits)
    local room = map.prompt.room or name_search()
    exits = map.prompt.exits or exits
    exits = string.lower(exits)
    exits = string.gsub(exits,"%a+", exitmap)
    if room then
        map.echo("Room Name Captured: " .. room, true)
        room = string.trim(room)
        capture_room_info(room, exits)
        map.prompt.room = nil
        map.prompt.exits = nil
    end
end

local continue_walk, timerID
continue_walk = function(new_room)
    if not walking then return end
    -- calculate wait time until next command, with randomness
    local wait = map.configs.speedwalk_delay or 0
    if wait &gt; 0 and map.configs.speedwalk_random then
        wait = wait * (1 + math.random(0,100)/100)
    end
    -- if no wait after new room, move immediately
    if new_room and map.configs.speedwalk_wait and wait == 0 then
        new_room = false
    end
    -- send command if we don't need to wait
    if not new_room then
        send(table.remove(map.walkDirs,1))
        -- check to see if we are done
        if #map.walkDirs == 0 then
            walking = false
        end
    end
    -- make tempTimer to send next command if necessary
    if walking and (not map.configs.speedwalk_wait or (map.configs.speedwalk_wait and wait &gt; 0)) then
        if timerID then killTimer(timerID) end
        timerID = tempTimer(wait, function() continue_walk() end)
    end
end

function map.speedwalk(roomID, walkPath, walkDirs)
    roomID = roomID or speedWalkPath[#speedWalkPath]
    getPath(map.currentRoom, roomID)
    walkPath = speedWalkPath
    walkDirs = speedWalkDir
    if #speedWalkPath == 0 then
        map.echo("No path to chosen room found.",false,true)
        return
    end
    table.insert(walkPath, 1, map.currentRoom)
    -- go through dirs to find doors that need opened, etc
    -- add in necessary extra commands to walkDirs table
    local k = 1
    repeat
        local id, dir = walkPath[k], walkDirs[k]
        if exitmap[dir] or short[dir] then
            local door = check_doors(id, exitmap[dir] or dir)
            local status = door and door[dir]
            if status and status &gt; 1 then
                -- if locked, unlock door
                if status == 3 then
                    table.insert(walkPath,k,id)
                    table.insert(walkDirs,k,"unlock " .. (exitmap[dir] or dir))
                    k = k + 1
                end
                -- if closed, open door
                table.insert(walkPath,k,id)
                table.insert(walkDirs,k,"open " .. (exitmap[dir] or dir))
                k = k + 1
            end
        end
        k = k + 1
    until k &gt; #walkDirs
    if map.configs.use_translation then
        for k, v in ipairs(walkDirs) do
            walkDirs[k] = map.configs.lang_dirs[v] or v
        end
    end
    -- perform walk
    walking = true
    if map.configs.speedwalk_wait or map.configs.speedwalk_delay &gt; 0 then
        map.walkDirs = walkDirs
        continue_walk()
    else
        for _,dir in ipairs(walkDirs) do
            send(dir)
        end
        walking = false
    end
end

function doSpeedWalk()
    if #speedWalkPath ~= 0 then
        map.speedwalk(nil, speedWalkPath, speedWalkDir)
    else
        map.echo("No path to chosen room found.",false,true)
    end
end

local function check_version()
    downloading = false
    local path = profilePath .. "/map downloads/versions.lua"
    local versions = {}
    table.load(path, versions)
    local pos = table.index_of(versions, map.version) or 0
    if pos ~= #versions then
        enableAlias("Map Update Alias")
        map.echo(string.format("The Generic Mapping Script is currently &lt;red&gt;%d&lt;reset&gt; versions behind.",#versions - pos))
        map.echo("To update now, please type: &lt;yellow&gt;map update&lt;reset&gt;")
    end
    map.update_timer = tempTimer(3600, [[map.checkVersion()]])
end

function map.checkVersion()
    if map.update_timer then
        killTimer(map.update_timer)
        map.update_timer = nil
    end
    if not map.update_waiting and map.configs.download_path ~= "" then
        local path, file = profilePath .. "/map downloads", "/versions.lua"
        downloading = true
        downloadFile(path .. file, map.configs.download_path .. file)
        map.update_waiting = true
    end
end

local function update_version()
    downloading = false
    local path = profilePath .. "/map downloads/generic_mapper.xml"
    disableAlias("Map Update Alias")
    uninstallPackage("generic_mapper")
    installPackage(path)
    map.echo("Generic Mapping Script updated successfully.")
end

function map.updateVersion()
    local path, file = profilePath .. "/map downloads", "/generic_mapper.xml"
    downloading = true
    downloadFile(path .. file, map.configs.download_path .. file)
end

function map.showMap(shown)
    local configs = map.configs.map_window
    shown = shown or not configs.shown
    map.configs.map_window.shown = shown
    local x, y, w, h, origin = configs.x, configs.y, configs.w, configs.h, configs.origin
    if string.find(origin,"bottom") then
        if y == 0 or y == "0%" then
            y = h
        end
        if type(y) == "number" then
            y = -y
        else
            y = "-"..y
        end
    end
    if string.find(origin,"right") then
        if x == 0 or x == "0%" then
            x = w
        end
        if type(x) == "number" then
            x = -x
        else
            x = "-"..x
        end
    end
    local mapper = Geyser.Mapper:new({name = "my_mapper", x = x, y = y, w = w, h = h})
    mapper:resize(w,h)
    mapper:move(x,y)
    if shown then
        mapper:show()
    else
        mapper:hide()
    end
end

function map.eventHandler(event, ...)
    if event == "onNewRoom" then
        handle_exits(arg[1])
        if walking and map.configs.speedwalk_wait then
            continue_walk(true)
        end
    elseif event == "onPrompt" then
        if map.prompt.exits and map.prompt.exits ~= "" then
            raiseEvent("onNewRoom")
        end
        print_wait_echoes()
        map.echo("Prompt Captured",true)
    elseif event == "onMoveFail" then
        map.echo("onMoveFail",true)
        table.remove(move_queue,1)
    elseif event == "onVisionFail" then
        map.echo("onVisionFail",true)
        vision_fail = true
        capture_room_info()
    elseif event == "onRandomMove" then
        map.echo("onRandomMove",true)
        random_move = true
        move_queue = {}
    elseif event == "onForcedMove" then
        map.echo("onForcedMove",true)
        capture_move_cmd(arg[1],arg[2]=="true")
    elseif event == "onNewLine" then
        grab_line()
    elseif event == "sysDataSendRequest" then
        capture_move_cmd(arg[1])
        -- check to prevent multiple version checks in a row without user intervention
        if map.update_waiting and map.update_timer then
            map.update_waiting = nil
        -- check to ensure version check cycle is started
        elseif not map.update_waiting and not map.update_timer then
            map.checkVersion()
        end
    elseif event == "sysDownloadDone" and downloading then
        local file = arg[1]
        if string.ends(file,"/map.dat") then
            loadMap(file)
            downloading = false
            map.echo("Map File Loaded.")
        elseif string.ends(file,"/versions.lua") then
            check_version()
        elseif string.ends(file,"/generic_mapper.xml") then
            update_version()
        end
    elseif event == "sysLoadEvent" or event == "sysInstall" then
        config()
    elseif event == "mapOpenEvent" then
        if not help_shown and not map.save.prompt_pattern[map.character or ""] then
            send("look", true)
            tempTimer(3, function() map.show_help("quick_start"); help_shown = true end)
        end
    elseif event == "mapStop" then
        map.set("mapping", false)
        walking = false
        map.echo("Mapping and speedwalking stopped.")
    end
end

registerAnonymousEventHandler("sysDownloadDone", "map.eventHandler")
registerAnonymousEventHandler("sysLoadEvent", "map.eventHandler")
registerAnonymousEventHandler("sysConnectionEvent", "map.eventHandler")
registerAnonymousEventHandler("sysInstall", "map.eventHandler")
registerAnonymousEventHandler("sysDataSendRequest", "map.eventHandler")
registerAnonymousEventHandler("onMoveFail", "map.eventHandler")
registerAnonymousEventHandler("onVisionFail", "map.eventHandler")
registerAnonymousEventHandler("onRandomMove", "map.eventHandler")
registerAnonymousEventHandler("onForcedMove", "map.eventHandler")
registerAnonymousEventHandler("onNewRoom", "map.eventHandler")
registerAnonymousEventHandler("onNewLine", "map.eventHandler")
registerAnonymousEventHandler("mapOpenEvent", "map.eventHandler")
registerAnonymousEventHandler("mapStop", "map.eventHandler")
registerAnonymousEventHandler("onPrompt", "map.eventHandler")
</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>send-text-to-all-games</name>
			<packageName>send-text-to-all-games</packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>sysSendAllProfiles</name>
				<packageName></packageName>
				<script>function sysSendAllProfiles(_, text)
  expandAlias(text)
end</script>
				<eventHandlerList>
					<string>sysSendAllProfiles</string>
				</eventHandlerList>
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>deleteOldProfiles</name>
			<packageName>deleteOldProfiles</packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>deleteOldProfiles script</name>
				<packageName></packageName>
				<script>function deleteOldProfiles(keepdays_arg, delete_maps)

--[[
	Deletes old profiles/maps in the "current"/"map" folders of the Mudlet home directory.
	The following files are NOT deleted:
	- Files newer than the amount of days specified as an argument to deleteOldProfiles(), or 31 days if not specified.	
	- One file for every month before that. Specifically: The first available file of every month prior to this.
	Setting the second argument to true will delete maps instead of profiles. (e.g. deleteOldProfiles(10, true))
--]]

	local keepdays = tonumber(keepdays_arg) or 31
	local profile_table = {}
	local used_last_mod_months = {}
	local slash = (string.char(getMudletHomeDir():byte()) == "/") and "/" or "\\"
	local dirpath = getMudletHomeDir()..slash..(delete_maps and "map" or "current")
	local delnum = 0

	-- Traverse the profiles folder and create a table of files:
	for filename in lfs.dir(dirpath) do
		if filename~="." and filename~=".." then
			profile_table[#profile_table+1] = {name = filename, last_mod = lfs.attributes(dirpath..slash..filename, "modification")}
		end
	end

	-- Sort the table according to last modification date from old to new:
	table.sort(profile_table, function (a,b) return a.last_mod &lt; b.last_mod end)

	echo(string.format("\nDeleting old %s. Files newer than %d days and one profile for every month before that will be kept.", delete_maps and "maps" or "profiles", keepdays))
	for i,v in ipairs(profile_table) do
		local days = math.floor(os.difftime(os.time(), v.last_mod)/86400)
		local last_mod_month = os.date("%Y/%m", v.last_mod)
		if days &gt; keepdays then
			-- For profiles older than X days, check if we already kept a table for this month:
			if not table.contains(used_last_mod_months, last_mod_month) then
				-- If not, do nothing and mark this month as "kept".
				used_last_mod_months[#used_last_mod_months+1] = last_mod_month
			else
				-- Otherwise remove the file:
				local success, errorstring = os.remove(dirpath..slash..v.name)
				if success then
					delnum = delnum + 1
				else
					cecho("\n&lt;red&gt;ERROR: "..errorstring)
				end
			end
		end
	end
	echo(string.format("\nDeletion complete. %d/%d files were removed successfully.", delnum, #profile_table))
end
</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>RoD_UI</name>
			<packageName>RoD_UI</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Initialize</name>
				<packageName></packageName>
				<script>--    ***Increase text buffer and inset borders for the UI***
setConsoleBufferSize("main", 10000, 5000)
local w,h = getMainWindowSize()
--setBorderLeft(w/4)
setBorderTop(h/14)
setBorderBottom(h/10)
--setBorderRight(w/4)
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Numbers</name>
					<packageName></packageName>
					<script>if hp == nil then hp = 1 end
if max_hp == nil then max_hp = 1 end
if ma == nil then ma = 1 end
if max_ma == nil then max_ma = 1 end
if bp == nil then bp = 1 end
if max_bp == nil then max_bp = 1 end
if wt == nil then wt = 1 end
if max_wt == nil then max_wt = 1 end
if mv == nil then mv = 1 end
if max_mv == nil then max_mv = 1 end
if ehp == nil then ehp = 1 end
if max_ehp == nil then max_ehp = 1 end
if old_mov == nil then old_mov = 0 end
if old_ehp == nil then oldehp = 0 end
if old_bp == nil then old_bp = 0 end
if old_hp == nil then old_hp = 0 end
if old_ma == nil then old_ma = 0 end
if round == nil then round = 0 end
if hit_counter == nil then hit_counter = 0 end
if secondary_counter == nil then secondary_counter = 0 end
if quafftrigger == nil then quafftrigger = 0 end
if previous_time == nil then previous_time = 0 end
if quaff_counter == nil then quaff_counter = 0 end
if disarm_counter == nil then disarm_counter = 0 end
if elapsed_time == nil then elapsed_time = 0 end
if cc == nil then cc = 0 end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Booleans</name>
					<packageName></packageName>
					<script>usingMSDP = false
sleeping = false
cancast = true
statuslocked = true
is_training = false
spellbot = false
autoattack_ticked = false
is_tick_tracking = false
tickreports_ticked = false
is_fight_tracking = true
fightreports_ticked = false
is_group_tracking = false  -- not finished
is_fighting = false
was_fighting = false
is_quaffable = false 
quaffreports_ticked = false
showui = true
showui_ticked = true
if is_disarmed == nil then is_disarmed = false end
useblood = false
usemana = false
weightcheck = true
configlocked = true</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Strings</name>
					<packageName></packageName>
					<script>PromptBattle = "&amp;W&lt;&amp;Y%h/%Hhp &amp;G%v/%Vmv&amp;W&gt; &amp;YSty:%S &amp;G%L &amp;R(%n:%c) &lt;&gt;&amp;w%l"
PromptBloodBattle = "&amp;W&lt;&amp;Y%h/%Hhp &amp;R%b/%Bbp &amp;G%v/%Vmv&amp;W&gt; &amp;YSty:%S &amp;G%L &amp;R(%n:%c) &lt;&gt;&amp;w%l"
PromptBloodStandard = "&amp;W[&amp;O%w/%Wwt&amp;W] &amp;W&lt;&amp;Y%h/%Hhp &amp;R%b/%Bbp &amp;G%v/%Vmv &amp;c%E &amp;P%Xlvl&amp;W&gt; &amp;R(%n:%c)&amp;w%l"
PromptManaBattle = "&amp;W&lt;&amp;Y%h/%Hhp &amp;C%m/%Mma &amp;G%v/%Vmv&amp;W&gt; &amp;YSty:%S &amp;G%L &amp;R(%n:%c) &lt;&gt;&amp;w%l"
PromptManaStandard = "&amp;W[&amp;O%w/%Wwt&amp;W] &amp;W&lt;&amp;Y%h/%Hhp &amp;C%m/%Mma &amp;G%v/%Vmv &amp;c%E &amp;P%Xlvl&amp;W&gt; &amp;R(%n:%c)&amp;w%l"
PromptStandard = "&amp;W[&amp;O%w/%Wwt&amp;W] &amp;W&lt;&amp;Y%h/%Hhp &amp;G%v/%Vmv &amp;c%E &amp;P%Xlvl&amp;W&gt; &amp;R(%n:%c)&amp;w%l"
if attack == nil then attack = "none" end --for Attack Alias
if enemy == nil then enemy = "none" end
if secondary == nil then secondary = "none" end --AutoAttacking
if debuff == nil then debuff = "none" end
if heal == nil then heal = "none" end
if current_enemy == nil then current_enemy = "" end
if container == nil then container = "none" end
if quafftrigger == nil then quafftrigger = "none" end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Tables</name>
					<packageName></packageName>
					<script>menu = menu or {
  tabs = {"Chat","Group","Inventory","Config"},
  report = {"Attack","Target","Secondary","Debuff","Potion","Container","HealingAt"},
  titleleft = {"Fight Reporting","Mana Reporting","Auto Attacking","Auto Quaffing"},
  checkboxleft = {"FR","MR","AA","AQ",},
  checkboxright = {"ST","SB","LC","LM"},
  titleright = {"Spell Training","Spell Bot","Lock Menus","Lock Map"},
  areainfo = {"Time","Area","Room"},
  combatinfo = {"Style","WaitTime","Wimpy"},
  black = "rgb(0,0,0)",
  light_blue = "rgb(14, 225, 232)",
  light_grey = "rgb(93,105,107)",
  transparent = "rgba(0,0,0,0%)",
  dark_blue = "rgb(0,0,70)",
  darker_blue = "rgb(0,0,50)",
  dark_red = "rgb(122,7,1)", 
}

stats = stats or {
  stats = {"STR","INT","WIS","DEX","CON","CHA","LCK"},
  split = {"current","base"},
  color1 = "rgba(0,0,0,0%)",
  stats2 = {"Hitroll","Damroll","Armor","Align", "Favor", "Gold"},
}

swtable = swtable or {
  levels = {"General", "Level5", "Level10", "Level15", "Level20", "Level25", "Level30", "Level35", "Level40", "Level45", "Level50", "All", },
  general = {"15-50 Ocean Keep", "15-60 Desert of Despair", "10-50 Ashen Forest", "10-50 Darkhaven Art Gallery", "10-50 Dunhill Demesnes", "10-50 Olympus", "10-65 Blood Sea", "05-50 D'Morian's Lands", "05-50 Town of Solace", "02-50 Grimoire", "02-65 Vast Horizons", "01-50 Mathlaan Lagoon", "01-50 Ofcol", "01-50 Sanctus Irae", "01-50 The Island of Irrybis", "01-50 Tribal Swamplands", "01-65 Heart of the Ether", "00-00 The Umbrageous Ruins", "00-50 City of Eldestra", "00-50 City of Iniquity", "00-50 Eastern Trade Route", "00-50 Northern Trade Route", "00-50 Opallinoc", "00-50 Otherland", "00-50 The Southern Mountain Trade Route", "00-50 Town Hall", "00-50 Western Trade Route", "00-60 Azure Sea", "00-60 Bilwen", "00-60 Blackraven Citadel", "00-60 Cathedral of the Damned", "00-60 Forest of Tears", "00-60 Northern Plains", "00-60 Order of Ringbearers", "00-60 Sanctum of the Arcanes", "00-60 The Burrows", "00-60 The Ruins of T'man", "00-60 The Sands of Teracchei", "00-60 Vale of Nidaros", "00-65 Asgard Nexus", "00-65 Forgotten Woods", "00-65 Guild of Origin", "00-65 Haunted House", "00-65 Keep of Lomar", "00-65 Lake of Tich'Pyga", "00-65 Midway of Despair", "00-65 Mire", "00-65 Mount Krozloy", "00-65 New Darkhaven", "00-65 Qetag's Reach", "00-65 Reomyr Village", "00-65 Southern Mountain Range", "00-65 Sunless Sea", "00-65 The Guild of Spirit", "00-65 The Peaks of Tar'pa Cithm", "00-65 The Village of Tar'pa Cithm", "00-65 Wastelands"},
  level5 = {"05-25 Along the Forest Path", "05-25 Coral Depths", "05-25 Shire", "05-30 Elemental Canyon", "05-30 Sewers", "05-35 Crystalmir Lake", "05-35 New Ofcol", "05-15 Miden'nir", "05-15 Moria", "05-15 Unholy Grounds", "05-16 Graveyard", "03-15 Tullfuhrzky Manor", "00-05 A Moment in Nature", "00-05 Isle of the Monkeys", "01-05 The Halls of Knowledge", "01-05 Warehouse", "01-10 Pixie Forest"},
  level10 = {"10-25 Dragon Cult", "10-25 Great Eastern Desert", "10-25 Kingdom of Juargan", "10-25 Ockwater Fens", "10-25 Thalos", "10-30 High Tower of Sorcery", "10-30 The Wolf's Den", "10-30 Wild Tundra", "10-35 Emerald Hills", "10-35 Mountains of Desolation", "10-35 White Pine Camp", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor", "05-25 Along the Forest Path", "05-25 Coral Depths", "05-25 Shire", "05-30 Elemental Canyon", "05-30 Sewers", "05-35 Crystalmir Lake", "05-35 New Ofcol","08-15 Troll Den", "08-20 Land of the Fire Newts", "10-20 Gauntlet", "10-20 Major Oak", "01-20 Machine Dreams", "01-20 Old Pottswort's Fields", "01-20 Shadow Grove", "01-20 Wendle Mansion", "01-30 Old Thalos", "02-20 Ezard's Fields", "04-24 Green Forest", "05-20 Bartok Grove", "05-20 Sentinel", "05-20 Shattered Refuge", "05-20 Valley of the Elves","05-15 Miden'nir", "05-15 Moria", "05-15 Unholy Grounds", "05-16 Graveyard", "03-15 Tullfuhrzky Manor"},
  level15 = {"15-20 Thul Ab'hara", "15-25 Dwarven Catacombs", "15-25 Tower of Zenothir", "15-30 Galaxy", "15-30 Wyvern's Tower", "15-35 Abishai's Morgue", "15-35 Drow City", "15-45 Astral Plane", "10-25 Dragon Cult", "10-25 Great Eastern Desert", "10-25 Kingdom of Juargan", "10-25 Ockwater Fens", "10-25 Thalos", "10-30 High Tower of Sorcery", "10-30 The Wolf's Den", "10-30 Wild Tundra", "10-35 Emerald Hills", "10-35 Mountains of Desolation", "10-35 White Pine Camp", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor", "05-25 Along the Forest Path", "05-25 Coral Depths", "05-25 Shire", "05-30 Elemental Canyon", "05-30 Sewers", "05-35 Crystalmir Lake", "05-35 New Ofcol", "08-20 Land of the Fire Newts", "10-20 Gauntlet", "10-20 Major Oak", "01-20 Machine Dreams", "01-20 Old Pottswort's Fields", "01-20 Shadow Grove", "01-20 Wendle Mansion", "01-30 Old Thalos", "02-20 Ezard's Fields", "04-24 Green Forest", "05-20 Bartok Grove", "05-20 Sentinel", "05-20 Shattered Refuge", "05-20 Valley of the Elves"},
  level20 = {"20-50 Octopus Garden", "20-35 Old Marsh", "20-35 New Hope Farm", "15-25 Dwarven Catacombs", "15-25 Tower of Zenothir", "15-30 Galaxy", "15-30 Wyvern's Tower", "15-35 Abishai's Morgue", "15-35 Drow City", "15-45 Astral Plane", "10-25 Dragon Cult", "10-25 Great Eastern Desert", "10-25 Kingdom of Juargan", "10-25 Ockwater Fens", "10-25 Thalos", "10-30 High Tower of Sorcery", "10-30 The Wolf's Den", "10-30 Wild Tundra", "10-35 Emerald Hills", "10-35 Mountains of Desolation", "10-35 White Pine Camp", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor", "05-25 Along the Forest Path", "05-25 Coral Depths", "05-25 Shire", "05-30 Elemental Canyon", "05-30 Sewers", "05-35 Crystalmir Lake", "05-35 New Ofcol", "01-30 Old Thalos"},
  level25 = {"25-35 Dungeon", "25-50 Mithril Hall", "25-30 Intrigues of the Miden'nir", "20-50 Octopus Garden", "20-35 Old Marsh", "20-35 New Hope Farm", "15-30 Galaxy", "15-30 Wyvern's Tower", "15-35 Abishai's Morgue", "15-35 Drow City", "15-45 Astral Plane", "10-30 High Tower of Sorcery", "10-30 The Wolf's Den", "10-30 Wild Tundra", "10-35 Emerald Hills", "10-35 Mountains of Desolation", "10-35 White Pine Camp", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor", "05-30 Elemental Canyon", "05-30 Sewers", "05-35 Crystalmir Lake", "05-35 New Ofcol", "01-30 Old Thalos"},
  level30 = {"30-40 MacMillan Family Farm", "30-45 The Fire Station", "25-45 Cold Comfort", "25-40 Ancient City of Aurora", "25-40 Steading of the Hill Giants", "20-40 Dragon Tower", "20-40 Sea of Sorrows", "20-40 Treetops and Canopy", "25-35 Dungeon", "25-50 Mithril Hall", "20-50 Octopus Garden", "20-35 Old Marsh", "20-35 New Hope Farm", "15-35 Abishai's Morgue", "15-35 Drow City", "15-45 Astral Plane", "10-35 Emerald Hills", "10-35 Mountains of Desolation", "10-35 White Pine Camp", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor", "05-35 Crystalmir Lake", "05-35 New Ofcol"},
  level35 = {"35-49 Haven of Everlasting Light", "35-50 Blasted Lands", "35-50 City of Salburg", "35-50 Daichaal", "35-50 Glimwinkle's Chessboard", "35-50 Glimwinkle's Windmill", "35-50 Knights of the Round", "35-50 Kontaur", "35-50 Morgul Vale", "35-50 Revelation City", "35-50 Silvermoon Outpost", "35-50 Temple of the Laughing God", "35-50 Tower of Enlightenment", "35-50 Tree of Life", "35-50 Winterlight Island", "20-50 Raven Tor", "20-50 Seth's Fortress", "20-50 The Land of the Lost", "20-50 The Lotus Sanctuary", "25-50 Barren Peaks of Tahjliera", "25-50 Barrik's Keep", "25-50 Cursed Lands", "25-50 King's Castle", "25-50 Shadowport", "25-50 Tayalardian Rangelands", "30-49 Temple of the Moon", "30-50 Dylan's Area", "30-50 Florin", "30-50 Graveyard of the Gods", "30-50 Village of Edo", "30-40 MacMillan Family Farm", "30-45 The Fire Station", "25-45 Cold Comfort", "25-40 Ancient City of Aurora", "25-40 Steading of the Hill Giants", "20-40 Dragon Tower", "20-40 Sea of Sorrows", "20-40 Treetops and Canopy", "25-50 Mithril Hall", "20-50 Octopus Garden", "15-45 Astral Plane", "10-40 Valley of Mysts", "10-45 Keep of Mahn-Tor"},
  level40 = {"37-50 Redferne's Residence", "40-49 The Mahn-Tor Catacombs", "40-50 An abandoned mine", "40-50 Dawn to Dusk", "40-50 Dragon's Pass", "40-50 Fallen Graces", "40-50 Florebit In Immortalis Iuvenis", "40-50 Isle of the Savrathi", "40-50 Mountain of Lost Souls", "40-50 Mulciber's Forge", "40-50 Nevermore", "40-50 Shattered Temple of Naetrelle", "40-50 The Barren Wastes", "40-50 The Wilds", "40-50 Tomb of the Sleeping Demon", "40-50 Tower of Despair", "40-50 Tower of Lithos", "40-50 Underworld", "40-50 Von Deusen Mausoleum", "40-65 Pass of the Mourned", "35-49 Haven of Everlasting Light", "35-50 Blasted Lands", "35-50 City of Salburg", "35-50 Daichaal", "35-50 Glimwinkle's Chessboard", "35-50 Glimwinkle's Windmill", "35-50 Knights of the Round", "35-50 Kontaur", "35-50 Morgul Vale", "35-50 Revelation City", "35-50 Silvermoon Outpost", "35-50 Temple of the Laughing God", "35-50 Tower of Enlightenment", "35-50 Tree of Life", "35-50 Winterlight Island", "20-50 Raven Tor", "20-50 Seth's Fortress", "20-50 The Land of the Lost", "20-50 The Lotus Sanctuary", "25-50 Barren Peaks of Tahjliera", "25-50 Barrik's Keep", "25-50 Cursed Lands", "25-50 King's Castle", "25-50 Shadowport", "25-50 Tayalardian Rangelands", "30-49 Temple of the Moon", "30-50 Dylan's Area", "30-50 Florin", "30-50 Graveyard of the Gods", "30-50 Village of Edo", "30-45 The Fire Station", "25-45 Cold Comfort", "25-50 Mithril Hall", "20-50 Octopus Garden", "15-45 Astral Plane", "10-45 Keep of Mahn-Tor"},
  level45 = {"45-50 Abattoir Asylum", "45-50 Keep of Belial", "45-50 Lamech's Abandoned Manor", "45-50 Reign of Madness", "45-50 Serpentine Coils", "45-50 Slime Pit", "45-50 Transylvania", "45-50 Ziggurat"},
  level50 = {"47-50 Shai'Ghool", "50-50 Antall, the Lost Harbor", "50-50 Badlands", "50-50 Forested Strongholds", "50-50 Hall of Mirrors", "50-50 Kilgharrah's Cave", "50-50 La Chute D'eau De L'ancients", "50-50 Realm of Worship", "50-50 Scourge of Time", "50-50 Sesuadra Rift", "50-50 Valley of Crucifixion", "45-50 Abattoir Asylum", "45-50 Keep of Belial", "45-50 Lamech's Abandoned Manor", "45-50 Reign of Madness", "45-50 Serpentine Coils", "45-50 Slime Pit", "45-50 Transylvania", "45-50 Ziggurat", "40-65 Pass of the Mourned"},
  all = {"40-50 An abandoned mine", "50-50 Badlands", "40-50 The Barren Wastes", "00-60 Bilwen", "00-60 Blackraven Citadel", "00-60 The Burrows", "00-60 Cathedral of the Damned", "00-50 City of Eldestra", "25-45 Cold Comfort", "40-50 Dawn to Dusk", "40-50 Fallen Graces", "40-50 Florebit In Immortalis Iuvenis", "30-50 Florin", "50-50 Forested Strongholds", "15-30 Galaxy", "35-50 Glimwinkle's Chessboard", "35-50 Glimwinkle's Windmill", "30-50 Graveyard of the Gods", "02-50 Grimoire", "00-65 Guild of Origin", "50-50 Hall of Mirrors", "01-05 The Halls of Knowledge", "00-65 Haunted House", "01-65 Heart of the Ether", "01-50 The Island of Irrybis", "00-05 Isle of the Monkeys", "40-50 Isle of the Savrathi", "00-65 Keep of Lomar", "50-50 Kilgharrah's Cave", "20-50 The Land of the Lost", "20-50 The Lotus Sanctuary", "30-40 MacMillan Family Farm", "40-49 The Mahn-Tor Catacombs", "01-50 Mathlaan Lagoon", "00-65 Midway of Despair", "00-05 A Moment in Nature", "00-65 Mount Krozloy", "40-50 Mulciber's Forge", "00-65 New Darkhaven", "20-35 New Hope Farm", "01-20 Old Pottswort's Fields", "00-50 Opallinoc", "00-60 Order of Ringbearers", "40-65 Pass of the Mourned", "00-65 The Peaks of Tar'pa Cithm", "00-65 Qetag's Reach", "45-50 Reign of Madness", "00-65 Reomyr Village", "00-60 The Ruins of T'man", "00-60 Sanctum of the Arcanes", "01-50 Sanctus Irae", "00-60 The Sands of Teracchei", "45-50 Serpentine Coils", "05-30 Sewers", "35-50 Silvermoon Outpost", "00-50 The Southern Mountain Trade Route", "25-40 Steading of the Hill Giants", "00-65 Sunless Sea", "25-50 Tayalardian Rangelands", "35-50 Temple of the Laughing God", "30-45 The Fire Station", "00-65 The Guild of Spirit", "40-50 Tomb of the Sleeping Demon", "40-50 Tower of Lithos", "00-50 Town Hall", "01-50 Tribal Swamplands", "00-00 The Umbrageous Ruins", "00-60 Vale of Nidaros", "02-65 Vast Horizons", "00-65 The Village of Tar'pa Cithm", "40-50 The Wilds", "10-30 The Wolf's Den", "45-50 Abattoir Asylum", "15-35 Abishai's Morgue", "05-25 Along the Forest Path", "25-40 Ancient City of Aurora", "50-50 Antall, the Lost Harbor", "00-65 Asgard Nexus", "10-50 Ashen Forest", "15-45 Astral Plane", "00-60 Azure Sea", "25-50 Barren Peaks of Tahjliera", "25-50 Barrik's Keep", "05-20 Bartok Grove", "35-50 Blasted Lands", "10-65 Blood Sea", "00-50 City of Iniquity", "35-50 City of Salburg", "05-25 Coral Depths", "05-35 Crystalmir Lake", "25-50 Cursed Lands", "35-50 Daichaal", "10-50 Darkhaven Art Gallery", "15-60 Desert of Despair", "05-50 D'Morian's Lands", "10-25 Dragon Cult", "20-40 Dragon Tower", "40-50 Dragon's Pass", "15-35 Drow City", "25-35 Dungeon", "10-50 Dunhill Demesnes", "15-25 Dwarven Catacombs", "30-50 Dylan's Area", "00-50 Eastern Trade Route", "05-30 Elemental Canyon", "10-35 Emerald Hills", "02-20 Ezard's Fields", "00-60 Forest of Tears","00-65 Forgotten Woods","10-20 Gauntlet","05-16 Graveyard","10-25 Great Eastern Desert","04-24 Green Forest","35-49 Haven of Everlasting Light","10-30 High Tower of Sorcery","25-30 Intrigues of the Miden'nir","45-50 Keep of Belial","10-45 Keep of Mahn-Tor","10-25 Kingdom of Juargan","25-50 King's Castle","35-50 Knights of the Round","35-50 Kontaur","50-50 La Chute D'eau De L'ancients","00-65 Lake of Tich'Pyga","08-20 Land of the Fire Newts","01-20 Machine Dreams","10-20 Major Oak","05-15 Miden'nir","00-65 Mire","25-50 Mithril Hall","35-50 Morgul Vale","05-15 Moria","40-50 Mountain of Lost Souls","10-35 Mountains of Desolation","40-50 Nevermore","05-35 New Ofcol","00-60 Northern Plains","00-50 Northern Trade Route","15-50 Ocean Keep","10-25 Ockwater Fens","20-50 Octopus Garden","01-50 Ofcol","20-35 Old Marsh","01-30 Old Thalos","10-50 Olympus","00-50 Otherland","01-10 Pixie Forest","20-50 Raven Tor","50-50 Realm of Worship","37-50 Redferne's Residence","35-50 Revelation City","50-50 Scourge of Time","20-40 Sea of Sorrows","05-20 Sentinel","50-50 Sesuadra Rift","20-50 Seth's Fortress","01-20 Shadow Grove","25-50 Shadowport","47-50 Shai'Ghool","05-20 Shattered Refuge","40-50 Shattered Temple of Naetrelle","05-25 Shire","45-50 Slime Pit","00-65 Southern Mountain Range","30-49 Temple of the Moon","10-25 Thalos","15-20 Thul Ab'hara","40-50 Tower of Despair","35-50 Tower of Enlightenment","15-25 Tower of Zenothir","05-50 Town of Solace","45-50 Transylvania","35-50 Tree of Life","20-40 Treetops and Canopy","08-15 Troll Den","03-15 Tullfuhrzky Manor","40-50 Underworld","05-15 Unholy Grounds","50-50 Valley of Crucifixion","10-40 Valley of Mysts","05-20 Valley of the Elves","30-50 Village of Edo","40-50 Von Deusen Mausoleum","01-05 Warehouse","00-65 Wastelands","01-20 Wendle Mansion","00-50 Western Trade Route","10-35 White Pine Camp","10-30 Wild Tundra","35-50 Winterlight Island","15-30 Wyvern's Tower","45-50 Ziggurat","45-50 Lamech's Abandoned Manor"},
  }
table.sort(swtable.general)
table.sort(swtable.level5)
table.sort(swtable.level10)
table.sort(swtable.level15)
table.sort(swtable.level20)
table.sort(swtable.level25)
table.sort(swtable.level30)
table.sort(swtable.level35)
table.sort(swtable.level40)
table.sort(swtable.level45)
table.sort(swtable.level50)
table.sort(swtable.all)


affects = affects or {}


abilities = abilities or {
  
  ["Spells"] = {},
  ["Skills"] = {},
  ["Weapons"] = {},

} 


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CSSMan</name>
					<packageName></packageName>
					<script>-- ***not using it but nice to have***
-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>General Functions</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>getprompt</name>
					<packageName></packageName>
					<script>function getprompt()

if usemana == true then
  send("prompt " .. PromptManaStandard)
  send("fprompt &amp;W[&amp;P".. name .. "&amp;W]" .. PromptManaBattle)
elseif useblood == true then
  send("prompt " .. PromptBloodStandard)
  send("fprompt &amp;W[&amp;P".. name .. "&amp;W]" .. PromptBloodBattle)
else
  send("prompt " .. PromptStandard)
  send("fprompt &amp;W[&amp;P".. name .. "&amp;W]" .. PromptBattle)
end

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getclass</name>
					<packageName></packageName>
					<script>function setclass()
getclass()
useblood = false
usemana = false
if class == ("Paladin") then	
	secondary = "strike"
  usemana = true
elseif class == ("Mage") then	
  secondary = "strike"
  usemana = true
elseif class == ("Cleric") then	
	secondary = "strike" 
  usemana = true
elseif class == ("Vampire") then	
	secondary = "strike"
  useblood = true
elseif class == ("Warrior") then	
	secondary = "kick" 
elseif class == ("Ranger") then	
	secondary = ""
  usemana = true
elseif class == ("Nephandi") then	
	secondary = "" 
  usemana = true
elseif class == ("Augurer") then	
	secondary = ""
  usemana = true
elseif class == ("Fathomer") then	
	secondary = "" 
  usemana = true
elseif class == ("Thief") then	
	secondary = "strike" 
elseif class == ("Druid") then	
	secondary = ""
  usemana = true
elseif class == ("Barbarian") then	
	secondary = ""
else  
end
if usemana then manabackground:show(); bloodbackground:hide() end
if useblood then bloodbackground:show(); manabackground:hide() end
scoreinfo:echo("&lt;center&gt;Level "..level.." "..race.." "..class)
menu.Secondarytitle:echo("&lt;center&gt;"..secondary)

end --function</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CJH Mana Tracker</name>
					<packageName></packageName>
					<script>-- *** Trigger mana reminders for resting ***
-- Use the +4 because I think they get 5 as the lowest tick but can get a few from spells like vitality or fortify

function tick_tracker()
  if (old_ma + 4) &lt; ma then
  	
		-- some of these i want reminders, others i just want a new prompt
  	x = {20,40,60,75,85,50,70}
  	
  	-- kill the existing timers
  	if tid1 then killTimer(tid1) end
  	if tid2 then killTimer(tid2) end
  	if tid3 then killTimer(tid3) end
  	if tid4 then killTimer(tid4) end
  	if tid5 then killTimer(tid5) end
  	if tid6 then killTimer(tid7) end
  	if tid7 then killTimer(tid7) end
  	
  	-- start new ones
  	if ma &lt; max_ma then 
  		cecho("\n&lt;orange&gt;Mana just increased ... starting timer ...\n")
    	tid1 = tempTimer(x[1], [[cecho("&lt;orange&gt;]]..x[1]..[[ seconds passed since last mana increase.\n");send(" ",false)]])
    	tid2 = tempTimer(x[2], [[cecho("&lt;orange&gt;]]..x[2]..[[ seconds passed since last mana increase.\n");send(" ",false)]])
    	tid3 = tempTimer(x[3], [[cecho("&lt;orange&gt;]]..x[3]..[[ seconds passed since last mana increase.\n");send(" ",false)]])
    	tid4 = tempTimer(x[4], [[cecho("&lt;orange&gt;]]..x[4]..[[ seconds passed since last mana increase.\n");send(" ",false)]])
    	tid5 = tempTimer(x[5], [[cecho("&lt;orange&gt;]]..x[5]..[[ seconds passed since last mana increase!\n");send(" ",false)]])
    	tid6 = tempTimer(x[6], [[send(" ",false)]])
  		tid7 = tempTimer(x[7], [[send(" ",false)]])
  	else
  		cecho("\n\n&lt;orange&gt;Mana just increased to &lt;white&gt; MAX &lt;orange&gt; use it!...\n")
  	end
  end
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CJH Spells</name>
					<packageName></packageName>
					<script>
-- *** Generic script to break apart the spell and the object
-- I need to iprove this with an OR in the regexp (maybe)

function parseMatches()

  local bVerbose = false
	local spell = ""
	local object = ""
	local total

  --print("Calling parse matches ...")

  total = matches[1]
  
  -- until i fix it better there are only three cases that should be allowed
  if total:len()== 3 then
    -- already done - both are ""
  elseif matches[5] ~= nil then
  	-- only one argument
  	spell = matches[5]
  else
  	-- two arguments
  	spell = matches[3]
  	object =matches[4]
  end
	
  if bVerbose then
  	print("Universal Detect - Length of regexp is "..total:len())
    local i
    for i = 1,5 do
    	if matches[i] == nil then print ("Matches " .. i .. " is NIL")
    	else print("Matches " .. i .. " is " .. matches[i])
    	end
    end
  end
	return spell, object
end

-- general cast detection spells
function castdetect(char,object) 
  local spell="magic"
  if char=='i' then spell='invis' end
	if char=='h' then spell='hidden' end
	if char=='m' then spell='magic' end
	if char=='e' then spell='evil' end
	if char=='p' then spell='poison' end
	if char=='u' then spell='undead' end

	if char=="" and object=="" then
		cecho("&lt;light_slate_blue&gt; Detect with no arguments\n")
	elseif object=="" then
		cecho("&lt;light_slate_blue&gt;The spell is: &lt;red&gt;detect "..spell.."&lt;green&gt; with &lt;red&gt;no &lt;green&gt;target " .. object.."\n")
	else
		cecho("&lt;light_slate_blue&gt;The spell is: &lt;red&gt;detect "..spell.."&lt;green&gt; with &lt;green&gt;target &lt;red&gt;" .. object.."\n") 
	end
	send("cast 'detect ".. spell .. "' " .. object)
end

-- general cast heal/harm spells.  They take two arguments, and the alais has to curate them
-- 4/13/2019 CJH
function castharm(char,object) 
  local spell=""
  if char=='cl' then spell='cause light' end
	if char=='cs' then spell='cause serious' end
	if char=='cc' then spell='cause critical' end
	if char=='bu' then spell='burden defense' end
	if char=='bl' then spell='blindness' end
	if char=='po' then spell='poison' end
	if char=='cu' then spell='curse' end
	if char=='le' then spell='lethargy' end
	if char=='ha' then spell='harm' end
	if char=='de' then spell='dispel evil' end
	if char=='un' then spell='banish undead' end
	
	
	if char=="" and object=="" then
		cecho("&lt;light_slate_blue&gt;*Cast harm with no arguments\n")
	elseif object=="" then
		cecho("&lt;light_slate_blue&gt;*Harming spell is: &lt;red&gt;"..spell.."&lt;green&gt; with &lt;red&gt;no &lt;green&gt;target " .. object.."\n")
	else
		cecho("&lt;light_slate_blue&gt;*Harming spell is: &lt;red&gt;"..spell.."&lt;green&gt; with &lt;green&gt;target &lt;red&gt;" .. object.."\n") 
	end
	send("cast '" .. spell .. "' " .. object)
end

function castweal(char,object) 
	local spell = ""
	if chartype == 'cleric' then
    if char=='cl' then spell='cure light' end
  	if char=='cs' then spell='cure serious' end
  	if char=='cc' then spell='cure critical' end
  	if char=='cb' then spell='cure blindness' end
  	if char=='bl' then spell='cure blindness' end
  	if char=='po' then spell='cure poison' end
  	if char=='cp' then spell='cure poison' end
  	if char=='rc' then spell='remove curse' end
  	if char=='cu' then spell='remove curse' end
  	if char=='rh' then spell='remove hex' end
  	if char=='mi' then spell='minor invocation' end
  	if char=='ma' then spell='major invocation' end
  	if char=='ar' then spell='armor' end
  	if char=='bl' then spell='bless' end
  	if char=='pr' then spell='protection' end
  	if char=='sa' then spell='sanctuary' end
  	if char=='he' then spell='heal' end
  	if char=='fo' then spell='fortify' end
  	if char=='be' then spell='benediction' end
  	if char=='sa' then spell='sanctuary' end
	
	elseif chartype == 'paladin' then
		if char=='bh' then spell='breath of heaven' end
  	if char=='bt' then spell='bethsaidean touch' end
		if char=='cb' then spell='bethsaidean touch' end
		if char=='bl' then spell='bethsaidean touch' end
		if char=='rc' then spell='remove curse' end
  	if char=='cu' then spell='remove curse' end
		if char=='cp' then spell='expurgation' end
		if char=='po' then spell='expurgation' end
		if char=='ex' then spell='expurgation' end
		if char=='cl' then spell='vitality' end	
		if char=='cm' then spell='vitality' end	
		if char=='cs' then spell='vitality' end
		if char=='hc' then spell='hezekiahs cure' end		
		if char=='cc' then spell='vitality' end
	end

	
	if char=="" and object=="" then
		cecho("&lt;light_slate_blue&gt;*Cast weal with no arguments\n")
	elseif object=="" then
		cecho("&lt;light_slate_blue&gt;*Wealing spell is: &lt;red&gt;"..spell.."&lt;green&gt; with &lt;red&gt;no &lt;green&gt;target " .. object.."\n")
	else
		cecho("&lt;light_slate_blue&gt;*Wealing spell is: &lt;red&gt;"..spell.."&lt;green&gt; with &lt;green&gt;target &lt;red&gt;" .. object.."\n") 
	end
	send("cast '" .. spell .. "' " .. object)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CJH Fight Tracker</name>
					<packageName></packageName>
					<script>  -- *** Updated version of the fight tracker to use lua tables and be much cleaner ***
	-- 5/28/2019
	
function fight_club(line)
  -- *** Fighting specific - keep track of HP loss throughout fight ***
  fight_string = "\&lt;\&gt;"  -- PUT THIS UNIQUE STRING IN THE FPROMPT SO WE CAN CATCH IT
  if string.match(line,fight_string) then is_fighting = true else is_fighting = false end
  
  
	-- *** Starting a new fight ***
  if (was_fighting == false and is_fighting == true) then
  
    
    logofull:hide()
    enemycontainer:show()
    setenemyicon()

		start_time = getEpoch()  -- start time so we can see how long each round took
		start_time_string = getTime(true, "hh:mm:ss")  -- human readable start time for the report
		start_xp = tonumber(exptnl)  -- XP at the start of the fight - set in the prompt trigger
		start_hp = old_hp   -- HP at the start of the fight - set in the prompt trigger
		-- reset all the fight related variables
  	round = 0
  	secondary_counter = 0
		disarm_counter = 0
  	total_loss = 0
		hit_counter = 0
		pipe_counter = 0
		elapsed_time = 0
		pipe_char = "  "
		was_hit = false
		quaff_counter = 0
		was_quaffed = false
  	current_enemy = string.match(line,"%(([%w%s]+)")
  	if current_enemy == nil then current_enemy = "" end  --that match may fail
		--enemy = "'".. current_enemy .. "'"
		enemy = current_enemy:match("%s*(%S+)$")  -- can change this for the secondaries until i know how to change a target - just use alias "enemy X"
		line_number = getLastLineNumber("main")
		line_zero = old_line_number  -- can't get the initial round damage w/o storing this somehow, so get from the prompt trigger
		
		-- Going to use line number, elapsed time, hp, round, pipe char, was_hit...
		fight_table = {}
		fight_table[round] = {line_number, elapsed_time, round, hp, old_hp-hp, pipe_char, parse_enemy_condition(line), was_quaffed, ""}
  end -- end start of a fight
	
	
  -- *** During a fight ***
  if is_fighting == true then
		round = round + 1
		elapsed_time = getEpoch() - start_time
		--was trying to keep track of fractional rounds but i'm not sure if it matters
		if string.match(line,"|") then
			_, count = string.gsub(line, "|", " ")
			if count == 2 then pipe_char = "||" else pipe_char = " |" end
			pipe_counter = pipe_counter + 1
		else
			pipe_char = "  "
		end
		
		was_hit = false
  	if (hp-old_hp) &lt; 0 then 
			hit_counter = hit_counter +1
			total_loss = total_loss + (old_hp-hp)
			was_hit = true 
		end
		  	
  	--Let's not die if we can help it - quaff a heal potion from the rucksack
		was_quaffed = false
  	if hp &lt; tonumber(quafftrigger) and is_quaffable then 
  		send("quaff " .. heal .." ".. container)
			quaff_counter = quaff_counter +1
			was_quaffed = true
  	else

			  if (elapsed_time-previous_time &gt; 2.0) and autoattack_ticked then
  		  send(secondary.. " " ..enemy)

  		end
  	end
		fight_table[round] = {line_number, elapsed_time, round, hp, old_hp-hp, pipe_char, parse_enemy_condition(line), was_quaffed, ""}
  end -- end of each round of a fight
	
	
  -- *** End of a fight ***
  if (was_fighting == true and is_fighting ==false) then

  

		elapsed_time = getEpoch() - start_time
		round = round + 1
    fight_table[round] = {line_number, elapsed_time, round, hp, old_hp-hp, pipe_char, parse_enemy_condition(line), was_quaffed, ""}
		if fightreports_ticked then
    display_fight_table()
    end
		elapsed_time = 0
    send(" \n")
    logofull:show()
    enemycontainer:hide()
  end  -- end of a fight
	
	-- cleanup
	was_fighting = is_fighting
	previous_time = elapsed_time
    
    

  
	
--cecho("Round: " .. round .. "\n")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CJH Format Fight Results</name>
					<packageName></packageName>
					<script>  -- *** Print Fight Results***
	-- 5/28/2019
	
function display_fight_table() 
	
 	cecho("\n\n&lt;green&gt;*** &lt;white&gt;FIGHT REPORT vs. " .. current_enemy .." &lt;green&gt;****\n")
	cecho("&lt;green&gt;Begin: &lt;white&gt;" .. start_time_string .."\t&lt;green&gt;HP: &lt;white&gt;" .. 
  		string.format("%.3d",tostring(start_hp)) .. "&lt;green&gt;  Loss: &lt;white&gt;" .. string.format("%.3s","---") .."\n")
		
		-- fight_table[round] = {line_number, elapsed_time, round, hp, old_hp-hp, pipe_char, enemy condition, was_quaffed, ""}
		cecho("&lt;green&gt;Ln: &lt;white&gt;".. fight_table[1][1].. "&lt;green&gt; Time:&lt;white&gt;" .. string.format("%5.1f",fight_table[1][2]) .. 
				"&lt;green&gt; Rnd: &lt;white&gt;" .. string.format("%2d",fight_table[1][3]) .. fight_table[1][6] ..
				"&lt;green&gt; HP: &lt;white&gt;" .. string.format("%3d",fight_table[1][4]) .. "&lt;green&gt; Loss: &lt;white&gt;" .. string.format("%3d",fight_table[1][5]) .. 
				"&lt;green&gt; DmRec: &lt;white&gt;" .. string.format("%7s",parse_damage_received(line_zero,fight_table[1][1])) .. "&lt;green&gt; DmDlt: &lt;white&gt;" .. 
				string.format("%7s",parse_damage_dealt(line_zero,fight_table[1][1])) .. 
				"&lt;green&gt; Cond: &lt;red&gt;" .. fight_table[1][7] .. "\n")

		for i=2,round,1 do
			-- there was a weird error where a round was skipped (when a new enemey butted in?), so i probably have to check for it existing
			if fight_table[i][1] then 
  			cecho("&lt;green&gt;Ln: &lt;white&gt;".. fight_table[i][1].. "&lt;green&gt; Time:&lt;white&gt;" .. string.format("%5.1f",fight_table[i][2]) .. 
  				"&lt;green&gt; Rnd: &lt;white&gt;" .. string.format("%2d",fight_table[i][3]) .. fight_table[i][6] ..
  				"&lt;green&gt; HP: &lt;white&gt;" .. string.format("%3d",fight_table[i][4]) .. "&lt;green&gt; Loss: &lt;white&gt;" .. string.format("%3d",fight_table[i][5]) .. 
  				"&lt;green&gt; DmRec: &lt;white&gt;" .. string.format("%7s",parse_damage_received(fight_table[i-1][1],fight_table[i][1])) .. "&lt;green&gt; DmDlt: &lt;white&gt;" .. 
  				string.format("%7s",parse_damage_dealt(fight_table[i-1][1],fight_table[i][1])) .. 
  				"&lt;green&gt; Cond: &lt;red&gt;" .. fight_table[i][7] .. "\n")
  		end
		end
		
		cecho("&lt;green&gt;Average HP loss per round vs. " .. current_enemy .." is &lt;white&gt;" .. string.format("%.1f",(total_loss/round)) .. "&lt;green&gt;.\n")
		if hit_counter &gt; 0 then
			cecho("&lt;green&gt;Average HP loss per hit is &lt;white&gt;" .. string.format("%.1f",(total_loss/hit_counter)) ..
				 "&lt;green&gt; with a hit probability of &lt;white&gt;".. string.format("%.2f",(hit_counter/round)) .."&lt;green&gt; per round.\n")
		end
		cecho("&lt;green&gt;Approximate total HP loss was &lt;white&gt;" .. (total_loss).. " &lt;green&gt;in &lt;white&gt;" .. round .. 
			" &lt;green&gt;rounds with a total XP gain of &lt;white&gt;".. string.format("%6d",start_xp-tonumber(exptnl)).."&lt;green&gt;.\n")
		
		if is_disarmed == true then disarm_string = "" else disarm_string = "not " end
  	cecho("&lt;green&gt;You were disarmed &lt;white&gt;".. disarm_counter .." times &lt;green&gt;and you quaffed &lt;white&gt;" .. quaff_counter .. "&lt;green&gt; times.\n")
		send(" ")
end

-- *** Let's get a sense of how much damage is reflected by the descriptions ***
function parse_damage_received(l1,l2)
	local lines = getLines(l1,l2)	
  local damages = ""
	local matches = 0
	local i = 1
	for i = 1,#lines,1 do
	  if string.match(lines[i],"%s(%w+)%syou%p") and not string.match(lines[i],"misses") then 
			matches = matches + 1
			if matches &gt; 1 then damages = damages .. " " end
			damages = damages .. string.match(lines[i],"%s(%w+)%syou%p"):sub(1,3) 	 
		end
	end
  return damages
end

function parse_damage_dealt(l1,l2)
	local lines = getLines(l1,l2)	
  local damages = ""
	local matches = 0
	local i = 0
	for i = 1,#lines,1 do
		-- the regexp has to take care of punctuation, underscores and asterisks	
	  if string.match(lines[i], "Your%s%w+%s%W*(%w+)") and not string.match(lines[i],"misses") then 
			matches = matches + 1
			if damages == nil then damages = "" end
			if matches &gt; 1 then damages = damages .. " " end
			damages = damages .. string.match(lines[i], "Your%s%w+%s%W*(%w+)"):sub(1,3)  
		end
	end
  return damages
end

function parse_enemy_condition(l1)
  local condition = "--"
	if string.match(l1,":([%w%s]+)%)") then condition = string.match(l1,":([%w%s]+)%)") end
	if condition == "perfect health" then condition = "Perf" end
	if condition == "slightly scratched" then condition = "Scratch" end
	if condition == "few bruises" then condition = "Bruise" end
	if condition == "some cuts" then condition = "Cuts" end
	if condition == "several wounds" then condition = "Wounds" end
	if condition == "nasty wounds" then condition = "NastyWound" end
	if condition == "bleeding freely" then condition = "Bleeding" end
	if condition == "covered in blood" then condition = "Bloody" end
	if condition == "leaking guts" then condition = "Guts" end
	if condition == "almost dead" then condition = "Gory" end
	if condition == "DYING" then condition = "Dying" end
  return condition
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Spelltrain</name>
					<packageName></packageName>
					<script>ST = {}
function spelltraining()
if STtimer then killTimer(STtimer) end

if ma == max_ma and sleeping then
  send("wake")
  sent = false
  cancast = true
end
if castready == nil then castready = true end

  	if ma &gt; 0 and cancast then
      cc = 0
      if castready then
        for k in ipairs(ST) do
          send("c ".. ST[k])
  	     cc = cc + 1
         castready = false
        end
        x = (cc * 5)
        
      else
        
        
        STtimer = tempTimer(x,[[
          castready = true
          send("\n", false)
        ]])
        
      end
            
  	else
      if not sent then
        if not sleeping then send("sleep") end
        sent = true
      end
  	end


end </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Set Enemy Icon</name>
					<packageName></packageName>
					<script>function setenemyicon()
  
  if string.match(current_enemy, "kobold") then
    enemyicon:show()
    enemyiconbackground:show()
    enemyicon:setStyleSheet([[
      background-color: ]]..menu.transparent..[[;
      border-image: url("]]..home..[[/RoD_UI/icons/Kobold.png");
    ]])
    enemyiconbackground:setStyleSheet([[
      background-color: ]]..menu.transparent..[[;
      border-image: url("]]..home..[[/RoD_UI/icons/SquareBorder.png");
    ]])
    
  elseif string.match(current_enemy, "goblin") then
    enemyicon:show()
    enemyiconbackground:show()
    echo("found goblin")
    enemyicon:setStyleSheet([[
      background-color: ]]..menu.transparent..[[;
      border-image: url("]]..home..[[/RoD_UI/icons/Goblin.png");
    ]])
    enemyiconbackground:setStyleSheet([[
      background-color: ]]..menu.transparent..[[;
      border-image: url("]]..home..[[/RoD_UI/icons/SquareBorder.png");
    ]])
  else
    enemyicon:hide()
    enemyiconbackground:hide()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>attacking</name>
					<packageName></packageName>
					<script>function attacking()
echo("\nqueue = "..queue)
  if class == "Vampire" then
    if bp &gt; (bp / 2) then
      send("c "..attack)
    else
      send("feed")
    end
  else
    send(attack)
  end
  
  if queuetrigger then killTrigger(queuetrigger) end
  queuetrigger = tempRegexTrigger("^Your (.*) (.*) a (.*)!", [[
  
    if string.match(matches[2], attack) then 
      queue = (queue - 1)
     
    end
  
  ]])

end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>MSDP</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Populate MSDP</name>
					<packageName></packageName>
					<script>function populateMSDP()
sendMSDP("SEND", "SERVER_ID")
sendMSDP("REPORT", "CHARACTER_NAME")
sendMSDP("REPORT", "CLASS")
sendMSDP("REPORT", "RACE")
sendMSDP("REPORT", "LEVEL")
--sendMSDP("SEND", "SERVER_TIME")
--sendMSDP("REPORT", "AFFECTS")  --Sends an invalidJSONinput: lexical error, char (BEL) after affect time
sendMSDP("REPORT", "ALIGNMENT")
sendMSDP("REPORT", "EXPERIENCE_MIN")
sendMSDP("REPORT", "EXPERIENCE_MAX")
sendMSDP("REPORT", "EXPERIENCE")
sendMSDP("REPORT", "EXPERIENCE_TNL")
sendMSDP("REPORT", "HEALTH")
sendMSDP("REPORT", "HEALTH_MAX")
sendMSDP("REPORT", "MANA")
sendMSDP("REPORT", "MANA_MAX")
sendMSDP("REPORT", "WIMPY")
--sendMSDP("SEND", "PRACTICE")
sendMSDP("REPORT", "MONEY")
sendMSDP("REPORT", "MOVEMENT")
sendMSDP("REPORT", "MOVEMENT_MAX")
sendMSDP("REPORT", "BLOOD")
sendMSDP("REPORT", "HITROLL")
sendMSDP("REPORT", "DAMROLL")
sendMSDP("REPORT", "AC")
sendMSDP("REPORT", "STR")
sendMSDP("REPORT", "INT")
sendMSDP("REPORT", "WIS")
sendMSDP("REPORT", "DEX")
sendMSDP("REPORT", "CON")
sendMSDP("REPORT", "CHA")
sendMSDP("REPORT", "LCK")
sendMSDP("REPORT", "STR_PERM")
sendMSDP("REPORT", "INT_PERM")
sendMSDP("REPORT", "WIS_PERM")
sendMSDP("REPORT", "DEX_PERM")
sendMSDP("REPORT", "CON_PERM")
sendMSDP("REPORT", "CHA_PERM")
sendMSDP("REPORT", "LCK_PERM")
sendMSDP("REPORT", "FAVOR")
--sendMSDP("REPORT", "FLYING") 
--sendMSDP("REPORT", "VIS")
sendMSDP("REPORT", "AUCTION")
sendMSDP("REPORT", "WAIT_TIME")
--sendMSDP("REPORT", "INVIS")
sendMSDP("REPORT", "ADRENALINE")
--sendMSDP("REPORT", "AUTOSAC")
sendMSDP("REPORT", "COMBAT_STYLE")
sendMSDP("REPORT", "PLAYER_COUNT")
sendMSDP("REPORT", "PLAYERS_PEAK")
sendMSDP("REPORT", "GEO")
sendMSDP("REPORT", "PKILLER_COUNT")
sendMSDP("REPORT", "WEIGHT")
sendMSDP("REPORT", "WEIGHT_MAX")
sendMSDP("REPORT", "OPPONENT_HEALTH")
sendMSDP("REPORT", "OPPONENT_HEALTH_MAX")
sendMSDP("REPORT", "OPPONENT_LEVEL")
sendMSDP("REPORT", "OPPONENT_NAME")
sendMSDP("REPORT", "AREA_NAME")
sendMSDP("REPORT", "ROOM_TERRAIN")
--sendMSDP("REPORT", "ROOM_EXITS") room exits are failing also
      --  &lt;Lua error:InvalidJSONInput: lexical error: invalid character inside string.
        --                        "north,O￼␇south,O"
          --           (right here) ------^

sendMSDP("REPORT", "ROOM_NAME")
sendMSDP("REPORT", "ROOM_VNUM")
sendMSDP("REPORT", "WORLD_TIME")
sendMSDP("SEND", "CLIENT_ID")
sendMSDP("SEND", "CLIENT_VERSION")
sendMSDP("SEND", "PLUGIN_ID")
sendMSDP("REPORT", "ANSI_COLORS")
sendMSDP("REPORT", "XTERM_256_COLORS")
sendMSDP("REPORT", "UTF_8")
sendMSDP("REPORT", "SOUND")
sendMSDP("REPORT", "MXP")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getclass</name>
					<packageName></packageName>
					<script>function getclass()
  class = msdp.CLASS
end</script>
					<eventHandlerList>
						<string>msdp.CLASS</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getrace</name>
					<packageName></packageName>
					<script>function getrace()
  race = msdp.RACE
end </script>
					<eventHandlerList>
						<string>msdp.RACE</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getname</name>
					<packageName></packageName>
					<script>function getname()
  name = msdp.CHARACTER_NAME
  scorename:echo("&lt;center&gt;"..name)
end</script>
					<eventHandlerList>
						<string>msdp.CHARACTER_NAME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getexp</name>
					<packageName></packageName>
					<script>function getexp()
  exp = tonumber(msdp.EXPERIENCE)
local expstr = msdp.EXPERIENCE
local val = expstr:len()
local cap1 = val - 2 --last 3
local cap2 = val - 5 -- 6
  if val &lt;= 3 then
   
  elseif val &gt;= 7 then

    local third = string.format(string.sub(expstr, cap1, val))

    local stop = cap1 - 1

    local second = string.format(string.sub(expstr, cap2, stop))
  
    stop = cap2 - 1

    local first = string.format(string.sub(expstr, 1, stop))    

    expstr = first..","..second..","..third

  else

    local second = string.format(string.sub(expstr, cap1, val))

    local stop = cap1 - 1

    local first = string.format(string.sub(expstr, 1,stop ))

    expstr = first..","..second


end
    Leveltitle:echo([[&lt;center&gt;]]..expstr..[[ / ]]..expmaxstr..[[ &lt;span style = "color: gold;font: bold 18px"&gt;EXP&lt;/span&gt;]])

end

</script>
					<eventHandlerList>
						<string>msdp.EXPERIENCE</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getexpmin</name>
					<packageName></packageName>
					<script>function getexpmin()
expmin = tonumber(msdp.EXPERIENCE_MIN)
end</script>
					<eventHandlerList>
						<string>msdp.EXPERIENCE_MIN</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getexpmax</name>
					<packageName></packageName>
					<script>function getexpmax()
expmax = tonumber(msdp.EXPERIENCE_MAX)
expmaxstr = msdp.EXPERIENCE_MAX
local val = tonumber(expmaxstr:len())
local cap1 = val - 2 --last 3 digits
local cap2 = val - 5 -- next 3, I assume you cant get over a billion exp?
  if val &lt; 4 then
   
  elseif val &gt; 6 then

    local third = string.format(string.sub(expmaxstr, cap1, val))

    local stop = cap1 - 1

    local second = string.format(string.sub(expmaxstr, cap2, stop))
  
    stop = cap2 - 1

    local first = string.format(string.sub(expmaxstr, 1, stop))    

    expmaxstr = first..","..second..","..third

  else

    local second = string.format(string.sub(expmaxstr, cap1, val))

    local stop = cap1 - 1

    local first = string.format(string.sub(expmaxstr, 1,stop ))

    expmaxstr = first..","..second


end

end
</script>
					<eventHandlerList>
						<string>msdp.EXPERIENCE_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getalign</name>
					<packageName></packageName>
					<script>function getalign()
  align = msdp.ALIGNMENT
  stats.Alignvalue:echo(align)
end</script>
					<eventHandlerList>
						<string>msdp.ALIGNMENT</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getexptnl</name>
					<packageName></packageName>
					<script>function getexptnl()
exptnl = tonumber(msdp.EXPERIENCE_TNL)
local barmax = (expmax - expmin)
local barat = (exp - expmin) 
local pass = string.match(tostring((barat / barmax)), "%d\.(%d%d)")

levelguage:setValue(barat, barmax)
levelpercent:echo([[&lt;span style = "color: gold;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;%&lt;/span&gt;]])

end</script>
					<eventHandlerList>
						<string>msdp.EXPERIENCE_TNL</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>gethealth</name>
					<packageName></packageName>
					<script>function gethealth()
  hp = tonumber(msdp.HEALTH)
  statusHealth:setValue(hp, max_hp)
  local math = (hp / max_hp)
  local pass = string.match(tostring((hp / max_hp)), "%d\.(%d%d)")
  if pass then
    healthpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
    healthpercent:raise()
  else
    healthpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
    healthpercent:raise()
  end
end

</script>
					<eventHandlerList>
						<string>msdp.HEALTH</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxhealth</name>
					<packageName></packageName>
					<script>function getmaxhealth()
  max_hp = tonumber(msdp.HEALTH_MAX)
  statusHealth:setValue(hp, max_hp)
end</script>
					<eventHandlerList>
						<string>msdp.HEALTH_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getlevel</name>
					<packageName></packageName>
					<script>function getlevel()
  level = tonumber(msdp.LEVEL)
  scoreinfo:echo("&lt;center&gt;Level "..level.." "..race.." "..class)
end</script>
					<eventHandlerList>
						<string>msdp.LEVEL</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmana</name>
					<packageName></packageName>
					<script>function getmana()
  ma = tonumber(msdp.MANA)
  local math = (ma / max_ma)
  local pass = string.match(tostring((ma / max_ma)), "%d\.(%d%d)")
  if usemana then
    statusMana:setValue(ma, max_ma)
    if pass then
      manapercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
    else
      manapercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
    end
  end
  
  if ma == max_ma and is_training then
      send("\n", false)
      moveCursor(0,getLineCount()-1)
      deleteLine()
  end
end
</script>
					<eventHandlerList>
						<string>msdp.MANA</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxmana</name>
					<packageName></packageName>
					<script>function getmaxmana()
  max_ma = tonumber(msdp.MANA_MAX)
  if usemana then statusMana:setValue(ma, max_ma) end
end
</script>
					<eventHandlerList>
						<string>msdp.MANA_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getgold</name>
					<packageName></packageName>
					<script>function getgold()
  gold = msdp.MONEY
  stats.Goldvalue:echo(gold)
end</script>
					<eventHandlerList>
						<string>msdp.MONEY</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmovement</name>
					<packageName></packageName>
					<script>function getmovement()
  mv = tonumber(msdp.MOVEMENT)
  statusMovement:setValue(mv, max_mv)
  local math = (mv / max_mv)
  local pass = string.match(tostring((mv / max_mv)), "%d\.(%d%d)")
  if pass then
    movementpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
  else
    movementpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
  end
end</script>
					<eventHandlerList>
						<string>msdp.MOVEMENT</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxmovement</name>
					<packageName></packageName>
					<script>function getmaxmovement()
  max_mv = tonumber(msdp.MOVEMENT_MAX)
  statusMovement:setValue(mv, max_mv)
  getmovement()
end</script>
					<eventHandlerList>
						<string>msdp.MOVEMENT_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getblood</name>
					<packageName></packageName>
					<script>function getblood()
  bp = tonumber(msdp.BLOOD)
  max_bp = (tonumber(level) + 10)
  if useblood then statusBlood:setValue(bp, max_bp) end
  local math = (bp / max_bp)
  local pass = string.match(tostring((bp / max_bp)), "%d\.(%d%d)")
  if pass then
    bloodpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
  else
    bloodpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
  end
end
</script>
					<eventHandlerList>
						<string>msdp.BLOOD</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxblood</name>
					<packageName></packageName>
					<script>function getmaxblood()
  max_bp = tonumber(msdp.BLOOD_MAX)
  if useblood then statusBlood:setValue(bp, max_bp) end
end
</script>
					<eventHandlerList>
						<string>msdp.BLOOD_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>gethitroll</name>
					<packageName></packageName>
					<script>function gethitroll()
  hitroll = msdp.HITROLL
  stats.Hitrollvalue:echo(hitroll)
end</script>
					<eventHandlerList>
						<string>msdp.HITROLL</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getdamroll</name>
					<packageName></packageName>
					<script>function getdamroll()
  damroll = msdp.DAMROLL
  stats.Damrollvalue:echo(damroll)
end</script>
					<eventHandlerList>
						<string>msdp.DAMROLL</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getac</name>
					<packageName></packageName>
					<script>function getac()
  ac = msdp.AC
  stats.Armorvalue:echo(ac)
end</script>
					<eventHandlerList>
						<string>msdp.AC</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getweight</name>
					<packageName></packageName>
					<script>function getweight()
  wt = tonumber(msdp.WEIGHT)
  local math = (wt / max_wt)
  local pass = string.match(tostring((wt / max_wt)), "%d\.(%d%d)")
  if wt &lt;= max_wt then 
    statusWeight:setValue(wt, max_wt)
    if pass then
      weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
      statusWeight.front:echo("")
    else
      weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
      statusWeight.front:echo([[&lt;span style = "color: red;font: bold 16px"&gt;     AT YOUR WEIGHT LIMIT&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;&lt;/span&gt;]])
    end
  else
    weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%+&lt;/span&gt;]])
    statusWeight:setValue(1, 1)
    statusWeight.front:echo([[&lt;span style = "color: red;font: bold 16px"&gt;     OVER YOUR WEIGHT LIMIT&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;&lt;/span&gt;]])
  end
end

  
  </script>
					<eventHandlerList>
						<string>msdp.WEIGHT</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxweight</name>
					<packageName></packageName>
					<script>function getmaxweight()
  max_wt = tonumber(msdp.WEIGHT_MAX)
  local math = (wt / max_wt)
  local pass = string.match(tostring((wt / max_wt)), "%d\.(%d%d)")
  if wt &lt;= max_wt then 
    statusWeight:setValue(wt, max_wt)
    if pass then
      weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
      statusWeight.front:echo("")
    else
      weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
      statusWeight.front:echo([[&lt;span style = "color: red;font: bold 16px"&gt;     AT YOUR WEIGHT LIMIT&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;&lt;/span&gt;]])
    end
  else
    weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;100&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%+&lt;/span&gt;]])
    statusWeight:setValue(1, 1)
    statusWeight.front:echo([[&lt;span style = "color: red;font: bold 16px"&gt;     OVER YOUR WEIGHT LIMIT&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;&lt;/span&gt;]])
  end
end</script>
					<eventHandlerList>
						<string>msdp.WEIGHT_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getenemyhealth</name>
					<packageName></packageName>
					<script>function getenemyhealth()
  ehp = tonumber(msdp.OPPONENT_HEALTH)
  statusEnemy:setValue(ehp, max_ehp)
  local math = (ehp / max_ehp)
  local pass = string.match(tostring((ehp / max_ehp)), "%d\.(%d%d)")
  
    enemypercent:echo([[&lt;span style = "color: gold;font: bold 16px"&gt;]]..pass..[[&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;%&lt;/span&gt;]])
  
end</script>
					<eventHandlerList>
						<string>msdp.OPPONENT_HEALTH</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getmaxenemyhealth</name>
					<packageName></packageName>
					<script>function getmaxenemyhealth()
  max_ehp = tonumber(msdp.OPPONENT_HEALTH_MAX)
end</script>
					<eventHandlerList>
						<string>msdp.OPPONENT_HEALTH_MAX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getenemyname</name>
					<packageName></packageName>
					<script>function getenemyname()
  enemyfull = msdp.OPPONENT_NAME
  enemy = enemyfull:match("%s*(%S+)$")
  menu.Targettitle:echo(enemy)
  enemyname:echo("&lt;center&gt;"..enemyfull)
  
end


</script>
					<eventHandlerList>
						<string>msdp.OPPONENT_NAME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getstrbase</name>
					<packageName></packageName>
					<script>function getstrbase()
  strbase = msdp.STR_PERM
  stats.baseSTR:echo("&lt;center&gt;("..strbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.STR_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getintbase</name>
					<packageName></packageName>
					<script>function getintbase()
  intbase = msdp.INT_PERM
  stats.baseINT:echo("&lt;center&gt;("..intbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.INT_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getwisbase</name>
					<packageName></packageName>
					<script>function getwisbase()
  wisbase = msdp.WIS_PERM
  stats.baseWIS:echo("&lt;center&gt;("..wisbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.WIS_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getdexbase</name>
					<packageName></packageName>
					<script>function getdexbase()
  dexbase = msdp.DEX_PERM
  stats.baseDEX:echo("&lt;center&gt;("..dexbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.DEX_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getconbase</name>
					<packageName></packageName>
					<script>function getconbase()
  conbase = msdp.CON_PERM
  stats.baseCON:echo("&lt;center&gt;("..conbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.CON_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getchabase</name>
					<packageName></packageName>
					<script>function getchabase()
  chabase = msdp.CHA_PERM
  stats.baseCHA:echo("&lt;center&gt;("..chabase..")")
end</script>
					<eventHandlerList>
						<string>msdp.CHA_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getlckbase</name>
					<packageName></packageName>
					<script>function getlckbase()
  lckbase = msdp.LCK_PERM
  stats.baseLCK:echo("&lt;center&gt;("..lckbase..")")
end</script>
					<eventHandlerList>
						<string>msdp.LCK_PERM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getstr</name>
					<packageName></packageName>
					<script>function getstr()
  str = msdp.STR
  stats.currentSTR:echo("&lt;center&gt;"..str)
end</script>
					<eventHandlerList>
						<string>msdp.STR</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getint</name>
					<packageName></packageName>
					<script>function getint()
  int = msdp.INT
  stats.currentINT:echo("&lt;center&gt;"..int)
end</script>
					<eventHandlerList>
						<string>msdp.INT</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getwis</name>
					<packageName></packageName>
					<script>function getwis()
  wis = msdp.WIS
  stats.currentWIS:echo("&lt;center&gt;"..wis)
end</script>
					<eventHandlerList>
						<string>msdp.WIS</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getdex</name>
					<packageName></packageName>
					<script>function getdex()
  dex = msdp.DEX
  stats.currentDEX:echo("&lt;center&gt;"..dex)
end</script>
					<eventHandlerList>
						<string>msdp.DEX</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getcon</name>
					<packageName></packageName>
					<script>function getcon()
  con = msdp.CON
  stats.currentCON:echo("&lt;center&gt;"..con)
end</script>
					<eventHandlerList>
						<string>msdp.CON</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getcha</name>
					<packageName></packageName>
					<script>function getcha()
  cha = msdp.CHA
  stats.currentCHA:echo("&lt;center&gt;"..cha)
end</script>
					<eventHandlerList>
						<string>msdp.CHA</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getlck</name>
					<packageName></packageName>
					<script>function getlck()
  lck = msdp.LCK
  stats.currentLCK:echo("&lt;center&gt;"..lck)
end</script>
					<eventHandlerList>
						<string>msdp.LCK</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getaffects</name>
					<packageName></packageName>
					<script>function getaffects()
affects = msdp.AFFECTS
end</script>
					<eventHandlerList>
						<string>msdp.AFFECTS</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getfavor</name>
					<packageName></packageName>
					<script>function getfavor()
favor = msdp.FAVOR
stats.Favorvalue:echo(favor)
end</script>
					<eventHandlerList>
						<string>msdp.FAVOR</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>gettime</name>
					<packageName></packageName>
					<script>function gettime()
  if tonumber(msdp.WORLD_TIME) &lt;= 11 then
    menu.Time:echo(msdp.WORLD_TIME..":00 AM")
  elseif tonumber(msdp.WORLD_TIME) == 12 then
    menu.Time:echo("12:00 PM")
  else
    local time = (tonumber(msdp.WORLD_TIME) - 12)
    menu.Time:echo(time..":00 PM")
  end
end</script>
					<eventHandlerList>
						<string>msdp.WORLD_TIME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getwaittime</name>
					<packageName></packageName>
					<script>function getwaittime()
  menu.WaitTime:echo("Wait: "..msdp.WAIT_TIME)
end</script>
					<eventHandlerList>
						<string>msdp.WAIT_TIME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getroomname</name>
					<packageName></packageName>
					<script>function getroomname()
  room = msdp.ROOM_NAME
  menu.Room:echo(msdp.ROOM_NAME)
end</script>
					<eventHandlerList>
						<string>msdp.ROOM_NAME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getarea</name>
					<packageName></packageName>
					<script>function getarea()
  menu.Area:echo(msdp.AREA_NAME)
end</script>
					<eventHandlerList>
						<string>msdp.AREA_NAME</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getstyle</name>
					<packageName></packageName>
					<script>function getstyle()
  style = msdp.COMBAT_STYLE
  if style == "A" then
    menu.Style:echo("Style: Agg")
  elseif style == "E" then
    menu.Style:echo("Style: Eva")
  elseif style == "D" then
    menu.Style:echo("Style: Def")
  elseif style == "S" then
    menu.Style:echo("Style: Sta")
  elseif style == "B" then
    menu.Style:echo("Style: Ber")
  end
end</script>
					<eventHandlerList>
						<string>msdp.COMBAT_STYLE</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getflying</name>
					<packageName></packageName>
					<script>function getflying()
  flying = msdp.FLYING
  if flying then 
    menu.Flying:echo("Flying: Yes")
  else
    menu.Flying:echo("Flying: No")
  end
end</script>
					<eventHandlerList>
						<string>msdp.FLYING</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getwimpy</name>
					<packageName></packageName>
					<script>function getwimpy()
  wimpy = msdp.WIMPY
  menu.Wimpy:echo("Wimpy: "..wimpy.." HP")
end</script>
					<eventHandlerList>
						<string>msdp.WIMPY</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getvis</name>
					<packageName></packageName>
					<script>function getvis()
  vis = msdp.VIS
  menu.Vis:echo(vis)
end</script>
					<eventHandlerList>
						<string>msdp.VIS</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getinvis</name>
					<packageName></packageName>
					<script>function getinvis()
  invis = msdp.INVIS
  menu.Invis:echo(invis)
end</script>
					<eventHandlerList>
						<string>msdp.INVIS</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getautosac</name>
					<packageName></packageName>
					<script>function getautosac()
  autosac = msdp.AUTOSAC
  if autosac == nil or "" then
    menu.AutoSac:echo("Autosac: OFF")

  elseif autosac == "Autosac" then
    menu.AutoSac:echo("Autosac: ON")

  end
end</script>
					<eventHandlerList>
						<string>msdp.AUTOSAC</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getgeo</name>
					<packageName></packageName>
					<script>function getgeo()
  geo = msdp.GEO
  --menu.Geo:echo(geo)
end</script>
					<eventHandlerList>
						<string>msdp.GEO</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getroomterrain</name>
					<packageName></packageName>
					<script>function getroomterrain()
  terrain = msdp.ROOM_TERRAIN
 -- menu.Terrain:echo(terrain)
end</script>
					<eventHandlerList>
						<string>msdp.ROOM_TERRAIN</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getvnum</name>
					<packageName></packageName>
					<script>function getvnum()
  vnum = msdp.ROOM_VNUM
  --menu.VNUM:echo(vnum)
end</script>
					<eventHandlerList>
						<string>msdp.ROOM_VNUM</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>getexits</name>
					<packageName></packageName>
					<script>function getexits()
  exits = msdp.ROOM_EXITS
  menu.Exits:echo(exits)
end</script>
					<eventHandlerList>
						<string>msdp.ROOM_EXITS</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>UI</name>
				<packageName></packageName>
				<script>

home = getMudletHomeDir()
-- Main container/Whole screen
ui = Geyser.Container:new({
  name = "ui",    
  x=0, y=0,                   
  width = "100%", height="100%", 
})

-- Holding Container for hiding
holding = Geyser.Label:new({
  name = "holding",    
  x="100%", y="100%",                   
  width = "0%", height="0%", 
},ui)

-- Preload some settings for the bars
statusbackground = CSSMan.new([[
  background-color: rgba(20,20,20,100%);
]])
statusGaugeBackCSS = CSSMan.new([[
  background-color: rgba(100%,100%,100%,0);
  border-style: solid;
  border-color: white;
  border-width: 1px;
  border-radius: 5px;
]])
statusGaugeFrontCSS = CSSMan.new([[
  background-color: rgba(100%,100%,100%,100%); 
  border-style: solid;
  border-color: white;
  border-width: 1px;
  border-radius: 5px;
  margin: 5px;
]])



function hidemap()
if maphidden == nil then maphidden = true end
  if maphidden then
    maplabel:hide()
    mappercontainer:show()
    maphidden = false
  else
    maplabel:show()
    mappercontainer:hide()
    maphidden = true
  end
end -- function hidemap()
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Show UI checkbox</name>
					<packageName></packageName>
					<script>-- UI checkbox
toggleui = Geyser.Label:new({
  name = "toggleui",
  x = "94.7%", y = "98%",
  width = "21px", height = "19px"
})

toggleui:setStyleSheet([[
  background-color: rgba(0,0,0,0%);
]])

toggleui:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/checkbox_ticked.png");
]])
toggleui:setClickCallback("on_showui_press")

function on_showui_press()
  if showui_ticked then
    showui_ticked = false
    toggleui:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/checkbox_unticked.png");
]])
    cecho("&lt;white&gt;UI is &lt;red&gt;OFF&lt;white&gt;!\n")
    ui:hide()
    if statusHealth then statusHealth:hide() end
    if statusWeight then statusWeight:hide() end
    if statusMana then statusMana:hide() end
    if statusBlood then statusBlood:hide() end
    if statusEnemy then statusEnemy:hide() end
    if statusMovement then statusMovement:hide() end
    popupmap:hide()
    --setBorderLeft(0)
    setBorderTop(0)
    setBorderBottom(0)
    --setBorderRight(0)
    else
    showui_ticked = true
    toggleui:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/checkbox_ticked.png");
]])
    cecho("&lt;white&gt;UI is &lt;green&gt;ON&lt;white&gt;!\n")
    local w,h = getMainWindowSize()
    --setBorderLeft(w/4)
    setBorderTop(h/14)
    setBorderBottom(h/10)
    --setBorderRight(w/4)
    ui:show()
    if statusHealth then statusHealth:show() end
    if statusWeight then statusWeight:show() end
    if statusMana then statusMana:show() end
    if statusBlood then statusBlood:show() end
    if is_fighting then statusEnemy:show() end
    if statusMovement then statusMovement:show() end
    popupmap:show()
  end
end
toggleuilabel = Geyser.Label:new({
  name = "toggleuilabel",
  x = "96%", y = "98.5%",
  width = "4%", height = "2%",
  fgColor = "red",
  color = "black",
  message = [[Show UI]]
})
toggleuilabel:setFontSize(8)
-- end of showui checkbox
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Menu UI</name>
					<packageName></packageName>
					<script>menu.current = menu.current or menu.tabs[1]

menu.container = menu.container or Adjustable.Container:new({
  name = "menu.back",
  x = "78%", y = "58%",
  width = "20%",
  height = "40%",
  adjLabelstyle = "background-color:rgba(0, 0, 0,0%); border: 2px groove grey;",
  titleText = "",
  padding = 4,
}, ui)

menu.header = Geyser.HBox:new({
  name = "menu.header",
  x = 0, y = 0,
  width = "100%",
  height = "10%",
},menu.container)

menu.footer = Geyser.Label:new({
  name = "menu.footer",
  x = 0, y = "10%",
  width = "100%",
  height = "90%",
},menu.container)
menu.footer:setStyleSheet([[
  background-color: ]]..menu.transparent..[[;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
]])

menu.center = Geyser.Label:new({
  name = "menu.center",
  x = 0, y = 0,
  width = "100%",
  height = "100%",
},menu.footer)
menu.center:setStyleSheet([[
  background-color: ]]..menu.transparent..[[;
  border-radius: 10px;
  margin: 5px;
]])

for k,v in pairs(menu.tabs) do

    -- ***make tabs***
  menu[v.."tab"] = Geyser.Label:new({
    name = "menu."..v.."tab",
    fontSize = 12,
  },menu.header)
  menu[v.."tab"]:setStyleSheet([[
    background-color: ]]..menu.dark_blue..[[;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    font: bold 10px;
    margin-right: 1px;
    margin-left: 1px;
  ]])
  
  -- ***name and click handling***
  menu[v.."tab"]:echo("&lt;center&gt;"..v)
  menu[v.."tab"]:setClickCallback("menu.click",v)
  
  -- ***tab background****
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },menu.footer)
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
  ]])
  
  -- ***tab center***
  menu[v.."center"] = Geyser.Label:new({
    name = "menu."..v.."center",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },menu[v])
  menu[v.."center"]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 10px;
    margin: 5px;
  ]])
  
  -- ***hide them all***
  menu[v]:hide()
end

function menu.click(tab)
  menu[menu.current]:hide()
  menu.current = tab
  menu[menu.current]:show()
end

menu.click("Chat")
menu.click("Group")
menu.click("Inventory")
menu.click("Config")
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Chat/Group/Inv</name>
						<packageName></packageName>
						<script>
chat_window = Geyser.MiniConsole:new({
  name="chat_window",
  x=0, y="1%",
  autoWrap = true,
	fgColor = "green",
  scrollBar = false,
  fontSize = 8,
  color = "black",
  width="100%", height="100%",
}, menu.Chatcenter)
clearWindow("chat_window")
chat_window:echo("chat window\n")


group_window = Geyser.MiniConsole:new({
  name="group_window",
  x=0, y=0,
  --autoWrap = false,
  wrap = false,
  scrollBar = false,
  fontSize = 8,
  color = "black",
  width="100%", height="100%",
},menu.Groupcenter)
clearWindow("group_window")
group_window:cecho("group window&lt;red&gt; NOT FINISHED")


inventory = Geyser.MiniConsole:new({
  name="inventory",
  x=0, y=0,
  autoWrap = true,
  scrollBar = false,
  fontSize = 11,
  color = "black",
  width="100%", height="100%",
}, menu.Inventorycenter)
inventory:setColor(0,0,0,250)
inventory:cecho("&lt;red&gt; Still WIP")

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Config</name>
						<packageName></packageName>
						<script>configBackground = Geyser.Label:new({
    name = "configBackground",
    x = 0, y = "0%",
    width = "100%",
    height = "62%",
    },menu.Configcenter)
configBackground:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
  ]])

configcheckboxes = Geyser.Label:new({
  name = "configcheckboxes",
  x = 0, y = 0,
  width = "10%",
  height = "100%",
},configBackground)
configcheckboxes:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
  ]])
configcheckboxes2 = Geyser.Label:new({
  name = "configcheckboxes2",
  x = "50%", y = 0,
  width = "10%",
  height = "100%",
},configBackground)
configcheckboxes2:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
  ]])
checkboxes = Geyser.VBox:new({
  name = "checkboxes",
  x = "20%", y = "0%",
  width = "100%",
  height = "100%",
},configcheckboxes)
checkboxes2 = Geyser.VBox:new({
  name = "checkboxes2",
  x = "20%", y = "0%",
  width = "100%",
  height = "100%",
},configcheckboxes2)
configsetting = Geyser.Label:new({
  name = "configsetting",
  x = "10%", y = "0%",
  width = "37%",
  height = "100%",
},configBackground)
configsetting:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
  ]])
configsetting2 = Geyser.Label:new({
  name = "configsetting2",
  x = "60%", y = "0%",
  width = "37%",
  height = "100%",
},configBackground)
configsetting2:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
  ]])
setting = Geyser.VBox:new({
  name = "setting",
  x = 0, y = "1%",
  width = "100%",
  height = "100%",
},configsetting)
setting2 = Geyser.VBox:new({
  name = "setting2",
  x = 0, y = "1%",
  width = "100%",
  height = "100%",
},configsetting2)



function togglecheckbox(check)
if check == "FR" then
  if fightreports_ticked then
    fightreports_ticked = false
    hidecheck = false
    cecho("&lt;white&gt;Fight reporting &lt;red&gt;OFF&lt;white&gt;!\n")
  else
    fightreports_ticked = true
    hidecheck = true
    cecho("&lt;white&gt;Fight reporting &lt;green&gt;ON&lt;white&gt;!\n")
  end
  
elseif check == "MR" then

  if tickreports_ticked then
    tickreports_ticked = false
    hidecheck = false
    cecho("&lt;white&gt;Mana Tick Tracker &lt;red&gt;OFF&lt;white&gt;!\n")
    is_tick_tracking = false
  else
    tickreports_ticked = true
    hidecheck = true
    cecho("&lt;white&gt;Mana Tick Tracker &lt;green&gt;ON&lt;white&gt;!\n")
    is_tick_tracking = true
  end
  
elseif check == "AA" then

  if autoattack_ticked then
    autoattack_ticked = false
    hidecheck = false
    cecho("&lt;white&gt;Auto Attacking is &lt;red&gt;OFF&lt;white&gt;!\n")
    
  else
    autoattack_ticked = true
    hidecheck = true
    cecho("&lt;white&gt;Auto Attacking is &lt;green&gt;ON&lt;white&gt;!\n")
    
  end

elseif check == "AQ" then

  if quaffreports_ticked then
    quaffreports_ticked = false
    hidecheck = false
    cecho("&lt;white&gt;Auto Quaffing &lt;red&gt;OFF&lt;white&gt;!\n")
    is_quaffable = false
  else
    quaffreports_ticked = true
    is_quaffable = true
    hidecheck = true
    cecho("&lt;white&gt;Auto Quaffing &lt;green&gt;ON&lt;white&gt;!\n")
    if container == "none" then cecho("\n&lt;white&gt;Please set your container with &lt;DeepSkyBlue&gt;sc *&lt;white&gt;!") end
    if heal == "none" then cecho("\n&lt;white&gt;Please set your healing item with &lt;DeepSkyBlue&gt;sp *&lt;white&gt;!") end
    if quafftrigger == 0 then cecho("\n&lt;white&gt;Please set your heal limit with &lt;DeepSkyBlue&gt;sh *&lt;white&gt;!\n") end
  end
elseif check == "ST" then

  if is_training then
    is_training = false
    hidecheck = false
    cecho("&lt;white&gt;Spell Training &lt;red&gt;OFF&lt;white&gt;!\n")
    disableTrigger("afk sleep")
  else
    is_training = true
    hidecheck = true
    enableTrigger("afk sleep")
    cecho("&lt;white&gt;Spell Training &lt;green&gt;ON&lt;white&gt;!\n")
    if not table.contains(ST) then cecho("&lt;white&gt;Please set a spell to train! Use &lt;DeepSkyBlue&gt;train ?&lt;white&gt; for help!\n") end
  end
elseif check == "SB" then

  if spellbot then
    spellbot = false
    hidecheck = false
    cecho("&lt;white&gt;Spell Bot is &lt;red&gt;OFF&lt;white&gt;!\n")
  else
    spellbot = true
    hidecheck = true
    cecho("&lt;white&gt;Spell Bot is &lt;green&gt;ON&lt;white&gt;!\n")
  end 
elseif check == "LM" then

  if maplocked then
    maplocked = false
    hidecheck = false
    popupmap:unlockContainer()
    cecho("&lt;white&gt;Map has been &lt;green&gt;UNLOCKED&lt;white&gt;!\n")    
  else
    maplocked = true
    hidecheck = true
    popupmap:lockContainer()
    cecho("&lt;white&gt;Map has been &lt;red&gt;LOCKED&lt;white&gt;!\n")
  end
elseif check == "LC" then

  if configlocked then
    configlocked = false
    hidecheck = false
    menu.container:unlockContainer()
    cecho("&lt;white&gt;Config window has been &lt;green&gt;UNLOCKED&lt;white&gt;!\n")    
  else
    configlocked = true
    hidecheck = true
    menu.container:lockContainer()
    cecho("&lt;white&gt;Config window has been &lt;red&gt;LOCKED&lt;white&gt;!\n")
  end  
end
    
if hidecheck then

    menu[check]:setStyleSheet([[
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_ticked.png");
      ]])
else
    menu[check]:setStyleSheet([[
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_unticked.png");
      ]])
end
end --function togglecheckbox
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>left</name>
							<packageName></packageName>
							<script>for k,v in pairs(menu.checkboxleft) do

    -- ***make config checkboxes***
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = "10%", y = "0%",
  },checkboxes)
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_unticked.png");
  ]])
  menu[v]:setClickCallback("togglecheckbox",v)

end


for k,v in pairs(menu.titleleft) do
 
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    width = "40%",
    fgColor = "red",
    fontSize = 10,
  },setting)
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.black..[[;
    border-style: outset;
    border-width: 2px;
    border-radius: 10px;
    border-color: blue;
    font: bold 12px;
    padding: 0px;
    margin-right: 1px;
    margin-left: 1px;
  ]])
   
   
    -- ***name***
    menu[v]:echo(v)
    
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>right</name>
							<packageName></packageName>
							<script>
for k,v in pairs(menu.checkboxright) do

    -- ***make config checkboxes***
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = "10%", y = "0%",
  },checkboxes2)
  menu[v]:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_unticked.png");
  ]])
  menu[v]:setClickCallback("togglecheckbox",v)
end
menu.LC:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
    margin-right: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
    margin-left: 6px;
    border-image: url("]]..home..[[/RoD_UI/checkbox_ticked.png");
  ]])
for k,v in pairs(menu.titleright) do
 
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    width = "40%",
    fgColor = "red",
    fontSize = 10,
  },setting2)
  menu[v]:setStyleSheet([[
    background-color:rgba(0,0,0,100%);
    border-style: outset;
    border-width: 2px;
    border-radius: 10px;
    border-color: blue;
    font: bold 12px;
    padding: 0px;
    margin-right: 1px;
    margin-left: 1px;
  ]])
   
    -- ***name and click handling***
    menu[v]:echo(v)
    
end

menu.click("Chat")
menu.click("Group")
menu.click("Inventory")
menu.click("Config")
menu.container:lockContainer()</script>
							<eventHandlerList />
						</Script>
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Character</name>
					<packageName></packageName>
					<script>function makechar()
characterwindow = Geyser.Container:new(
    {
      name = "characterwindow",
      x = "77%", y = "13%",
      width = "22%",
      height = "45%",
    }, ui)

characterbackground = Geyser.Label:new({
  name = "characterbackground",
  x = "0%", y = 0, 
  width = "100%", height = "100%",
}, characterwindow)
characterbackground:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/scoreinvis.png");
   border-radius: 10px;
]])

--    **label for the stats***
scorelabel = Geyser.Label:new({
  name="scorelabel",
  x="10%", y="18%",
  height="60%", width="80%",
},characterbackground)
scorelabel:setStyleSheet([[
  background-color: rgba(0,0,0,0%);
  ]])

-- ***left side stats background***
scoreleftbackground = Geyser.Label:new({
  name="scoreleftbackground",
  x="0%", y="0%",
  height="100%", width="40%",
},scorelabel)
scoreleftbackground:setStyleSheet([[
  background-color: rgba(250,0,0,0%);
  ]])
--    ***box to hold the 7 stats labels***
scoreleftbox = Geyser.VBox:new({
  name = "scoreleftbox",
  x = "0%", y = 0,
  height = "100%",
  width = "100%",
},scoreleftbackground)

--    ***right side info background***
scorerightbackground = Geyser.Label:new({
  name="scorerightbackground",
  x="40%", y="0%",
  height="100%", width="60%",
},scorelabel)
scorerightbackground:setStyleSheet([[
  background-color: rgba(0,0,250,0%);
  ]])
---    ***box to split the 6 stats***
scorerightbox = Geyser.VBox:new({
  name = "scorerightbox",
  x = 0, y = 0,
  width = "100%",
  height = "100%",
},scorerightbackground)





--    ***handle the left side stats***
for k,v in pairs(stats.stats) do

--  ***make 7 verticle labels for stats***
stats[v.."tab"] = Geyser.Label:new({
  name="stats."..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
},scoreleftbox)
stats[v.."tab"]:setStyleSheet([[
    background-color: rgba(250,0,0,0%);
  ]])

--  ***make 7 labels each inside the newly create vertical split for stat titles***
stats[v.."title"]= Geyser.Label:new({
  name="stats."..v.."title",
  x="0%", y="20%",
  height="100%", width="40%",
  fontSize = 12,
  fgColor = "gold",
},stats[v.."tab"])
stats[v.."title"]:setStyleSheet([[
    background-color: rgba(0,0,250,0%);
    font: bold 12px;
    qproperty-alignment: 'AlignRight';
  ]])
stats[v.."title"]:echo(v..":")

--    ***make 7 HBoxes to split up the current and base stats***
stats[v.."split"]= Geyser.HBox:new({
  name="stats."..v.."split",
  x="40%", y="0%",
  height="100%", width="60%",
},stats[v.."tab"])

end

--    ***handle the right side stats***
for k,v in pairs(stats.stats2) do

--  ***make 6 rows for other info on the right***
stats[v.."tab"] = Geyser.Label:new({
  name="stats"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
},scorerightbox)
stats[v.."tab"]:setStyleSheet([[
    background-color: rgba(250,250,250,0%);
  ]])

--    ***make 6 labels for the stat title*** 
  stats[v.."title"] = Geyser.Label:new({
  name="stats"..v.."title",
  x="0%", y="24%",
  height="100%", width="47%",
  fgColor = "gold",
  fontSize = 12,
},stats[v.."tab"])
stats[v.."title"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
    qproperty-alignment: 'AlignRight';
  ]])
stats[v.."title"]:echo(v.." :")

---   ***make 6 labels for the stat value***  
  stats[v.."value"] = Geyser.Label:new({
  name="stats"..v.."value",
  x="49%", y="0%",
  height="100%", width="57%",
  fontSize = 12,
},stats[v.."tab"])
stats[v.."value"]:setStyleSheet([[
    background-color: rgba(250,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."value"]:echo(v)
end

--    ***fill with max possible width?***
stats.Hitrollvalue:echo("00")
stats.Damrollvalue:echo("00")
stats.Armorvalue:echo("-000")
stats.Alignvalue:echo("-1000")
stats.Favorvalue:echo("Dishonored")
stats.Goldvalue:echo("888,888,888")

end

makechar()
makechar()</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>ID</name>
						<packageName></packageName>
						<script>function makeID()
scorename = Geyser.Label:new({
  name="scorename",
  x="20%", y="3%",
  height="10%", width="60%",
  fontSize = 12,
  fgColor = "gold",
},characterbackground)
scorename:setStyleSheet([[
    background-color: rgba(0,0,250,0%);
    font: bold 14px;
  ]])
scorename:echo("&lt;center&gt;NAME")

scoreinfo = Geyser.Label:new({
  name="scoreinfo",
  x="10%", y="10%",
  height="10%", width="80%",
  fontSize = 12,
  fgColor = "gold",
},characterbackground)
scoreinfo:setStyleSheet([[
    background-color: rgba(0,0,250,0%);
    font: bold 14px;
  ]])
scoreinfo:echo("&lt;center&gt;Level XX Race-here ClassHere")

end
makeID(
makeID())</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level etc</name>
						<packageName></packageName>
						<script>Levelbackground = Geyser.Label:new({
  name="Levelbackground",
  x="10%", y="75%",
  height="20%", width="80%",
},characterbackground)
Levelbackground:setStyleSheet([[
  background-color: rgba(250,0,0,0%);

  ]])

Leveltitle = Geyser.Label:new({
  name="Leveltitle",
  x="0%", y="32%",
  height="40%", width="100%",
  fontSize = 10,
},Levelbackground)
Leveltitle:setStyleSheet([[
  background-color: rgba(0,0,250,0%);
  font: bold 8px;
  ]])
Leveltitle:echo([[&lt;center&gt;1,405,409 / 1,600,000 &lt;span style = "color: gold;font: bold 14px"&gt;EXP&lt;/span&gt;]])

levelguage = Geyser.Gauge:new({
  name = "levelguage",
  x = "0%", y = "70%",
  width = "100%", height = "38%",
  fontSize = 10,
},Levelbackground)

levelguage.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-width: 1px;
    border-color: white;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])

levelguage.front:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #00aaff, stop: 0.1 #0091ff, stop: 0.2 #006eff, stop: 0.3 #0055ff, stop: 0.4 #002fff, stop: 0.45 #0004ff, stop: 0.55 #0004ff, stop: 0.6 #002fff, stop: 0.7 #0055ff, stop: 0.8 #006eff, stop: 0.9 #0091ff, stop: 1 #00aaff);
    border-width: 1px;
    border-color: gold;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])

levelguage:setValue(1, 2)
levelpercent = Geyser.Label:new({
    name = "levelpercent",
    x = "2%", y = "20%",
    width = "12%", height = "60%",
  },levelguage)
  levelpercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
levelpercent:echo([[&lt;span style = "color: gold;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: white;font: bold 16px"&gt;%&lt;/span&gt;]])</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>split stats</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>STR</name>
							<packageName></packageName>
							<script>function makeSTR()
for k,v in pairs(stats.split) do
stats[v.."STR"] = Geyser.Label:new({
  name="STR"..v,
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.STRsplit)
stats[v.."STR"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."STR"]:echo("&lt;center&gt;00")
end
stats.baseSTR:echo("&lt;center&gt;(00)")

end
makeSTR()
makeSTR()
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>INT</name>
							<packageName></packageName>
							<script>function makeINT()
for k,v in pairs(stats.split) do
stats[v.."INT"] = Geyser.Label:new({
  name="INT"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.INTsplit)
stats[v.."INT"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."INT"]:echo("&lt;center&gt;00")
end
stats.baseINT:echo("&lt;center&gt;(00)")

end
makeINT()
makeINT()</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>WIS</name>
							<packageName></packageName>
							<script>function makeWIS()
for k,v in pairs(stats.split) do

stats[v.."WIS"] = Geyser.Label:new({
  name="WIS"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.WISsplit)
stats[v.."WIS"]:setStyleSheet([[
    background-color: rgba(0,0,250,0%);
    font: bold 12px;
  ]])
stats[v.."WIS"]:echo("&lt;center&gt;00")
end
stats.baseWIS:echo("&lt;center&gt;(00)")

end
makeWIS()
makeWIS()</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>DEX</name>
							<packageName></packageName>
							<script>function makeDEX()
for k,v in pairs(stats.split) do

stats[v.."DEX"] = Geyser.Label:new({
  name="DEX"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.DEXsplit)
stats[v.."DEX"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."DEX"]:echo("&lt;center&gt;00")
end
stats.baseDEX:echo("&lt;center&gt;(00)")

end
makeDEX()
makeDEX()</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>CON</name>
							<packageName></packageName>
							<script>function makeCON()
for k,v in pairs(stats.split) do

stats[v.."CON"] = Geyser.Label:new({
  name="CON"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.CONsplit)
stats[v.."CON"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."CON"]:echo("&lt;center&gt;00")
end
stats.baseCON:echo("&lt;center&gt;(00)")

end
makeCON()
makeCON()</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>CHA</name>
							<packageName></packageName>
							<script>function makeCHA()
for k,v in pairs(stats.split) do

stats[v.."CHA"] = Geyser.Label:new({
  name="CHA"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.CHAsplit)
stats[v.."CHA"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."CHA"]:echo("&lt;center&gt;00")
end
stats.baseCHA:echo("&lt;center&gt;(00)")

end
makeCHA()
makeCHA()</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>LCK</name>
							<packageName></packageName>
							<script>function makeLCK()
for k,v in pairs(stats.split) do

stats[v.."LCK"] = Geyser.Label:new({
  name="LCK"..v.."tab",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
},stats.LCKsplit)
stats[v.."LCK"]:setStyleSheet([[
    background-color: rgba(0,0,0,0%);
    font: bold 12px;
  ]])
stats[v.."LCK"]:echo("&lt;center&gt;00")
end
stats.baseLCK:echo("&lt;center&gt;(00)")

end
makeLCK()
makeLCK()</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Popout Map</name>
					<packageName></packageName>
					<script>popupmap = popupmap or Adjustable.Container:new(
    {
      name = "popupmap",
      x = "79%", y = "0%",
      adjLabelstyle = "background-color:rgba(0, 0, 0,100%); border: 4px groove grey;",
      width = "20%",
      titleText = "Popout Map Window",
      padding = 11
    }, ui)

mappercontainer = Geyser.Container:new({
  name = "mappercontainer",
  x = "0%", y = 0, 
  width = "100%", height = "100%"
}, popupmap)
Popoutmapper = Geyser.Mapper:new({
  name = "popoutmapper",
  x = "0%", y = 0, 
  width = "100%", height = "100%"
}, mappercontainer)

maplabel = Geyser.Label:new({
  name="maplabel",
  x="0%", y="0%",
  height="100%", width="100%",
  fontSize = 12,
  fgColor = "red",
  message = [[&lt;center&gt;Click on the name of the area in the list to speedwalk to it!&lt;BR&gt;&lt;BR&gt;Double Click on this window at any time to bring up the AutoMapper!&lt;br&gt;&lt;br&gt;&lt;br&gt; Click on a map from the Area List to load it into this window!&lt;br&gt; Double click on one to open the Rodpedia areas page&lt;/center&gt;]]},popupmap)
maplabel:setStyleSheet([[
  qproperty-wordWrap: true;
  background-color: rgba(0,0,0,100%);
  border-radius: 10px;
  ]])

popupmap:minimize()
popupmap:newCustomItem("Toggle Mapper", hidemap)
maplabel:setDoubleClickCallback("hidemap")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Area List</name>
					<packageName></packageName>
					<script>speedwalk = Geyser.Label:new({name="speedwalk", x="0%",y=0,height="7%",width="7%",nestflyout=true, message="&lt;center&gt;Area List&lt;/center&gt;"},ui)
speedwalk:setStyleSheet([[background-color: black; border-width: 1px;  border-style: solid;  border-color: SkyBlue;  border-radius: 20px;]])
speedwalk:setFontSize(12)

for k,v in pairs(swtable.levels) do
  local pass = string.gsub(v, "(%d+)", " %1")
  -- options to layoutDir are the direction the window should go (R for right, L for left, T for top, B for bottom), followed by how the nested labels should be oriented (V for vertical or H for horizontal). So "BH" here means it'll go on the bottom of the label, while expanding horizontally
  swtable[v] = speedwalk:addChild({
    name="swtable."..v,
    height="5%",width="7%",
    layoutDir="BV", 
    flyOut=true, 
    message= v
    })
  swtable[v]:setFontSize(14)
  swtable[v]:setStyleSheet([[
    background-color: MidnightBlue;  
    border-width: 1px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 15px;
    ]])
  
  swtable[v]:echo(pass)
  
end



          </script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>All</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.all) do
  swtable[v]=swtable.All:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>General</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.general) do
  swtable[v]=swtable.General:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  swtable[v]:setDoubleClickCallback(pass.."Wiki")
  
  
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 5</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level5) do
  swtable[v]=swtable.Level5:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 10</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level10) do
  swtable[v]=swtable.Level10:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 15</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level15) do
  swtable[v]=swtable.Level15:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 20</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level20) do
  swtable[v]=swtable.Level20:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 25</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level25) do
  swtable[v]=swtable.Level25:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 30</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level30) do
  swtable[v]=swtable.Level30:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 35</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level35) do
  swtable[v]=swtable.Level35:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 40</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level40) do
  swtable[v]=swtable.Level40:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 45</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level45) do
  swtable[v]=swtable.Level45:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Level 50</name>
						<packageName></packageName>
						<script>for k,v in pairs(swtable.level50) do
  swtable[v]=swtable.Level50:addChild({
    name="swtable"..v,
    height="3%",width="12%", 
    layoutDir="RV", 
    flyOut=true, 
    })
  swtable[v]:setStyleSheet([[
    background-color: DarkSlateBlue;
    border-width: 2px;  
    border-style: solid;  
    border-color: black;  
    border-radius: 5px;
    ]])
  swtable[v]:raise()
  swtable[v]:echo(v)
  local pass = string.gsub(v, "[%W%d]", "")
  swtable[v]:setClickCallback(pass)
  v = swtable[v]:addChild({name=v ,height="100%",width="75%", layoutDir="RV", flyOut=true})
  v:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/]]..pass..[[.png")]])
  v:raise()
  v:setClickCallback(pass.."Map")
  v:setDoubleClickCallback(pass.."Wiki")
  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Speedwalk Function</name>
						<packageName></packageName>
						<script>function speedwalkstring (path, reverse, delay, start_delay)
	local direction_table = {}
	local reverse_table = {
		n 	= "s",
		e 	= "w",
		s 	= "n",
		w 	= "e",
		nw 	= "se",
		ne 	= "sw",
		se 	= "nw",
		sw 	= "ne",
		u 	= "d",
		d 	= "u"
	}

   for count, direction in rex.gmatch( path, [=[([1-9]+)?([newsdu]|\[[\w\W]+?\])]=] ) do
		count = (type(tonumber(count)) == "number" and count) or 1
		direction = direction:gsub( "[%[%]]", "" )

      for i=1, count do 
			direction_table[#direction_table+1] = direction
		end
   end

	local current_delay = start_delay or delay
	if not reverse then
		for _, direction in ipairs( direction_table ) do
			if not delay then
				send( direction )
			else
				tempTimer( current_delay, function () send( direction ) end )
				current_delay = current_delay + delay
			end
		end
	else
		for i = #direction_table, 1, -1 do
			local reversed = reverse_table[direction_table[i]] or direction_table[i]

			if not delay then
				send( reversed )
			else
				tempTimer( current_delay, function () send( reversed ) end )
				current_delay = current_delay + delay
			end
    end
	end
end

walklist = {}
walkdelay = 0

function speedwalktimer()
   send(walklist[1])
   table.remove(walklist, 1)
   if #walklist&gt;0 then
      tempTimer(walkdelay, [[speedwalktimer()]])
   end
end


function speedwalking(dirString, backwards, delay)
   local dirString   =   dirString:lower()
   walklist         =   {}
   walkdelay         =   delay
   local reversedir   =   {
                     n   = "s",
                     en   = "sw",
                     e   = "w",
                     es   = "nw",
                     s   = "n",
                     ws   = "ne",
                     w   = "e",
                     wn   = "se",
                     u   = "d",
                     d   = "u",
                     ni   = "out",
                     tuo = "in"
                     }

   if not backwards then
      for count, direction in string.gmatch(dirString, "([0-9]*)([neswudio][ewnu]?t?)") do      
           count = (count == "" and 1 or count)
          for i=1, count do
            if delay then walklist[#walklist+1] = direction 
            else expandAlias(direction)
            end
         end
      end
   else
      local returnpath=dirString:gsub("(%d+)", function(d) return d:reverse() end)
      for direction, count in string.gmatch(returnpath:reverse(), "(t?[ewnu]?[neswudio])([0-9]*)") do      
          count = (count == "" and 1 or count)
          for i=1, count do
            if delay then walklist[#walklist+1] = reversedir[direction]
            else expandAlias(reversedir[direction])
            end
         end
      end
   end

if walkdelay then speedwalktimer() end

end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Click Functions</name>
						<packageName></packageName>
						<script>function AbattoirAsylum()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Abattoir Asylum&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e2s[se]6e3[se]3s[sw]2s[scry for an adjacent room called Afloat on the ocean]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AbattoirAsylumMap()
end
function AbattoirAsylumWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Abattoir_Asylum")
end

function AbishaisMorgue()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Abishai's Morgue&lt;yellow&gt;!\n")
    speedwalkstring("9w[sw]4ws[sw]2w[open s]2s[sw]s[window]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AbishaisMorgueMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/AbishaisMorgue.png")]])
end
function AbishaisMorgueWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Abishai%27s_Morgue")
end

function TheAlluvrianMoors()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Find the worthless beggar in PK Town and say 'the moors'!\n")
  --speedwalkstring("", false, 0.75)
  else
    cecho("&lt;yellow&gt;Find the worthless beggar in PK Town and say 'the moors'!\n")
  end
end
function TheAlluvrianMoorsMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheAlluvrianMoors.png")]])
end
function TheAlluvrianMoorsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Alluvrian_Moors")
end

function AlongtheForestPath()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Along the Forest Path&lt;yellow&gt;!\n")
    speedwalkstring("7w[sw]2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AlongtheForestPathMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/AlongtheForestPath.png")]])
end
function AlongtheForestPathWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Along_the_Forest_Path")
end

function Anabandonedmine()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt; PK -From Plaza- 4 n,2 w,2 n,nw,ne,2 e,n,d,2 n,d,3 n,e,3 n,2 e,2 n,ne!\n")
  elseif room == "Plaza" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;An abandoned mine&lt;yellow&gt;!\n")
    speedwalkstring("4n2w2n[nw][ne]2end2nd3ne3n2e2n[ne]", false, 0.75)
  end
end
function AnabandonedmineMap()
  maplabel:echo("")
end
function AnabandonedmineWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/An_abandoned_mine")
end

function TheAncientCityofAurora()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Ancient City of Aurora&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s2[sw]s2[sw]s[sw]5s3e2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheAncientCityofAuroraMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheAncientCityofAurora.png")]])
end
function TheAncientCityofAuroraWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Ancient_City_of_Aurora")
end

function AntalltheLostHarbor()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Antall the Lost Harbor&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e2s[se]6e3[se]3s[sw]2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AntalltheLostHarborMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/AntalltheLostHarbor.png")]])
end
function AntalltheLostHarborWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Antall,_the_Lost_Harbor")
end

function AsgardNexus()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Asgard Nexus&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e2s[se]6e3[se]3s[sw]2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AsgardNexusMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/AsgardNexus.png")]])
end
function AsgardNexusWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Asgard_Nexus")
end

function TheAshenForest()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Ashen Forest&lt;yellow&gt;!\n")
    speedwalkstring("13e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheAshenForestMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheAshenForest.png")]])
end
function TheAshenForestWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Ashen_Forest")
end

function TheAstralPlane()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Astral Plane&lt;yellow&gt;!\n")
    speedwalkstring("3u", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheAstralPlaneMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheAstralPlane.png")]])
end
function TheAstralPlaneWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Astral_Plane")
end

function AzureSea()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Walking to &lt;white&gt;Azure Sea&lt;yellow&gt;!\n")
  speedwalking("6s, ne, 2s, se, 2e, s, 2sw, s, 2e, u, 3e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AzureSeaMap()
end
function AzureSeaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Azure_Sea")
end

function Badlands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Badlands&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]3s3[se]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BadlandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Badlands.png")]])
end
function BadlandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Badlands")
end

function BarrenPeaksofTahjliera()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Barren Peaks of Tahjliera&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n28w3s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BarrenPeaksofTahjlieraMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/BarrenPeaksofTahjliera.png")]])
end
function BarrenPeaksofTahjlieraWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Barren_Peaks_of_Tahjliera")
end

function TheBarrenWastes()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Barren Wastes&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]s2[sw]s[se][sw]2[se][sw]2[se]e[se]s[sw]w[sw][nw]w2[nw]wn[se][say scry/scan for 'A crumbling dusty stone peaks out through the hot sand.', dig down at stone, down]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheBarrenWastesMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheBarrenWastes.png")]])
end
function TheBarrenWastesWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Barren_Wastes")
end

function BarriksKeep()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Barrik's Keep&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w[nw][nw]3wse3[ne][se]4e2[se]3en5[ne]4[nw][ne]e3[ne]4e4n3en2[nw]2w4[sw]3w[nw]2w4[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BarriksKeepMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/BarriksKeep.png")]])
end
function BarriksKeepWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Barrik%27s_Keep")
end

function BartokGrove()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Walking to &lt;white&gt;Bartok Grove&lt;yellow&gt;!\n")
  speedwalking("6w, 2sw, 5w, s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BartokGroveMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Bartokgrove.png")]])
end
function BartokGroveWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Bartok_Grove")
end

function Bilwen()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Bilwen&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]se[say the ship Meridia is here from 5pm to 6pm and takes you to the Isle", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BilwenMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Bilwen.png")]])
end
function BilwenWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Bilwen")
end

function BlackravenCitadel()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Blackraven Citadel&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s2[se]2ws3w[nw]uwn[nw]2un2e[ne]6n2u", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BlackravenCitadelMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/BlackravenCitadel.png")]])
end
function BlackravenCitadelWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Blackraven_Citadel")
end

function BlastedLands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Blasted Lands&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]2w[sw]2se", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function BlastedLandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/BlastedLands.png")]])
end
function BlastedLandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Blasted_Lands")
end

function TheBloodSea()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Blood Sea&lt;yellow&gt;!\n")
    speedwalkstring("52w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheBloodSeaMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheBloodSea.png")]])
end
function TheBloodSeaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Blood_Sea")
end

function TheBurrows()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Burrows&lt;yellow&gt;!\n")
    speedwalkstring("9w[nw]2w[nw]3n2w3n2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheBurrowsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheBurrows.png")]])
end
function TheBurrowsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Burrows")
end

function CathedraloftheDamned()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Cathedral of the Damned&lt;yellow&gt;!\n")
    speedwalkstring("41w7n2w3w4s7w[open hellhole]s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CathedraloftheDamnedMap()
  maplabel:echo("")
  --maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/CathedraloftheDamned.png")]])
end
function CathedraloftheDamnedWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Cathedral_of_the_Damned")
end

function CityofEldestra()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;City of Eldestra&lt;yellow&gt;!\n")
    speedwalkstring("2[ne]2n[tell tage I seek the sanctuary of Eldestra]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CityofEldestraMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/CityofEldestra.png")]])
end
function CityofEldestraWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/City_of_Eldestra")
end

function CityofIniquity()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;City of Iniquity&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n28w2s4ed", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CityofIniquityMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/City_of_Iniquity.png")]])
end
function CityofIniquityWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_City_of_Iniquity")
end

function TheCityofSalburg()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The City of Salburg&lt;yellow&gt;!\n")
    speedwalkstring("8n[ne]wn[ne][nw]e[ne]ne[ne]2n2[ne]w2[nw]3n[ne]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheCityofSalburgMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheCityofSalburg.png")]])
end
function TheCityofSalburgWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_City_of_Salburg")
end

function ColdComfort()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Cold Comfort&lt;yellow&gt;!\n")
    speedwalkstring("4sw2n[give 5000 coins receptionist]2ne[ne][nw]2[ne]n[enter]de2n[say scan for room with a se exit, se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ColdComfortMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ColdComfort.png")]])
end
function ColdComfortWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Cold_Comfort")
end

function CoralDepths()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Coral Depths&lt;yellow&gt;!\n")
    speedwalking("6s, ne, 2s, se, 2e, s, 2sw, s, 2e, u, 3e, ne, 2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CoralDepthsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/CoralDepths.png")]])
end
function CoralDepthsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Coral_Depths")
end

function CrystalmirLake()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Crystalmir Lake&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n28w3s2d5w[nw]4w3[sw]wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CrystalmirLakeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Crystalmirlake.png")]])
end 
function CrystalmirLakeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Crystalmir_Lake")
end

function CursedLands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Cursed Lands&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n26w2n[ne][nw]n[nw]2w5nd2[nw][ne]e[nw]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function CursedLandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/CursedLands.png")]])
end
function CursedLandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Cursed_Lands")
end

function DMoriansLands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;D'Morian's_Lands&lt;yellow&gt;!\n")
    speedwalking("32w, 6s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DMoriansLandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DMoriansLands.png")]])
end
function DMoriansLandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/D%27Morian%27s_Lands")
end

function Daichaal()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Daichaal&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]3s5[se]3sds[se]s3[se]e3s[ne]es2[se]3e2[se]3e[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DaichaalMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Daichaal.png")]])
end
function DaichaalWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Daichaal")
end

function DarkhavenArtGallery()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Darkhaven Art Gallery&lt;yellow&gt;!\n")
    speedwalkstring("4swn[say give 5k coins receptionist to enter]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DarkhavenArtGalleryMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DarkhavenArtGallery.png")]])
end
function DarkhavenArtGalleryWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Darkhaven_Art_Gallery")
end

function DawntoDusk()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dawn to Dusk&lt;yellow&gt;!\n")
    speedwalkstring("7w[sw]sw2[sw]s2w[se]3w[sw][se][sw][se]2[sw][se]2s[sw]s[sw]s[se]s[sw]2s[sw]s[sw]3s[sw]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DawntoDuskMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DawntoDusk.png")]])
end
function DawntoDuskWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dawn_to_Dusk")
end

function DesertofDespair()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Desert of Despair&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DesertofDespairMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DesertofDespair.png")]])
end
function DesertofDespairWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Desert_of_Despair")
end

function DragonCult()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dragon Cult&lt;yellow&gt;!\n")
    speedwalkstring("4sen", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DragonCultMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DragonCult.png")]])
end
function DragonCultWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dragon_Cult")
end

function DragonTower()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dragon Tower&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s10[sw]wus2e2[se]2s[sw]2[nw]3w[sw]w[sw][se][sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DragonTowerMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DragonTower.png")]])
end
function DragonTowerWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dragon_Tower")
end

function DragonsPass()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dragon's Pass&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s5[sw][nw]5n[ne]ne2[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DragonsPassMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DragonsPass.png")]])
end
function DragonsPassWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dragon%27s_Pass")
end

function DrowCity()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Drow City&lt;yellow&gt;!\n")
    speedwalkstring("6n6e[se]e2[ne]e[nw]2n2[ne]w2[nw]3n[ne]n[nw]3n2[ne]n[nw]w2[nw]w3[nw]3w2[nw]3ws3w3n[ne][open d]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DrowCityMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DrowCity.png")]])
end
function DrowCityWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Drow_City")
end

function TheDungeon()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Dungeon&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]s2[sw]w2[sw]s[sw]s2[se]s5e3n2wnd[pick e][open e]ed", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheDungeonMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheDungeon.png")]])
end
function TheDungeonWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Dungeon")
end

function TheDunhillDemesnes()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Dunhill Demesnes&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]2n57w,[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheDunhillDemesnesMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheDunhillDemesnes.png")]])
end
function TheDunhillDemesnesWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Dunhill_Demesnes")
end

function DwarvenCatacombs()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dwarven Catacombs&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s3[se]e2[ne]n2[ne]n[nw]n[ne]w[push leaves][pull leaves]2e2nu[open u]u[open u]ue2d4n[open n]n[open n]nd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DwarvenCatacombsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DwarvenCatacombs.png")]])
end
function DwarvenCatacombsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dwarven_Catacombs")
end

function DylansArea()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Dylan's Area&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u3ws[sw]d3w3nw2s2[sw]2w[sw]2[nw][sw]w[sw]2s[sw][tree]2e3[se]4s3es2w[open w]wn2u2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function DylansAreaMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/DylansArea.png")]])
end
function DylansAreaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Dylan%27s_Area")
end
           
function EasternTradeRoute()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Eastern Trade Route&lt;yellow&gt;!\n")
    speedwalking("8e, ne", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function EasternTradeRouteMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Easterntraderoute.png")]])
end
function EasternTradeRouteWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Eastern_Trade_Route")
end

function ElementalCanyon()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Walking to &lt;white&gt;Elemental Canyon&lt;yellow&gt;!\n")
  speedwalking("13s, 2e, 2u, w, sw, w, sw, 2d, 2sw, 4s, e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ElementalCanyonMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ElementalCanyon.png")]])
end 
function ElementalCanyonWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Elemental_Canyon")
end              

function EmeraldHills()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Emerald Hills&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]3s[sw][se]u[se]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function EmeraldHillsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/EmeraldHills.png")]])
end
function EmeraldHillsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Emerald_Hills")
end
                
function EzardsFields()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Ezard's Fields&lt;yellow&gt;!\n")
    speedwalking("9w, nw, 2w, nw, w, 2n, 2nw, ne", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function EzardsFieldsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/EzardsFields.png")]])
end  
function EzardsFieldsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Ezard%27s_Fields")
end             

function FallenGraces()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, start from Plaza!\n") 
  elseif room == "Plaza" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Fallen Graces&lt;yellow&gt;!\n")
	speedwalkstring("4n2ws", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function FallenGracesMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/FallenGraces.png")]])
end
function FallenGracesWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Fallen_Graces")
end

function FlorebitInImmortalisIuvenis()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Florebit In Immortalis Iuvenis&lt;yellow&gt;!\n")
    speedwalkstring("9w2[nw]nw[nw]w2[nw]8w[nw]16wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function FlorebitInImmortalisIuvenisMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/FlorebitInImmortalisIuvenis.png")]])
end
function FlorebitInImmortalisIuvenisWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Florebit_In_Immortalis_Iuvenis")
end

function Florin()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Find the Miracle Max's Bellows and Pick up&lt;yellow&gt;!\n")
    --speedwalkstring("9w2[nw]nw[nw]w2[nw]8w[nw]16wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Find the Miracle Max's Bellows and Pick up&lt;yellow&gt;!\n")
  end
end
function FlorinMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Florin.png")]])
end
function FlorinWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Florin")
end
               
function ForestofTears()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Forest of Tears&lt;yellow&gt;!\n")
    speedwalking("7w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ForestofTearsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Forestoftears.png")]])
end   
function ForestofTearsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Forest_of_Tears")
end      

function ForestedStrongholds()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;all south(how many?), w, 2n, type fight&lt;yellow&gt;!\n")
    --speedwalkstring("", false, 0.75)
  else
    cecho("&lt;yellow&gt;all south(how many?), w, 2n, type fight&lt;yellow&gt;!\n")
  end
end
function ForestedStrongholdsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ForestedStrongholds.png")]])
end
function ForestedStrongholdsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Forested_Strongholds")
end
              
function ForgottenWoods()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Forgotten Woods&lt;yellow&gt;!\n")
    speedwalking("8n, ne, w, n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ForgottenWoodsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ForgottenWoods.png")]])
end 
function ForgottenWoodsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Forgotten_Woods")
end 

function Galaxy()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Galaxy&lt;yellow&gt;!\n")
    speedwalkstring("4sw2n[give 5k coins rec][unlock n][open n]3n[ne]n[enter]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GalaxyMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Galaxy.png")]])
end
function GalaxyWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Galaxy")
end

function TheGauntlet()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Gauntlet&lt;yellow&gt;!\n")
    speedwalkstring("9w2[nw]nw[nw]w[nw]w2s2e2[ne]e[ne]nu2end3s[se][ne]n[open se]2[se][ne][open e]e[se]s[sw]s[sw]2ws4eu[open e]edw[unlock w]wd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheGauntletMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheGauntlet.png")]])
end
function TheGauntletWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Gauntlet")
end

function GlimwinklesChessboard()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Glimwinkle's Windmill(Chessboard)&lt;yellow&gt;!\n")
    speedwalkstring("13e3s3e2[ne]3[se]ese", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GlimwinklesChessboardMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GlimwinklesChessboard.png")]])
end
function GlimwinklesChessboardWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Glimwinkle%27s_Chessboard")
end

function GlimwinklesWindmill()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Glimwinkle's Windmill(Chessboard)&lt;yellow&gt;!\n")
    speedwalkstring("13e3s3e2[ne]3[se]ese", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GlimwinklesWindmillMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GlimwinklesWindmill.png")]])
end
function GlimwinklesWindmillWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Glimwinkle%27s_Windmill")
end
               
function Graveyard()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Graveyard&lt;yellow&gt;!\n")
    speedwalkstring("9w[sw]4ws[sw]2w[open s]s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GraveyardMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Graveyard.png")]])
end
function GraveyardWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Graveyard")
end             

function GraveyardoftheGods()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, start from Gravoc!\n") 
  elseif room == "Gravoc" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Graveyard of the Gods&lt;yellow&gt;!\n")
	speedwalkstring("2s6ese2s[se]s[se]es[se]3s[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function GraveyardoftheGodsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GraveyardoftheGods.png")]])
end
function GraveyardoftheGodsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Graveyard_of_the_Gods")
end

function GreatEasternDesert()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Great Eastern Desert&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]2w[sw]2se", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GreatEasternDesertMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GreatEasternDesert.png")]])
end
function GreatEasternDesertWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Great_Eastern_Desert")
end
                
function GreenForest()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Green Forest&lt;yellow&gt;!\n")
    speedwalking("6n, 6w, nw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GreenForestMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GreenForest.png")]])
end
function GreenForestWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Green_Forest")
end

function Grimoire()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only!\n") 
  elseif room == "Gravoc" then
   -- cecho("&lt;yellow&gt;Walking to &lt;white&gt;Grimoire&lt;yellow&gt;!\n")
	--speedwalkstring("2s6ese2s[se]s[se]es[se]3s[se]", false, 0.75)
  else
   -- cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function GrimoireMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Grimoire.png")]])
end
function GrimoireWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Grimoire")
end

function GuildofOrigin()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Guild of Origin&lt;yellow&gt;!\n")
    speedwalkstring("2[ne]e[ne][nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function GuildofOriginMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/GuildofOrigin.png")]])
end
function GuildofOriginWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Guild_of_Origin")
end

function HallofMirrors()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Inside the Midway of Despair&lt;yellow&gt;!\n")
    --speedwalkstring("2[ne]e[ne][nw]", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function HallofMirrorsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/HallofMirrors.png")]])
end
function HallofMirrorsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Hall_of_Mirrors")
end

function TheHallsofKnowledge()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Halls of Knowledge&lt;yellow&gt;!\n")
    speedwalkstring("3esd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheHallsofKnowledgeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheHallsofKnowledge.png")]])
end
function TheHallsofKnowledgeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Halls_of_Knowledge")
end

function HauntedHouse()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Inside the Midway of Despair&lt;yellow&gt;!\n")
    speedwalkstring("3esd", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function HauntedHouseMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/HauntedHouse.png")]])
end
function HauntedHouseWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Haunted_House")
end

function TheHavenofEverlastingLight()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Haven of Everlasting Light&lt;yellow&gt;!\n")
    speedwalkstring("6w2[sw]5w4[nw]3[ne]2n3[nw]w4[sw]w2[nw]w[nw]n4[ne]4n2[nw]2w4[sw]s2[se]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheHavenofEverlastingLightMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheHavenofEverlastingLight.png")]])
end
function TheHavenofEverlastingLightWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Haven_of_Everlasting_Light")
end

function HeartoftheEther()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Heart of the Ether&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw][nw]n[ne]u2[ne]u[ne]u[ne][nw]wu2[ne]uwu[ne][se]2e2[se]ed[ne]2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function HeartoftheEtherMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/HeartoftheEther.png")]])
end
function HeartoftheEtherWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Heart_of_the_Ether")
end

function HighTowerofSorcery()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;High Tower of Sorcery&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s5[sw][nw]5n[ne]ne2[se]es[se][sw]4s2[sw]s[se]2w[nw][sw]2n[sw]w[sw]n[nw][ne]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function HighTowerofSorceryMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/HighTowerofSorcery.png")]])
end
function HighTowerofSorceryWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/High_Tower_of_Sorcery")
end

function InconnuCitadel()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6s[ne]2s[se]2es2[sw]s5[sw][nw]5n[ne]ne2[se]es[se][sw]4s2[sw]s[se]2w[nw][sw]2n[sw]w[sw]n[nw][ne]n", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function InconnuCitadelMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/InconnuCitadel.png")]])
end
function InconnuCitadelWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Inconnu_Citadel")
end

function TheIntriguesoftheMidennir()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Intrigues of the Miden'nir&lt;yellow&gt;!\n")
    speedwalkstring("13se[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheIntriguesoftheMidennirMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheIntriguesoftheMidennir.png")]])
end
function TheIntriguesoftheMidennirWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Intrigues_of_the_Miden%27nir")
end

function TheIslandofIrrybis()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Island of Irrybis&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n62w[nw]2[ne][nw][ne]2n[nw]nd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheIslandofIrrybisMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheIslandofIrrybis.png")]])
end
function TheIslandofIrrybisWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Island_of_Irrybis")
end

function IsleoftheMonkeys()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Isle of the Monkeys&lt;yellow&gt;!\n")
    speedwalkstring("3esd[open w]3w[open e]6w[examine portal][examine portal][enter]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function IsleoftheMonkeysMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/IsleoftheMonkeys.png")]])
end
function IsleoftheMonkeysWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Isle_of_the_Monkeys")
end

function IsleoftheSavrathi()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only!\n") 
  elseif room == "Gravoc" then
    --cecho("&lt;yellow&gt;Walking to &lt;white&gt;Isle of the Savrathi&lt;yellow&gt;!\n")
	--speedwalkstring("2s6ese2s[se]s[se]es[se]3s[se]", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function IsleoftheSavrathiMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/IsleoftheSavrathi.png")]])
end
function IsleoftheSavrathiWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Isle_of_the_Savrathi")
end

function TheKeepofBelial()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Keep of Belial&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheKeepofBelialMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheKeepofBelial.png")]])
end
function TheKeepofBelialWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Keep_of_Belial")
end

function KeepofLomar()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Keep of Lomar&lt;yellow&gt;!\n")
    speedwalkstring("6n6w[sw]wn[ne][nw]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function KeepofLomarMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/KeepofLomar.png")]])
end
function KeepofLomarWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Keep_of_Lomar")
end

function TheKeepofMahnTor()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Keep of Mahn-Tor&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w[se]w[sw]wu[nw]3w3[nw]3w[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheKeepofMahnTorMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheKeepofMahnTor.png")]])
end
function TheKeepofMahnTorWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Keep_of_Mahn-Tor")
end

function KilgharrahsCave()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w[se]w[sw]wu[nw]3w3[nw]3w[sw]", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function KilgharrahsCaveMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/KilgharrahsCave.png")]])
end
function KilgharrahsCaveWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Kilgharrah%27s_Cave")
end

function TheKingsCastle()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The King's Castle&lt;yellow&gt;!\n")
    speedwalkstring("13e3s3e2[ne]3[se]e2s[sw]s[se]s[se]2e2[ne]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheKingsCastleMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheKingsCastle.png")]])
end
function TheKingsCastleWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_King%27s_Castle")
end

function KingdomofJuargan()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Kingdom of Juargan&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw][nw]n[ne]u2[ne]u[ne]u[ne][nw]wu2[ne]uwu[ne]w4[sw]4wd2[nw][sw]u4wu2wn2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function KingdomofJuarganMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/KingdomofJuargan.png")]])
end
function KingdomofJuarganWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Kingdom_of_Juargan")
end

function KnightsoftheRound()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Knights of the Round&lt;yellow&gt;!\n")
    speedwalkstring("4sw2n[give 5k coins kelly][unlock n][open n]2nw[nw]w[nw]w[sw]w[enter]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function KnightsoftheRoundMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/KnightsoftheRound.png")]])
end
function KnightsoftheRoundWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Knights_of_the_Round")
end

function Kontaur()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Kontaur&lt;yellow&gt;!\n")
    speedwalkstring("26w5s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function KontaurMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Kontaur.png")]])
end
function KontaurWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Kontaur")
end

function LaChuteDeauDeLancients()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;La Chute D'eau De L'ancients&lt;yellow&gt;!\n")
    speedwalkstring("6n6e[se]e2[ne]e[nw]2n2[ne]w2[nw]e2n[ne]n[ne]2w[chop][se][chop][sw][chop]w[chop]w[chop]s[chop][sw][chop]w[chop][nw][chop]w[chop]w[chop][nw][ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function LaChuteDeauDeLancientsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/LaChuteDeauDeLancients.png")]])
end
function LaChuteDeauDeLancientsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/La_Chute_D%27eau_De_L%27ancients")
end

function LakeofTichPyga()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Lake of Tich'Pyga&lt;yellow&gt;!\n")
    speedwalking("7w, nw, 2n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function LakeofTichPygaMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/LakeofTichPyga.png")]])
end
function LakeofTichPygaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Lake_of_Tich%27Pyga")
end

function LamechsAbandonedManor()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Lamech's Abandoned Manor&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]u[nw][ne]2w[sw]3s2[se][ne]e[sw]s[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function LamechsAbandonedManorMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/LamechsAbandonedManor.png")]])
end
function LamechsAbandonedManorWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Lamech%27s_Abandoned_Manor")
end

function LandoftheFireNewts()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Land of the Fire Newts&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]2s[se]s4e2ne[ne]2nes", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function LandoftheFireNewtsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/LandoftheFireNewts.png")]])
end
function LandoftheFireNewtsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Land_of_the_Fire_Newts")
end

function TheLandoftheLost()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, start from Plaza!\n") 
  elseif room == "Plaza" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Land of the Lost&lt;yellow&gt;!\n")
	speedwalkstring("5w[nw]wu[sw]d2w[sw]swd2wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function TheLandoftheLostMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheLandoftheLost.png")]])
end
function TheLandoftheLostWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Land_of_the_Lost")
end

function TheLotusSanctuary()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, start from Gravoc!\n") 
  elseif room == "Gravoc" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Lotus Sanctuary&lt;yellow&gt;!\n")
	speedwalkstring("2s6es2e[ne][se]e3[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function TheLotusSanctuaryMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheLotusSanctuary.png")]])
end
function TheLotusSanctuaryWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Lotus_Sanctuary")
end

function MacMillanFamilyFarm()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;MacMillan Family Farm&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s10[sw]2w2[sw][nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MacMillanFamilyFarmMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MacMillanFamilyFarm.png")]])
end
function MacMillanFamilyFarmWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/MacMillan_Family_Farm")
end

function MachineDreams()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Machine Dreams&lt;yellow&gt;!\n")
    speedwalking("13e, 3s, w, s, 2w, n, 2w, 2s, se, 2e, ne, w, s, d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MachineDreamsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MachineDreams.png")]])
end
function MachineDreamsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Machine_Dreams")
end

function TheMahnTorCatacombs()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6s[ne]2s[se]2es2[sw]s10[sw]2w2[sw][nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheMahnTorCatacombsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheMahnTorCatacombs.png")]])
end
function TheMahnTorCatacombsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Mahn-Tor_Catacombs")
end

function MaidenstoneHeadquarters()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6s[ne]2s[se]2es2[sw]s10[sw]2w2[sw][nw]", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MaidenstoneHeadquartersMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MaidenstoneHeadquarters.png")]])
end
function MaidenstoneHeadquartersWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Maidenstone_Headquarters")
end

function MajorOak()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Major Oak&lt;yellow&gt;!\n")
    speedwalkstring("6w2[sw]5w2[nw][ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MajorOakMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MajorOak.png")]])
end
function MajorOakWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Major_Oak")
end

function MathlaanLagoon()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mathlaan Lagoon&lt;yellow&gt;!\n")
    speedwalkstring("8e3[ne]3e[ne]e[ne]2e5n[ne]e[ne]e[se]e[ne]3n[ne]2d12w[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MathlaanLagoonMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MathlaanLagoon.png")]])
end
function MathlaanLagoonWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Mathlaan_Lagoon")
end

function Midennir()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Miden'nir&lt;yellow&gt;!\n")
    speedwalking("7s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MidennirMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Midennir.png")]])
end
function MidennirWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Miden%27nir")
end

function MidwayofDespair()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Midway of Despair&lt;yellow&gt;!\n")
    speedwalkstring("[Pull the magic rope]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MidwayofDespairMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MidwayofDespair.png")]])
end
function MidwayofDespairWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Midway_of_Despair")
end

function Mire()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mire&lt;yellow&gt;!\n")
    speedwalking("6s, ne, 2s, se, 2e, s, 2sw, s, 10sw, w, u, s, 2e, 2se, 2s, sw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MireMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Mire.png")]])
end
function MireWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Mire")
end

function MithrilHall()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mithril Hall&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]u[nw][ne]2w[sw]3s2[se][sw]2uw[nw]w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MithrilHallMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MithrilHall.png")]])
end
function MithrilHallWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Mithril_Hall")
end

function AMomentinNature()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;A Moment in Nature&lt;yellow&gt;!\n")
    speedwalkstring("3esd[open w]3w[open w]6w[enter]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function AMomentinNatureMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/AMomentinNature.png")]])
end
function AMomentinNatureWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/A_Moment_in_Nature")
end

function MorgulVale()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Morgul Vale&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n49w9sw[sw]2su2s2w2[sw]s[se][sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MorgulValeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MorgulVale.png")]])
end
function MorgulValeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Morgul_Vale")
end
                
function Moria()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Moria&lt;yellow&gt;!\n")
    speedwalking("8e, 2se, 2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MoriaMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Moria.png")]])
end 
function MoriaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Moria")
end            

function MountKrozloy()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mount Krozloy&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw][nw]n[ne]u2[ne]u[ne]u[ne][nw]wu2[ne]uwu[ne]w4[sw]4wd2[nw][sw]u4wu2wn2e[open n]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MountKrozloyMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MountKrozloy.png")]])
end
function MountKrozloyWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Mount_Krozloy")
end

function TheMountainofLostSouls()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Mountain of Lost Souls&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n49w8s[sw]5w2[sw][nw]3wd[sw]2se", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheMountainofLostSoulsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheMountainofLostSouls.png")]])
end
function TheMountainofLostSoulsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Mountain_of_Lost_Souls")
end

function MountainsofDesolation()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mountains of Desolation&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s3[se]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MountainsofDesolationMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MountainsofDesolation.png")]])
end
function MountainsofDesolationWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Mountains_of_Desolation")
end

function MulcibersForge()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Mulciber's Forge&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]unwu[ne][nw]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function MulcibersForgeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/MulcibersForge.png")]])
end
function MulcibersForgeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Mulciber%27s_Forge")
end

function Nevermore()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Nevermore&lt;yellow&gt;!\n")
    speedwalkstring("8n[ne]wn[ne][nw]e[ne]ne[ne]2n2[ne]2en3[ne]e[ne]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NevermoreMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Nevermore.png")]])
end
function NevermoreWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Nevermore")
end

function NewDarkhaven()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;New Darkhaven&lt;yellow&gt;!\n")
    speedwalkstring("", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NewDarkhavenMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/NewDarkhaven.png")]])
end
function NewDarkhavenWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/New_Darkhaven")
end

function NewHopeFarm()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;New Hope Farm&lt;yellow&gt;!\n")
    speedwalkstring("6w2[sw]5w2se[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NewHopeFarmMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/NewHopeFarm.png")]])
end
function NewHopeFarmWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/New_Hope_Farm")
end
              
function NewOfcol()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;New Ofcol&lt;yellow&gt;!\n")
    speedwalking("6n, 3nw, w, 4n, 2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NewOfcolMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Ofcol.png")]])
end  
function NewOfcolWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/New_Ofcol")
end         
            
function NorthernPlains()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Northern Plains&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NorthernPlainsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/NorthernPlains.png")]])
end 
function NorthernPlainsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Northern_Plains")
end      
          
function NorthernTradeRoute()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Northern Trade Route&lt;yellow&gt;!\n")
    speedwalking("6n, nw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function NorthernTradeRouteMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Northerntraderoute.png")]])
end
function NorthernTradeRouteWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Northern_Trade_Route")
end

function OceanKeep()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Ocean Keep&lt;yellow&gt;!\n")
    speedwalkstring("8e3[ne]3e[ne]e[ne]2e5n[ne]e[ne]e[se]e[ne]3n[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OceanKeepMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OceanKeep.png")]])
end
function OceanKeepWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Ocean_Keep")
end

function OckwaterFens()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Ockwater Fens&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u3ws[sw]d3w3n2w[sw]w3n2[ne][nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OckwaterFensMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OckwaterFens.png")]])
end
function OckwaterFensWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Ockwater_Fens")
end

function OctopusGarden()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Octopus Garden&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e2s[se]e[ne]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OctopusGardenMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OctopusGarden.png")]])
end
function OctopusGardenWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Octopus_Garden")
end

function Ofcol()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Ofcol&lt;yellow&gt;!\n")
    speedwalking("6n, 3nw, w, n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OfcolMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Ofcol.png")]])
end
function OfcolWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Ofcol")
end

function OldMarsh()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Old Marsh&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u3ws[sw]d3w3nw2s2[sw]2w[sw]2[nw][sw]w[sw]2s[sw][tree]2e3[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OldMarshMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OldMarsh.png")]])
end
function OldMarshWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Old_Marsh")
end

function OldPottswortsFields()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Old Pottswort's Fields&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s5[sw][nw]n2[ne]e2[ne]en[ne]4n[ne]n[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OldPottswortsFieldsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OldPottswortsFields.png")]])
end
function OldPottswortsFieldsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Old_Pottswort%27s_Fields")
end

function OldThalos()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Old Thalos&lt;yellow&gt;!\n")
    speedwalking("41w, 7n, 2w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OldThalosMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OldThalos.png")]])
end
function OldThalosWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Old_Thalos")
end

function Olympus()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Olympus&lt;yellow&gt;!\n")
    speedwalkstring("8un", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OlympusMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Olympus.png")]])
end
function OlympusWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Olympus")
end

function Opallinoc()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Opallinoc&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]2n60wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OpallinocMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Opallinoc.png")]])
end
function OpallinocWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Opallinoc")
end

function OrderofRingbearers()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Order of Ringbearers&lt;yellow&gt;!\n")
    speedwalkstring("13swnw[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OrderofRingbearersMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/OrderofRingbearers.png")]])
end
function OrderofRingbearersWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Order_of_Ringbearers")
end

function Otherland()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Otherland&lt;yellow&gt;!\n")
    speedwalking("6s, ne, 2s, se, 2e, s, 2sw, s, 2e, u, 3e, 3s, se, 3e, s, 2se, 3s, sw, w, sw, d, nw, s, 2e, 2se, w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function OtherlandMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Otherland.png")]])
end
function OtherlandWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Otherland")
end

function PassoftheMourned()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, start from Plaza!\n") 
  elseif room == "Plaza" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Pass of the Mourned&lt;yellow&gt;!\n")
	speedwalkstring("4n2endn[ne]ne[ne]end2n[nw]4n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function PassoftheMournedMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/PassoftheMourned.png")]])
end
function PassoftheMournedWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Pass_of_the_Mourned")
end

function ThePeaksofTarpaCithm()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Peaks of Tar'pa Cithm&lt;yellow&gt;!\n")
  speedwalkstring("[nw]2w4ne[look painting][open n]n28w3s3d5w2[nw]3w4[sw]3[nw]3w[sw]s4e2s[se]4e[ne]es2[se]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ThePeaksofTarpaCithmMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ThePeaksofTarpaCithm.png")]])
end
function ThePeaksofTarpaCithmWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Peaks_of_Tar%27pa_Cithm")
end

function PixieForest()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Pixie Forest&lt;yellow&gt;!\n")
    speedwalking("6n, 6e, se, e, 2ne, e, nw, 2n, 2ne, nw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function PixieForestMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/PixieForest.png")]])
end
function PixieForestWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Pixie_Forest")
end

function QetagsReach()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Qetag's Reach&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w2[nw]3w5[nw]2w[sw]w2u3n[nw]2d[nw]2n2[nw]w2nd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function QetagsReachMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/QetagsReach.png")]])
end
function QetagsReachWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Qetag%27s_Reach")
end

function RavenTor()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Raven Tor&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw][nw]n[ne]u2[ne]u[ne]u[ne][nw]wu2[ne]uwu[ne][se]2e2[se]ed[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function RavenTorMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/RavenTor.png")]])
end
function RavenTorWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Raven_Tor")
end

function RealmofWorship()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Realm of Worship&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sd[ne]n[ne]5n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function RealmofWorshipMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/RealmofWorship.png")]])
end
function RealmofWorshipWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Realm_of_Worship")
end

function RedfernesResidence()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Redferne's Residence&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u3ws[sw]d3w3nw2s2[sw]2w[sw]2[nw][sw]w[sw]2s[sw][tree]2e3[se]4s3es2w[open w]w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function RedfernesResidenceMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/RedfernesResidence.png")]])
end
function RedfernesResidenceWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Redferne%27s_Residence")
end

function ReignofMadness()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Reign of Madness&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w2[nw]3wse3[ne][se]4e2[se]3en5[ne]4[nw][ne]e3[ne]4e4n3en2[nw]2w4[nw][say scan for down exit to A Sharp Descent]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ReignofMadnessMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ReignofMadness.png")]])
end
function ReignofMadnessWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Reign_of_Madness")
end

function ReomyrVillage()
  if room =="Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Reomyr Village&lt;yellow&gt;!\n")
    speedwalkstring("8n[ne]wn[ne][nw]e[ne]ne[ne]2n2[ne]2en[ne][nw]w2nu", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ReomyrVillageMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ReomyrVillage.png")]])
end
function ReomyrVillageWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Reomyr_Village")
end

function RevelationCity()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Revelation City&lt;yellow&gt;!\n")
    speedwalkstring("6n6e[se]e2[ne]e[nw]2n2[ne]w2[nw]3n[ne]n[nw]3n2[ne]n[nw]w2[nw]w3[nw]3w2[nw]3w5[nw]wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function RevelationCityMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/RevelationCity.png")]])
end
function RevelationCityWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Revelation_City")
end

function TheRuinsofTman()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Ruins of T'man&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]ne", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheRuinsofTmanMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheRuinsofTman.png")]])
end
function TheRuinsofTmanWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Ruins_of_T%27man")
end

function SanctumoftheArcanes()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sanctum of the Arcanes&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n8w3s2d5w[nw]4w3[sw]wnd5ww[nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SanctumoftheArcanesMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SanctumoftheArcanes.png")]])
end
function SanctumoftheArcanesWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Sanctum_of_the_Arcanes")
end

function SanctusIrae()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sanctus Irae&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]3s[sw][se]u[se]5e[ne]2eu[open n]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SanctusIraeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SanctusIrae.png")]])
end
function SanctusIraeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Sanctus_Irae_(area)")
end

function TheSandsofTeracchei()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Sands of Teracchei&lt;yellow&gt;!\n")
    speedwalkstring("8ue", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheSandsofTeraccheiMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheSandsofTeracchei.png")]])
end
function TheSandsofTeraccheiWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Sands_of_Teracchei")
end

function ScourgeofTime()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Scourge of Time&lt;yellow&gt;!\n")
    speedwalkstring("8un[unlock n][open n]n[say track Malsangre, then say back in time]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ScourgeofTimeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ScourgeofTime.png")]])
end
function ScourgeofTimeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Scourge_of_Time")
end

function SeaofSorrows()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sea of Sorrows&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e3s[se]3es2[se]3s[sw]w[sw]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SeaofSorrowsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SeaofSorrows.png")]])
end
function SeaofSorrowsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Sea_of_Sorrows")
end

function Sentinel()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sentinel&lt;yellow&gt;!\n")
    speedwalking("9w, 2nw, n, w, nw, w, nw, w, 2s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SentinelMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Sentinel.png")]])
end
function SentinelWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Sentinel")
end

function SerpentineCoils()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e3s[se]3es2[se]3s[sw]w[sw]d", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SerpentineCoilsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SerpentineCoils.png")]])
end
function SerpentineCoilsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Serpentine_Coils")
end

function SesuadraRift()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sesuad'ra Rift&lt;yellow&gt;!\n")
    speedwalkstring("42w7n[enter][sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SesuadraRiftMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SesuadraRift.png")]])
end
function SesuadraRiftWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Sesuad%27ra_Rift")
end

function SethsFortress()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Seth's Fortress&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]u[nw][ne]2w[sw]3s2[se][ne]e[sw]s3e2u", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SethsFortressMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SethsFortress.png")]])
end
function SethsFortressWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Seth%27s_Fortress")
end

function Sewer()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Sewer&lt;yellow&gt;!\n")
    speedwalkstring("6s[open manhole]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SewerMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Sewer.png")]])
end
function SewerWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Sewer")
end

function ShadowGrove()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Shadow_Grove&lt;yellow&gt;!\n")
    speedwalking("7n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ShadowGroveMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ShadowGrove.png")]])
end
function ShadowGroveWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Shadow_Grove")
end

function Shadowport()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Shadowport&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u2wn[nw]2n[sw]s[sw][se]e[ne][open wall]3nw[open w]2wnw2n[open d]d", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ShadowportMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Shadowport.png")]])
end
function ShadowportWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Shadowport")
end

function ShaiGhool()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Shai'Ghool&lt;yellow&gt;!\n")
    speedwalkstring("8e3[ne]3e[ne]e[ne]2e2ne[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ShaiGhoolMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ShaiGhool.png")]])
end
function ShaiGhoolWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Shai%27Ghool")
end

function ShatteredRefuge()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Shattered Refuge&lt;yellow&gt;!\n")
    speedwalking("9s, w, 3s, w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ShatteredRefugeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ShatteredRefuge.png")]])
end
function ShatteredRefugeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Shattered_Refuge")
end

function Shire()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Shire&lt;yellow&gt;!\n")
    speedwalking("9w, nw, 2w, nw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ShireMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Shire.png")]])
end
function ShireWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Shire")
end

function SilvermoonOutpost()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Silvermoon Outpost&lt;yellow&gt;!\n")
    speedwalkstring("51w3s[sw]5s7[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SilvermoonOutpostMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SilvermoonOutpost.png")]])
end
function SilvermoonOutpostWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Silvermoon_Outpost")
end

function TheSlimePit()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Slime Pit&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s2[sw]2s2[ne]n[nw]w2[nw]w3[nw]3w2[nw]3w5[nw]2w[sw]w2u3n[nw]2d[nw]n2w[nw]u3w[nw]w[se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheSlimePitMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheSlimePit.png")]])
end
function TheSlimePitWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Slime_Pit")
end
               
function SouthernMountainRange()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Southern Mountain Range&lt;yellow&gt;!\n")
    speedwalking("6s, ne, 2s, se, 2e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SouthernMountainRangeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Southernmountainrange.png")]])
end   
function SouthernMountainRangeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Southern_Mountain_Range")
end            

function TheSouthernMountainTradeRoute()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Southern Mountain Trade Route&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s5[sw][nw]n[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheSouthernMountainTradeRouteMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheSouthernMountainTradeRoute.png")]])
end
function TheSouthernMountainTradeRouteWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Southern_Mountain_Trade_Route")
end

function SteadingoftheHillGiants()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Steading of the Hill Giants&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]u[nw][ne]2w[sw]3s[sw]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function SteadingoftheHillGiantsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/SteadingoftheHillGiants.png")]])
end
function SteadingoftheHillGiantsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Steading_of_the_Hill_Giants")
end

function TayalardianRangelands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tayalardian Rangelands&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]2w[sw]5w3n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TayalardianRangelandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TayalardianRangelands.png")]])
end
function TayalardianRangelandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tayalardian_Rangelands")
end

function TempleoftheLaughingGod()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, Find the worthless beggar in PK Town and say 'the temple'!\n") 
  elseif room == "Plaza" then
    --cecho("&lt;yellow&gt;Walking to &lt;white&gt;Temple of the Laughing God&lt;yellow&gt;!\n")
	--speedwalkstring("4n2endn[ne]ne[ne]end2n[nw]4n", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function TempleoftheLaughingGodMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TempleoftheLaughingGod.png")]])
end
function TempleoftheLaughingGodWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Temple_of_the_Laughing_God")
end

function TempleoftheMoon()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Temple of the Moon&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n49w8s[sw]3wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TempleoftheMoonMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TempleoftheMoon.png")]])
end
function TempleoftheMoonWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Temple_of_the_Moon")
end

function Thalos()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Thalos&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[se]4e3s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ThalosMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Thalos.png")]])
end
function ThalosWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Thalos")
end

function TheFireStation()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Unknown&lt;yellow&gt;!\n")
    --speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[se]4e3s", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheFireStationMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheFireStation.png")]])
end
function TheFireStationWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Fire_Station")
end

function TheGuildofSpirit()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Guild of Spirit&lt;yellow&gt;!\n")
    speedwalkstring("[nw]wn", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheGuildofSpiritMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheGuildofSpirit.png")]])
end
function TheGuildofSpiritWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Guild_of_Spirit")
end

function TheTowerofDespair()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Tower of Despair&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[sw]u3s[sw]s[sw]w3u", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheTowerofDespairMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheTowerofDespair.png")]])
end
function TheTowerofDespairWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Tower_of_Despair")
end

function ThulAbhara()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Thul Ab'hara&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]w[sw]2s3[se][sw]s2[sw]w2[sw][nw]2d[sw]ds3[se]s[sw][se]sw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ThulAbharaMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ThulAbhara.png")]])
end
function ThulAbharaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Thul_Ab%27hara")
end

function TomboftheSleepingDemon()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, Find the worthless beggar in PK Town and say 'the tomb'!\n") 
  elseif room == "Plaza" then
    --cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tomb of the Sleeping Demon&lt;yellow&gt;!\n")
	--speedwalkstring("4n2endn[ne]ne[ne]end2n[nw]4n", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Plaza&lt;yellow&gt;!\n")
  end
end
function TomboftheSleepingDemonMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TomboftheSleepingDemon.png")]])
end
function TomboftheSleepingDemonWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tomb_of_the_Sleeping_Demon")
end

function TowerofEnlightenment()
  if room == "Darkhaven Square" then
  cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tower of Enlightenment&lt;yellow&gt;!\n")
  speedwalkstring("8n[ne]wn[nw]wsw2[nw]n[nw]2n[nw]w[nw][ne]2n[nw][ne]n[nw][sw][nw]n3[nw][ne]e[nw]nw2n[nw]wn[sw]w[nw]2w2[sw]w[sw]wdw[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TowerofEnlightenmentMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TowerofEnlightenment.png")]])
end
function TowerofEnlightenmentWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tower_of_Enlightenment")
end

function TowerofLithos()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, From Gravoc e,3 n,nw,sw,2 nw,w,sw,nw,n!\n") 
  elseif room == "Gravoc" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tower of Lithos&lt;yellow&gt;!\n")
	speedwalkstring("e3n[nw][sw]2[nw]w[sw][nw]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Gravoc&lt;yellow&gt;!\n")
  end
end
function TowerofLithosMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TowerofLithos.png")]])
end
function TowerofLithosWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tower_of_Lithos")
end
                
function TownofSolace()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Town of Solace&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n23w3n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TownofSolaceMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TownofSolace.png")]])
end 
function TownofSolaceWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Town_of_Solace")
end 

function Transylvania()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Transylvania&lt;yellow&gt;!\n")
    speedwalkstring("13s2e2ue3[se]ds4[se]e[se]e[ne][nw]nu2n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TransylvaniaMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Transylvania.png")]])
end
function TransylvaniaWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Transylvania")
end

function TheTreeofLife()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Tree of Life&lt;yellow&gt;!\n")
    speedwalkstring("50w5s3w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheTreeofLifeMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheTreeofLife.png")]])
end
function TheTreeofLifeWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Tree_of_Life")
end

function TreetopsandCanopy()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Treetops and Canopy&lt;yellow&gt;!\n")
    speedwalkstring("9w2[nw]18wu", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TreetopsandCanopyMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TreetopsandCanopy.png")]])
end
function TreetopsandCanopyWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Treetops_and_Canopy")
end

function TribalSwamplands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tribal Swamplands&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s10[sw]wus2e2[se]2s[sw]2[nw]3w[sw]w4[sw]4s[se]s[sw]s[sw]w2[sw]5s[se]2e[se]e[se]s[sw]e", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TribalSwamplandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TribalSwamplands.png")]])
end
function TribalSwamplandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tribal_Swamplands")
end

function TrollDen()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Troll Den&lt;yellow&gt;!\n")
    speedwalkstring("6n6e[se]e2[ne]2e[ne]esw[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TrollDenMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TrollDen.png")]])
end
function TrollDenWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Troll_Den")
end
                
function TullfuhrzkyManor()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tullfuhrzky Manor&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4nw[look painting]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TullfuhrzkyManorMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TullfuhrzkyManor.png")]])
end 
function TullfuhrzkyManorWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Tullfuhrzky_Manor")
end                

function TheUmbrageousRuins()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;PK only, starting area!\n") 
  elseif room == "Gravoc" then
   -- cecho("&lt;yellow&gt;Walking to &lt;white&gt;Tower of Lithos&lt;yellow&gt;!\n")
	--speedwalkstring("e3n[nw][sw]2[nw]w[sw][nw]n", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Gravoc&lt;yellow&gt;!\n")
  end
end
function TheUmbrageousRuinsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheUmbrageousRuins.png")]])
end
function TheUmbrageousRuinsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Umbrageous_Ruins")
end

function TheUnderworld()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Underworld&lt;yellow&gt;!\n")
    speedwalkstring("26w7sesesds[give 50000 coins Wicorith]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheUnderworldMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheUnderworld.png")]])
end
function TheUnderworldWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Underworld")
end
              
function UnholyGrounds()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Unholy Grounds&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function UnholyGroundsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/UnholyGrounds.png")]])
end  
function UnholyGroundsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Unholy_Grounds")
end            

function ValeofNidaros()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Vale of Nidaros&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2se2[se]4en[nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ValeofNidarosMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ValeofNidaros.png")]])
end
function ValeofNidarosWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Vale_of_Nidaros")
end

function TheValleyofCrucifixion()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Valley of Crucifixion&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e3s[se]3es2[se]3s[sw]w[sw]d[nw]s2e2[se]w[nw][sw]wse", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheValleyofCrucifixionMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheValleyofCrucifixion.png")]])
end
function TheValleyofCrucifixionWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Valley_of_Crucifixion")
end

function ValleyofMysts()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Valley of Mysts&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2se2[se]4en[nw]2n[sw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ValleyofMystsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ValleyofMysts.png")]])
end
function ValleyofMystsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Valley_of_Mysts")
end
                
function ValleyoftheElves()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Valley of the Elves&lt;yellow&gt;!\n")
    speedwalstring("[nw]2w4ne[look painting][open n]n30w2s15w", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function ValleyoftheElvesMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/ValleyoftheElves.png")]])
end
function ValleyoftheElvesWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Valley_of_the_Elves")
end                 

function VastHorizons()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Can only teleport there&lt;yellow&gt;!\n")
    --speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2se2[se]4en[nw]2n[sw]", false, 0.75)
  else
    --cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function VastHorizonsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/VastHorizons.png")]])
end
function VastHorizonsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Vast_Horizons")
end

function VillageofEdo()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Village of Edo&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n26w2n[ne][nw]n[nw]2w6n[nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function VillageofEdoMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/VillageofEdo.png")]])
end
function VillageofEdoWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Village_of_Edo")
end

function TheVillageofTarpaCithm()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Village of Tar'pa Cithm&lt;yellow&gt;!\n")
    speedwalkstring("[nw]2w4ne[look painting][open n]n28w3s3d5w2[nw]3w4[sw]3[nw]3w[sw]se", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheVillageofTarpaCithmMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheVillageofTarpaCithm.png")]])
end
function TheVillageofTarpaCithmWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Village_of_Tar%27pa_Cithm")
end

function TheVonDeusenMausoleum()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Von Deusen Mausoleum&lt;yellow&gt;!\n")
    speedwalkstring("8e2[se]s4[se]2s[sw]2n[nw][pull branch]n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheVonDeusenMausoleumMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheVonDeusenMausoleum.png")]])
end
function TheVonDeusenMausoleumWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Von_Deusen_Mausoleum")
end
              
function Warehouse()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Warehouse&lt;yellow&gt;!\n")
    speedwalking("4w, n, n, sw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WarehouseMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Warehouse.png")]])
end
function WarehouseWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Warehouse")
end
 
function Wastelands()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Wastelands&lt;yellow&gt;!\n")
    speedwalking("6s, ne, 2s, se, 2e, s, 2sw, s, 4sw, 3s, se", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WastelandsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/Wastelands.png")]])
end
function WastelandsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Wastelands")
end
 
function WendleMansion()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Wendle Mansion&lt;yellow&gt;!\n")
    speedwalking("8n, nw, w, n", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WendleMansionMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WendleMansion.png")]])
end
function WendleMansionWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Wendle_Mansion")
end
 
function WesternTradeRoute()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Western Trade Route&lt;yellow&gt;!\n")
    speedwalking("6w, sw", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WesternTradeRouteMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WesternTradeRoute.png")]])
end
function WesternTradeRouteWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Western_Trade_Route")
end

function WhitePineCamp()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;White Pine Camp&lt;yellow&gt;!\n")
    speedwalkstring("8e3[ne]3e[ne][se]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WhitePineCampMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WhitePineCamp.png")]])
end
function WhitePineCampWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/White_Pine_Camp")
end

function WildTundra()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Wild Tundra&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e3s[se]3es2[se]3s[sw]w[sw]d[nw]s2e2[se]w[nw][sw]2wsd", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WildTundraMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WildTundra.png")]])
end
function WildTundraWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Wild_Tundra")
end

function TheWilds()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Wilds&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]u[nw][ne]2w[sw]3s2[se][ne]e[sw]s[sw]s2[se][ne]2n[nw]n[ne]d[ne]un[nw]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheWildsMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheWilds.png")]])
end
function TheWildsWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Wilds")
end

function WinterlightIsland()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Winterlight Island&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s4[sw]4s5[se]2sds[se]s3[se]3e2s2ed[se][ne]sd[se]s", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WinterlightIslandMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WinterlightIsland.png")]])
end
function WinterlightIslandWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Winterlight_Island")
end

function TheWolfsDen()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Wolf's Den&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]2n2[nw]n[ne]n[ne]2n2[ne]ne", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheWolfsDenMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheWolfsDen.png")]])
end
function TheWolfsDenWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Wolf%27s_Den")
end

function WyvernsTower()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;Wyvern's Tower&lt;yellow&gt;!\n")
    speedwalkstring("6n3[nw]wn4esw[sw]s[sw]2s[sw]3w[ne]", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function WyvernsTowerMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/WyvernsTower.png")]])
end
function WyvernsTowerWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/Wyvern%27s_Tower")
end

function TheZiggurat()
  if room == "Darkhaven Square" then
    cecho("&lt;yellow&gt;Walking to &lt;white&gt;The Ziggurat&lt;yellow&gt;!\n")
    speedwalkstring("6s[ne]2s[se]2es2[sw]s2eu3e3s[se]3es2[se]3s[sw]w[sw]d[nw]s2e2[se]w[nw][sw]ws", false, 0.75)
  else
    cecho("&lt;yellow&gt;Please start in &lt;white&gt;Darkhaven Square&lt;yellow&gt;!\n")
  end
end
function TheZigguratMap()
  maplabel:echo("")
  maplabel:setStyleSheet([[border-image: url("]]..home..[[/RoD_UI/MAPS/TheZiggurat.png")]])
end
function TheZigguratWiki()
  openWebPage("https://rodpedia.realmsofdespair.info/wiki/The_Ziggurat")
end
</script>
						<eventHandlerList />
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Bars and reports</name>
					<packageName></packageName>
					<script>
statuswindow = Geyser.Container:new({
  name = "statuswindow",
  x = "0%", y = "89.5%",
  width = "79%",
  height = "10.5%",
},ui)

statusBackground = Geyser.Label:new({
    name = "statusBackground",
    x = 0, y = "0%",
    width = "85%",
    height = "100%",
    },statuswindow)
statusBackground:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
    background-image: url("]]..home..[[/RoD_UI/ui_tile.png");
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px
  ]])
function lockstatus()
  statuswindow:lockContainer() 
end
function unlockstatus()
  statuswindow:unlockContainer()
end


function Attack()
  if attack == "none" then
    cecho("\n&lt;white&gt;Please set your attack with &lt;DeepSkyBlue&gt;sa *&lt;white&gt;!\n")
  elseif enemy == nil or "none" then
    cecho("\n&lt;green&gt;You are not fighting anything&lt;white&gt;!\n")
  else
    send(attack.." "..enemy)
  end
end
function Target()
  if enemy == "none" then
    cecho("\n&lt;white&gt;Please set your target with &lt;DeepSkyBlue&gt;st *&lt;white&gt;!\n")
  else
    send("kill "..target)
  end
end
function Secondary()
  if secondary == "none" then
    cecho("\n&lt;white&gt;Please set your secondary attack with &lt;DeepSkyBlue&gt;ss *&lt;white&gt;!\n")
  elseif enemy == "none" then
    cecho("\n&lt;green&gt;You are not fighting anything&lt;white&gt;!\n")
  else
    send(secondary.." "..enemy)
  end
end
function Debuff()
  if debuff == "none" then 
    cecho("\n&lt;white&gt;Please set your debuff with &lt;DeepSkyBlue&gt;sd *&lt;white&gt;!\n")
  else
    send("c "..debuff.." "..enemy)
  end
end
function Potion()
  if heal == "none" then
    cecho("\n&lt;white&gt;Please set your potion to quaff with &lt;DeepSkyBlue&gt;sp *&lt;white&gt;!\n") 
  else
    send("quaff "..heal.." "..container)
  end
end
function Container()
  if container == "none" then 
    cecho("\n&lt;white&gt;Please set your container with &lt;DeepSkyBlue&gt;sc *&lt;white&gt;!")
  else
    send("exam "..container)
  end
end
function HealingAt()
  if quafftrigger == "none" then
    cecho("\n&lt;white&gt;Please set your heal limit with &lt;DeepSkyBlue&gt;sh *&lt;white&gt;!\n") 
  end
end




</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Health</name>
						<packageName></packageName>
						<script>healthbackground = Geyser.Label:new({
    name = "healthbackground",
    x = "1%", y = "10%",
    width = "35%", height = "40%",
  },statuswindow)
  healthbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

healthicon = Geyser.Label:new({
    name = "healthicon",
    x = "0%", y = "0%",
    width = "9%", height = "100%",
  },healthbackground)
  healthicon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/Health.png");
  ]])


statusHealth = Geyser.Gauge:new({
  name = "statusHealth",
  x = "10%", y = "0%",
  width = "90%", height = "100%",
},healthbackground)
statusHealth.back:setClickCallback("Potion")
statusHealth.front:setClickCallback("Potion")

statusHealth.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-width: 1px;
    border-color: gold;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])

statusHealth.front:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff0000, stop: 0.1 #e30707, stop: 0.2 #ed2005, stop: 0.3 #ed3305, stop: 0.4 #ed5a05, stop: 0.5 #ed7505 stop: 0.6 #ed5a05, stop: 0.7 #ed3305, stop: 0.8 #ed2005, stop: 0.9 #e30707, stop: 1 #ff0000);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px; 
]])
statusHealth:setValue(1, 2)

healthpercent = Geyser.Label:new({
    name = "healthpercent",
    x = "2%", y = "20%",
    width = "15%", height = "60%",
  },statusHealth)
  healthpercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
healthpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Weight</name>
						<packageName></packageName>
						<script>weightcontainer = Geyser.Container:new({
    name = "weightcontainer",
    x = "55%", y = "1.5%",
    width = "22%", height = "4%",
  },ui)
  
weightbackground = Geyser.Label:new({
    name = "weightbackground",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },weightcontainer)
  weightbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

weighticon = Geyser.Label:new({
    name = "weighticon",
    x = "0%", y = "0%",
    width = "9%", height = "100%",
  },weightbackground)
  weighticon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/Weight.png");
  ]])


statusWeight = Geyser.Gauge:new({
  name = "statusWeight",
  x = "10%", y = "0%",
  width = "90%", height = "100%",
},weightbackground)

statusWeight.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;
]])

statusWeight.front:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #290182, stop: 0.1 #8a4f32, stop: 0.2 #a35e3c, stop: 0.3 #c7764e, stop: 0.4 #cc6a39, stop: 0.5 #c75d28, stop: 0.6 #cc6a39, stop: 0.7 #c7764e, stop: 0.8 #a35e3c, stop: 0.9 #8a4f32, stop: 1 #290182);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;
    qproperty-alignment: 'AlignRight';
]])
statusWeight:setValue(1, 2)

weightpercent = Geyser.Label:new({
    name = "weightpercent",
    x = "2%", y = "20%",
    width = "20%", height = "60%",
  },statusWeight)
  weightpercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
weightpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Movement</name>
						<packageName></packageName>
						<script>movementcontainer = Geyser.Container:new({
    name = "movementcontainer",
    x = "7.5%", y = "1.5%",
    width = "22%", height = "4%",
  },ui)
  
movementbackground = Geyser.Label:new({
    name = "movementbackground",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },movementcontainer)
  movementbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

movementicon = Geyser.Label:new({
    name = "movementicon",
    x = "0%", y = "0%",
    width = "9%", height = "100%",
  },movementbackground)
  movementicon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/Movement.png");
  ]])

statusMovement = Geyser.Gauge:new({
  name = "statusMovement",
  x = "10%", y = "0%",
  width = "90%", height = "100%",
}, movementbackground)

statusMovement.back:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;

]])
statusMovement.front:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #099101, stop: 0.1 #09a800, stop: 0.2 #0cc402, stop: 0.3 #0fe004, stop: 0.4 #00ff04, stop: 0.5 #00ff04, stop: 0.6 #0fe004, stop: 0.7 #0cc402, stop: 0.8 #09a800, stop: 0.9 #099101, stop: 1 #078500);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;
]])
statusMovement:setValue(1, 2)

movementpercent = Geyser.Label:new({
    name = "movementpercent",
    x = "2%", y = "20%",
    width = "15%", height = "60%",
  },statusMovement)
  movementpercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
movementpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Enemy</name>
						<packageName></packageName>
						<script>enemycontainer = Geyser.Container:new({
    name = "enemycontainer",
    x = "32.75%", y = "0%",
    width = "25%", height = "15%",
  },ui)
  
enemybackground = Geyser.Label:new({
    name = "enemybackground",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },enemycontainer)
  enemybackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

enemyicon = Geyser.Label:new({
    name = "enemyicon",
    x = "23%", y = "40%",
    width = "30%", height = "100%",
  },enemybackground)
  enemyicon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/icons/Enemy.png");
  ]])
enemyiconbackground = Geyser.Label:new({
    name = "enemyiconbackground",
    x = "23%", y = "40%",
    width = "30%", height = "100%",
  },enemybackground)
  enemyiconbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])
  
enemyname = Geyser.Label:new({
    name = "enemyname",
    x = "11.5%", y = "2.5%",
    width = "53%", height = "20%",
    fontSize = 12,
    fgColor = "gold"
  },enemybackground)
  enemyname:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/SquareBorder.png");
    font: bold 10px;
  ]])
enemyname:echo("&lt;center&gt;Enemy Name")



statusEnemy = Geyser.Gauge:new({
  name = "statusEnemy",
  x = "0%", y = "20%",
  width = "76%", height = "20%",
},enemybackground)
statusEnemy.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-width: 1px;
    border-color: white;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])
statusEnemy.front:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff0000, stop: 0.1 #e30707, stop: 0.2 #ed2005, stop: 0.3 #ed3305, stop: 0.4 #ed5a05, stop: 0.5 #ed7505 stop: 0.6 #ed5a05, stop: 0.7 #ed3305, stop: 0.8 #ed2005, stop: 0.9 #e30707, stop: 1 #ff0000);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;
]])
statusEnemy:setValue(1, 2)
enemypercent = Geyser.Label:new({
    name = "enemypercent",
    x = "2%", y = "20%",
    width = "14%", height = "60%",
  },statusEnemy)
  enemypercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
enemypercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])



enemycontainer:hide()

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Blood</name>
						<packageName></packageName>
						<script>bloodbackground = Geyser.Label:new({
    name = "bloodbackground",
    x = "40%", y = "10%",
    width = "35%", height = "40%",
  },statuswindow)
  bloodbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

bloodicon = Geyser.Label:new({
    name = "bloodicon",
    x = "0%", y = "0%",
    width = "9%", height = "100%",
  },bloodbackground)
  bloodicon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/icons/Blood.png");
  ]])


statusBlood = Geyser.Gauge:new({
  name = "statusBlood",
  x = "10%", y = "0%",
  width = "90%", height = "100%",
},bloodbackground)
statusBlood.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-width: 1px;
    border-color: gold;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])
statusBlood.front:setStyleSheet([[                                      
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #820000, stop: 0.1 #990000, stop: 0.2 #ad0000, stop: 0.3 #c70202, stop: 0.4 #e30202, stop: 0.5 #fa0000, stop: 0.6 #e30202, stop: 0.7 #c70202, stop: 0.8 #ad0000, stop: 0.9 #990000, stop: 1 #820000);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
    margin: 1px;
]])
statusBlood:setValue(1, 2)
bloodpercent = Geyser.Label:new({
    name = "bloodpercent",
    x = "2%", y = "20%",
    width = "15%", height = "60%",
  },statusBlood)
  bloodpercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
bloodpercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])

bloodbackground:hide()</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Mana</name>
						<packageName></packageName>
						<script>
manabackground = Geyser.Label:new({
    name = "manabackground",
    x = "40%", y = "10%",
    width = "35%", height = "40%",
  },statuswindow)
  manabackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

manaicon = Geyser.Label:new({
    name = "manaicon",
    x = "0%", y = "0%",
    width = "9%", height = "100%",
  },manabackground)
  manaicon:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/Mana.png");
  ]])


statusMana = Geyser.Gauge:new({
  name = "statusMana",
  x = "10%", y = "0%",
  width = "90%", height = "100%",
},manabackground)

statusMana.back:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #450000, stop: 0.3 #630101, stop: 0.45 #910000, stop: 0.55 #910000, stop: 0.7 #450000, stop: 1 #450000);
    border-width: 1px;
    border-color: white;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])

statusMana.front:setStyleSheet([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #00aaff, stop: 0.1 #0091ff, stop: 0.2 #006eff, stop: 0.3 #0055ff, stop: 0.4 #002fff, stop: 0.45 #0004ff, stop: 0.55 #0004ff, stop: 0.6 #002fff, stop: 0.7 #0055ff, stop: 0.8 #006eff, stop: 0.9 #0091ff, stop: 1 #00aaff);
    border-width: 1px;
    border-color: white;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
]])
statusMana:setValue(1, 2)
manapercent = Geyser.Label:new({
    name = "manapercent",
    x = "2%", y = "20%",
    width = "15%", height = "60%",
  },statusMana)
  manapercent:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-radius: 7;
  ]])
manapercent:echo([[&lt;span style = "color: black;font: bold 16px"&gt;50&lt;/span&gt;&lt;span style = "color: black;font: bold 16px"&gt;%&lt;/span&gt;]])


manabackground:hide()

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Reports</name>
						<packageName></packageName>
						<script>
reportBackground = Geyser.Label:new({
    name = "reportBackground",
    x = "1%", y = "50%",
    width = "90%",
    height = "50%",
    },statuswindow)
reportBackground:setStyleSheet([[
    background-color:rgba(0,0,0,0%);
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px
    
  ]])

reportbox = Geyser.HBox:new({
  name = "reportbox",
  x = 0, y = "0%",
  width = "85%",
  height = "100%",
},reportBackground)

--    ***make containers for reports***
for k,v in pairs(menu.report) do

  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = 0, y = "0%",
    width = "100%",
    height = "100%",
  },reportbox)
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])
  
  menu[v.."icon"] = Geyser.Label:new({
    name = "menu."..v.."icon",
    x = 0, y = "0%",
    width = "30%",
    height = "100%",
  },menu[v])
  menu[v.."icon"]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    border-image: url("]]..home..[[/RoD_UI/Icons/]]..v..[[.png");
  ]])
  menu[v.."icon"]:setClickCallback(v)
  
  menu[v.."title"] = Geyser.Label:new({
    name = "menu."..v.."title",
    x = "31%", y = "0%",
    width = "69%",
    height = "100%",
    fgColor = "gold",
    fontSize = 12,
  },menu[v])
  menu[v.."title"]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    margin-right: 2px;
    margin-left: 2px;
    font: bold 10px;
  ]])
  menu[v.."title"]:echo(v)
  menu[v.."title"]:setClickCallback(v)
  
end

--menu.Attacktitle:echo("&lt;center&gt;"..attack)
--menu.Targettitle:echo("&lt;center&gt;"..enemy)
--menu.Secondarytitle:echo("&lt;center&gt;"..secondary)
--menu.Debufftitle:echo("&lt;center&gt;"..debuff)
--menu.Potiontitle:echo("&lt;center&gt;"..heal)
--menu.Containertitle:echo("&lt;center&gt;"..container)
--menu.HealingAttitle:echo("&lt;center&gt;"..quafftrigger .. " HP")


</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Combat Info</name>
						<packageName></packageName>
						<script>affectbackground = Geyser.Label:new({
    name = "areabackground",
    x = "77%", y = "2%",
    width = "7%", height = "100%",
  },statuswindow)
  affectbackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])
  
combatbox = Geyser.VBox:new({
    name = "combatbox",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },affectbackground)
  
for k,v in pairs(menu.combatinfo) do
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = "0%", y = "0%",
    fgColor = "gold",
    fontSize = 10,
  },combatbox)
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    font: bold 12px;
  ]])

menu[v]:echo(v..":")
end</script>
						<eventHandlerList />
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Logo</name>
					<packageName></packageName>
					<script>-- Logo
logocontainer = Geyser.Container:new({
  name = "logocontainer",
  x = "30%", y =0,
  width = "24.5%", height = "7%",
}, ui)

logo = Geyser.Label:new({
  name = "logo",
  x =0, y =0,
  width = "100%", height = "100%",
}, logocontainer)
logo:setColor(0,0,0,0)
logo:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/rod_logo.png");
]])

backgroundlogo = Geyser.Label:new({
  name = "backgroundlogo",
  x =0, y =0,
  width = "100%", height = "100%",
}, ui)
backgroundlogo:setColor(0,0,0,0)
backgroundlogo:setStyleSheet([[
  background-image: url("]]..home..[[/RoD_UI/logoinvis.png");
  background-repeat: no-repeat; background-position: center; background-origin: margin;
]])
backgroundlogo:enableClickthrough()

logofull = Geyser.Label:new({
  name = "logofull",
  x =0, y =0,
  width = "100%", height = "100%",
}, logocontainer)
logofull:setColor(0,0,0,0)
--logo:setBackgroundImage([[c:/Users/ME/Desktop/rod_logo_full.png]])
logofull:setStyleSheet([[
  border-image: url("]]..home..[[/RoD_UI/rod_logo_full.png");
]])
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>area info</name>
					<packageName></packageName>
					<script>function makearea()
areabackground = Geyser.Label:new({
    name = "areabackground",
    x = "78%", y = "3%",
    width = "20%", height = "10%",
  },ui)
  areabackground:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])

areabox = Geyser.VBox:new({
    name = "areabox",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },areabackground)
  

for k,v in pairs(menu.areainfo) do

    
  menu[v.."background"] = Geyser.Label:new({
    name = "menu."..v.."background",
    x = "0%", y = "0%",
    width = "100%", height = "100%",
  },areabox)
  menu[v.."background"]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
  ]])
  
  menu[v.."title"] = Geyser.Label:new({
    name = "menu."..v.."title",
    x = "0%", y = "15%",
    width = "16%", height = "100%",
    fontSize = 12,
    fgColor = "gold",
  },menu[v.."background"])
  menu[v.."title"]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    font: bold 12px;
    qproperty-alignment: 'AlignRight';
  ]])

menu[v.."title"]:echo(v..":")

menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = "16%", y = "0%",
    width = "84%", height = "100%",
    fontSize = 10,
  },menu[v.."background"])
  menu[v]:setStyleSheet([[
    background-color: ]]..menu.transparent..[[;
    font: bold 12px;
  ]])

end


end
makearea()
makearea()</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
